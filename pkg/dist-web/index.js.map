{"version":3,"file":"index.js","sources":["../dist-src/utils/allSettled.js","../dist-src/utils/hex.js","../dist-src/utils/blocks.js","../dist-src/utils/serializeEncrypted.js","../dist-src/utils/parts.js","../dist-src/utils/extractPromise.js","../dist-src/utils/oqueue.js","../dist-src/utils/chunkStream.js","../dist-src/utils/polyfillStream.js","../dist-src/download.js","../dist-src/utils/payload.js","../dist-src/utils/retry.js","../dist-src/upload.js","../dist-src/utils/readAll.js","../dist-src/core/account/api/v0/downloadFile.js","../dist-src/core/hashing.js","../dist-src/utils/hashToPath.js","../dist-src/core/account/api/v0/generateSubHDKey.js","../dist-src/core/requests/getPlans.js","../dist-src/core/requests/createAccount.js","../dist-src/core/requests/metadata.js","../dist-src/core/request.js","../dist-src/core/requests/checkPaymentStatus.js","../dist-src/core/account/api/v0/getAccountInfo.js","../dist-src/utils/cleanPath.js","../dist-src/core/account/api/v0/getFolderHDKey.js","../dist-src/core/account/api/v0/getFolderLocation.js","../dist-src/core/constants.js","../dist-src/core/encryption.js","../dist-src/core/account/api/v0/getFolderMeta.js","../dist-src/core/account/api/v0/getHandle.js","../dist-src/core/account/api/v0/isPaid.js","../dist-src/core/account/api/v0/register.js","../dist-src/core/account/api/v0/index.js","../dist-src/core/account/file-version.js","../dist-src/core/account/file-entry.js","../dist-src/core/account/folder-entry.js","../dist-src/core/account/folder-meta.js","../dist-src/utils/netQueue.js","../dist-src/core/account/api/v1/setFolderMeta.js","../dist-src/core/account/api/v1/meta/removeFile.js","../dist-src/core/account/api/v1/meta/removeVersion.js","../dist-src/core/account/api/v1/meta/addFile.js","../dist-src/core/account/api/v1/meta/addFolder.js","../dist-src/core/account/api/v1/meta/removeFolder.js","../dist-src/core/account/api/v1/createMetaQueue.js","../dist-src/core/account/api/v1/getFolderMeta.js","../dist-src/core/account/api/v1/buildFullTree.js","../dist-src/core/account/api/v1/createFolder.js","../dist-src/core/account/api/v1/createFolderMeta.js","../dist-src/core/requests/deleteFile.js","../dist-src/core/account/api/v1/deleteVersion.js","../dist-src/core/account/api/v1/deleteFile.js","../dist-src/core/account/api/v1/deleteFolder.js","../dist-src/core/account/api/v1/deleteFolderMeta.js","../dist-src/core/account/api/v1/isExpired.js","../dist-src/core/account/api/v1/login.js","../dist-src/core/account/api/v1/moveFile.js","../dist-src/core/account/api/v1/moveFolder.js","../dist-src/core/account/api/v1/renameFile.js","../dist-src/core/account/api/v1/renameFolder.js","../dist-src/core/requests/renewAccount.js","../dist-src/core/account/api/v1/renewAccount.js","../dist-src/core/requests/upgradeAccount.js","../dist-src/core/account/api/v1/upgradeAccount.js","../dist-src/core/account/api/v1/uploadFile.js","../dist-src/core/account/api/v1/index.js","../dist-src/core/web/webAccountMiddleware.js","../dist-src/core/web/webNetworkMiddleware.js","../dist-src/account.js"],"sourcesContent":["import { Mutex } from \"async-mutex\";\nexport const allSettled = async (arr) => {\n    const resolved = [];\n    const rejected = [];\n    const mutex = new Mutex();\n    arr.forEach(async (p) => {\n        const release = await mutex.acquire();\n        try {\n            resolved.push(await p);\n            rejected.push(null);\n        }\n        catch (err) {\n            resolved.push(null);\n            rejected.push(err);\n        }\n        finally {\n            release();\n        }\n    });\n    return resolved.reduce((acc, res, i) => { acc.push([res, rejected[i]]); return acc; }, []);\n};\n","export const bytesToHex = (b) => {\n    return b.reduce((acc, n) => { acc.push((\"00\" + n.toString(16)).slice(-2)); return acc; }, []).join(\"\");\n};\nexport const hexToBytes = (h) => {\n    return new Uint8Array(h.match(/.{1,2}/g).map(b => parseInt(b, 16)));\n};\n","export const blockSize = 64 * 1024;\nexport const blockOverhead = 32;\nexport const blockSizeOnFS = blockSize + blockOverhead;\nexport const numberOfBlocks = (size) => {\n    return Math.floor((size - 1) / blockSize) + 1;\n};\nexport const numberOfBlocksOnFS = (sizeOnFS) => {\n    return Math.floor((sizeOnFS - 1) / blockSizeOnFS) + 1;\n};\nexport const sizeOnFS = (size) => {\n    return size + blockOverhead * numberOfBlocks(size);\n};\n","export const serializeEncrypted = async (crypto, bytes, key) => {\n    const v = await crypto.decrypt(key, bytes);\n    const s = new TextDecoder(\"utf-8\").decode(v);\n    return JSON.parse(s);\n};\n","import { blockSizeOnFS, sizeOnFS, blockSize } from \"./blocks\";\nexport const blocksPerPart = 80;\nexport const partSize = blocksPerPart * blockSize;\nexport const partSizeOnFS = blocksPerPart * blockSizeOnFS;\nexport const numberOfPartsOnFS = (size) => {\n    return Math.floor((sizeOnFS(size) - 1) / partSizeOnFS) + 1;\n};\n","export const extractPromise = () => {\n    let rs, rj;\n    const promise = new Promise((resole, reject) => {\n        rs = resole;\n        rj = reject;\n    });\n    return [promise, rs, rj];\n};\n","import { Mutex } from \"async-mutex\";\nimport { extractPromise } from \"./extractPromise\";\nexport class OQ {\n    constructor(concurrency = 1, tolerance = concurrency) {\n        this._e = new EventTarget();\n        // n is the serving finished index\n        this._n = -1;\n        // o is the checkout finished index\n        this._o = -1;\n        // u is the unfinished work count\n        this._u = 0;\n        // c is the current concurrency\n        this._c = 0;\n        this._isClosed = false;\n        this._queue = [];\n        this._m = new Mutex();\n        this._cl = concurrency;\n        this._ct = tolerance;\n        const [closed, resolveClosed] = extractPromise();\n        this._closed = closed;\n        this._resolveClosed = resolveClosed;\n        // console.log(this._m)\n    }\n    get concurrency() {\n        return this._c;\n    }\n    async waitForClose() {\n        return await this._closed;\n    }\n    async waitForLine(size) {\n        const [promise, resolve] = extractPromise();\n        this._e.addEventListener(\"now-serving\", () => {\n            if (this._u - 1 <= size) {\n                resolve();\n            }\n        });\n        if (this._u - 1 <= size) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForWork(n) {\n        // console.log(\"waiting for service:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"now-serving\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._n) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForWorkFinish(n) {\n        // console.log(\"waiting for service:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"work-finished\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._n) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForCommit(n) {\n        // console.log(\"waiting for finish:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"checkout\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._o) {\n            resolve();\n        }\n        return promise;\n    }\n    async add(n, wfn, cfn) {\n        if (this._isClosed) {\n            return;\n        }\n        const [workPromise, resolveReadyForWork] = extractPromise();\n        let release = await this._m.acquire();\n        const i = this._queue.findIndex(([n2]) => n < n2);\n        this._queue.splice(i == -1 ? this._queue.length : i, 0, [n, resolveReadyForWork]);\n        if (this._c < this._cl && this._queue[0][0] < this._o + 1 + this._ct) {\n            this._queue[0][1]();\n            this._queue.shift();\n        }\n        this._u++;\n        release();\n        await workPromise;\n        if (this._isClosed) {\n            return;\n        }\n        this._u--;\n        this._c++;\n        this._e.dispatchEvent(new ProgressEvent(\"now-serving\", { loaded: n }));\n        const w = wfn(n);\n        Promise.resolve(w).then(async () => {\n            this._n++;\n            this._c--;\n            this._e.dispatchEvent(new ProgressEvent(\"work-finished\", { loaded: n }));\n            const release = await this._m.acquire();\n            if (this._c < this._cl && this._queue[0]) {\n                this._queue[0][1]();\n            }\n            this._queue.shift();\n            release();\n        });\n        // wait for previous checkout\n        await this.waitForCommit(n - 1);\n        if (this._isClosed) {\n            return;\n        }\n        // console.log(\"checkout: \" + n)\n        const v = await cfn(await Promise.resolve(w), n);\n        release = await this._m.acquire();\n        this._o++;\n        this._e.dispatchEvent(new ProgressEvent(\"checkout\", { loaded: this._o }));\n        release();\n        return v;\n    }\n    close() {\n        this._isClosed = true;\n        this._resolveClosed();\n    }\n}\n","import { TransformStream } from \"web-streams-polyfill/ponyfill\";\nexport class Uint8ArrayChunkStream {\n    constructor(size, writableStrategy, readableStrategy, hooks) {\n        this._l = 0;\n        this._hooks = hooks;\n        this._size = size;\n        this._buffer = new Uint8Array(size);\n        const t = this;\n        this._transformer = new TransformStream({\n            flush(controller) {\n                var _a, _b;\n                const b = t._buffer.slice(0, t._l);\n                (_a = t === null || t === void 0 ? void 0 : t._hooks) === null || _a === void 0 ? void 0 : _a.flush(b);\n                if (t._l != 0) {\n                    (_b = t === null || t === void 0 ? void 0 : t._hooks) === null || _b === void 0 ? void 0 : _b.enqueue(b);\n                    controller.enqueue(b);\n                }\n                delete t._buffer;\n                delete t._size;\n                t._l = 0;\n            },\n            transform: t._transform.bind(t),\n        }, writableStrategy, readableStrategy);\n        this.readable = this._transformer.readable;\n        this.writable = this._transformer.writable;\n    }\n    _transform(chunk, controller) {\n        var _a, _b;\n        (_a = this === null || this === void 0 ? void 0 : this._hooks) === null || _a === void 0 ? void 0 : _a.transform(chunk);\n        let written = 0;\n        const numberOfChunks = Math.floor((this._l + chunk.length) / this._size);\n        for (let bufIndex = 0; bufIndex < numberOfChunks; bufIndex++) {\n            const sl = this._l;\n            const l = this._size - this._l;\n            for (let n = 0; n < this._size - sl; n++) {\n                this._buffer[this._l] = chunk[written + n];\n                this._l++;\n            }\n            written += l;\n            (_b = this === null || this === void 0 ? void 0 : this._hooks) === null || _b === void 0 ? void 0 : _b.enqueue(this._buffer);\n            controller.enqueue(this._buffer);\n            this._buffer = new Uint8Array(this._size);\n            this._l = 0;\n        }\n        for (let i = written; i < chunk.length; i++) {\n            this._buffer[this._l] = chunk[i];\n            this._l++;\n        }\n    }\n}\n","import { ReadableStream as ReadableStreamPolyfill } from \"web-streams-polyfill\";\nexport const polyfillReadableStream = (rs, strategy) => {\n    const reader = rs.getReader();\n    return new ReadableStreamPolyfill({\n        async pull(controller) {\n            const r = await reader.read();\n            if (r.value) {\n                // console.log(r.value)\n                controller.enqueue(r.value);\n            }\n            if (r.done) {\n                controller.close();\n            }\n        }\n    }, strategy);\n};\n","import { allSettled } from \"./utils/allSettled\";\nimport { bytesToHex } from \"./utils/hex\";\nimport { sizeOnFS, numberOfBlocks, blockSizeOnFS, numberOfBlocksOnFS } from \"./utils/blocks\";\nimport { serializeEncrypted } from \"./utils/serializeEncrypted\";\nimport { numberOfPartsOnFS, partSizeOnFS, blocksPerPart } from \"./utils/parts\";\nimport { ReadableStream, WritableStream, TransformStream } from \"web-streams-polyfill/ponyfill\";\nimport { OQ } from \"./utils/oqueue\";\nimport { Uint8ArrayChunkStream } from \"./utils/chunkStream\";\nimport { polyfillReadableStream } from \"./utils/polyfillStream\";\nimport { extractPromise } from \"./utils/extractPromise\";\nexport class Download extends EventTarget {\n    constructor({ config, handle }) {\n        super();\n        this._cancelled = false;\n        this._errored = false;\n        this._started = false;\n        this._done = false;\n        this._paused = false;\n        this._unpaused = Promise.resolve();\n        this._progress = { network: 0, decrypt: 0 };\n        this.config = config;\n        this._location = handle.slice(0, 32);\n        this._key = handle.slice(32);\n        const d = this;\n        const [finished, resolve, reject] = extractPromise();\n        this._finished = finished;\n        this._resolve = (val) => {\n            d._done = true;\n            resolve(val);\n        };\n        this._reject = (err) => {\n            d._errored = true;\n            reject(err);\n        };\n    }\n    get cancelled() { return this._cancelled; }\n    get errored() { return this._errored; }\n    get started() { return this._started; }\n    get done() { return this._done; }\n    get size() { return this._size; }\n    get sizeOnFS() { return this._sizeOnFS; }\n    get name() { var _a; return (_a = this._metadata) === null || _a === void 0 ? void 0 : _a.name; }\n    pause() {\n        const [unpaused, unpause] = extractPromise();\n        this._unpaused = unpaused;\n        this._unpause = unpause;\n    }\n    unpause() {\n        this._unpause();\n    }\n    async downloadUrl() {\n        if (this._downloadUrl) {\n            return this._downloadUrl;\n        }\n        const d = this;\n        const downloadUrlRes = await d.config.network.POST(d.config.storageNode + \"/api/v1/download\", undefined, JSON.stringify({ fileID: bytesToHex(d._location) }), async (b) => JSON.parse(new TextDecoder(\"utf8\").decode(await new Response(b).arrayBuffer())).fileDownloadUrl).catch(d._reject);\n        if (!downloadUrlRes) {\n            return;\n        }\n        const downloadUrl = downloadUrlRes.data;\n        this._downloadUrl = downloadUrl;\n        return downloadUrl;\n    }\n    async metadata() {\n        if (this._metadata) {\n            return this._metadata;\n        }\n        const d = this;\n        if (!this._downloadUrl) {\n            await this.downloadUrl();\n        }\n        const metadataRes = await d.config.network.GET(this._downloadUrl + \"/metadata\", undefined, undefined, async (b) => await serializeEncrypted(d.config.crypto, new Uint8Array(await new Response(b).arrayBuffer()), d._key)).catch(d._reject);\n        if (!metadataRes) {\n            return;\n        }\n        // TODO: migrate to new metadata system\n        const metadata = metadataRes.data;\n        d._metadata = metadata;\n        return metadata;\n    }\n    async start() {\n        if (this._cancelled || this._errored) {\n            return;\n        }\n        if (this._started) {\n            return this._output;\n        }\n        this._started = true;\n        this._startTime = Date.now();\n        // ping both servers before starting\n        const arr = await allSettled([\n            this.config.network.GET(this.config.storageNode + \"\", undefined, undefined, async (d) => new TextDecoder(\"utf8\").decode(await new Response(d).arrayBuffer())),\n        ]).catch(this._reject);\n        if (!arr) {\n            return;\n        }\n        for (const v of arr) {\n            const [res, rej] = v;\n            if (res) {\n                // if (res.data != \"pong\") {\n                // \tthis.#reject(new Error(`Server ${res.url} did not respond to ping`))\n                // \treturn\n                // }\n            }\n            if (rej) {\n                this._reject(rej);\n                return;\n            }\n        }\n        const d = this;\n        // Download started metadata\n        // ...\n        await d.downloadUrl().catch(d._reject);\n        await d.metadata().catch(d._reject);\n        const downloadUrl = this._downloadUrl;\n        const metadata = this._metadata;\n        d._size = metadata.size;\n        d._sizeOnFS = sizeOnFS(metadata.size);\n        d._numberOfBlocks = numberOfBlocks(d._size);\n        d._numberOfParts = numberOfPartsOnFS(d._sizeOnFS);\n        d.dispatchEvent(new ProgressEvent(\"start\", { loaded: numberOfBlocksOnFS(this._sizeOnFS) }));\n        const netQueue = new OQ(3);\n        const decryptQueue = new OQ(blocksPerPart);\n        d._netQueue = netQueue;\n        d._decryptQueue = decryptQueue;\n        let partIndex = 0;\n        d._output = new ReadableStream({\n            async pull(controller) {\n                if (d._cancelled || d._errored) {\n                    return;\n                }\n                if (partIndex >= d._numberOfParts) {\n                    return;\n                }\n                netQueue.add(partIndex++, async (partIndex) => {\n                    if (d._cancelled || d._errored) {\n                        return;\n                    }\n                    await d._unpaused;\n                    d.dispatchEvent(new ProgressEvent(\"part-loaded\", { loaded: partIndex }));\n                    const res = await d.config.network.GET(downloadUrl + \"/file\", { range: `bytes=${partIndex * partSizeOnFS}-${Math.min(d._sizeOnFS, (partIndex + 1) * partSizeOnFS) - 1}` }, undefined, async (rs) => polyfillReadableStream(rs)).catch(d._reject);\n                    if (!res) {\n                        return;\n                    }\n                    let l = 0;\n                    res.data\n                        .pipeThrough(new TransformStream({\n                        // log progress\n                        transform(chunk, controller) {\n                            for (let i = Math.floor(l / blockSizeOnFS); i < Math.floor((l + chunk.length) / blockSizeOnFS); i++) {\n                                d.dispatchEvent(new ProgressEvent(\"block-loaded\", { loaded: partIndex * blocksPerPart + i }));\n                            }\n                            l += chunk.length;\n                            controller.enqueue(chunk);\n                        },\n                    }))\n                        .pipeThrough(new Uint8ArrayChunkStream(partSizeOnFS))\n                        .pipeTo(new WritableStream({\n                        async write(part) {\n                            for (let i = 0; i < numberOfBlocksOnFS(part.length); i++) {\n                                decryptQueue.add(partIndex * blocksPerPart + i, async (blockIndex) => {\n                                    if (d._cancelled || d._errored) {\n                                        return;\n                                    }\n                                    let bi = blockIndex % blocksPerPart;\n                                    await d._unpaused;\n                                    const block = part.slice(bi * blockSizeOnFS, (bi + 1) * blockSizeOnFS);\n                                    const decrypted = await d.config.crypto.decrypt(d._key, block).catch(d._reject);\n                                    if (!decrypted) {\n                                        return;\n                                    }\n                                    return decrypted;\n                                }, async (decrypted, blockIndex) => {\n                                    if (!decrypted) {\n                                        return;\n                                    }\n                                    controller.enqueue(decrypted);\n                                    d.dispatchEvent(new ProgressEvent(\"download-progress\", { loaded: blockIndex, total: d._numberOfBlocks }));\n                                    d.dispatchEvent(new ProgressEvent(\"block-finished\", { loaded: blockIndex }));\n                                    d.dispatchEvent(new ProgressEvent(\"decrypt-progress\", { loaded: blockIndex, total: numberOfBlocks(d._size) - 1 }));\n                                });\n                            }\n                        }\n                    }));\n                    await decryptQueue.waitForCommit(Math.min((partIndex + 1) * blocksPerPart, d._numberOfBlocks) - 1);\n                    d.dispatchEvent(new ProgressEvent(\"part-finished\", { loaded: partIndex }));\n                }, () => {\n                });\n            },\n            async start(controller) {\n                netQueue.add(d._numberOfParts, () => { }, async () => {\n                    netQueue.close();\n                });\n                decryptQueue.add(numberOfBlocks(d._size), () => { }, async () => {\n                    decryptQueue.close();\n                });\n                Promise.all([\n                    netQueue.waitForClose(),\n                    decryptQueue.waitForClose(),\n                ]).then(() => {\n                    d._resolve();\n                    controller.close();\n                    d._finishTime = Date.now();\n                    d.dispatchEvent(new ProgressEvent(\"finish\", { total: d._finishTime - d._startTime }));\n                });\n            },\n            cancel() {\n                d._cancelled = true;\n            }\n        });\n        return d._output;\n    }\n    async finish() {\n        return this._finished;\n    }\n    async cancel() {\n        this._cancelled = true;\n        if (this._output) {\n            this._output.cancel();\n        }\n    }\n}\n","import { keccak256 } from \"js-sha3\";\nimport { bytesToHex } from \"./hex\";\nexport const getPayload = async ({ crypto, payload: rawPayload, key, payloadKey = \"requestBody\" }) => {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = new Uint8Array(keccak256.arrayBuffer(payload));\n    const signature = await crypto.sign(key, hash);\n    const pubKey = await crypto.getPublicKey(key);\n    const data = {\n        [payloadKey]: payload,\n        \"signature\": bytesToHex(signature),\n        \"publicKey\": bytesToHex(pubKey),\n        \"hash\": bytesToHex(hash)\n    };\n    return data;\n};\nexport const getPayloadFD = async ({ crypto, payload: rawPayload, extraPayload, key, payloadKey = \"requestBody\" }) => {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = new Uint8Array(keccak256.arrayBuffer(payload));\n    const signature = await crypto.sign(key, hash);\n    const pubKey = await crypto.getPublicKey(key);\n    const data = new FormData();\n    data.append(payloadKey, payload);\n    data.append(\"signature\", bytesToHex(signature));\n    data.append(\"publicKey\", bytesToHex(pubKey));\n    data.append(\"hash\", bytesToHex(hash));\n    if (extraPayload) {\n        Object.keys(extraPayload).forEach(key => {\n            data.append(key, new Blob([extraPayload[key].buffer]), key);\n        });\n    }\n    return data;\n};\n","import { extractPromise } from \"./extractPromise\";\nexport class Retry {\n    constructor(fn, { firstTimer, nextTimer, maxRetries, handler }) {\n        this._handler = () => false;\n        this._timer = 5000;\n        this._nextTimer = (last) => 2 * last;\n        this._retries = 0;\n        this._maxRetries = 2;\n        this._fn = fn;\n        this._handler = handler || this._handler;\n        this._timer = firstTimer || this._timer;\n        this._nextTimer = nextTimer || this._nextTimer;\n        this._maxRetries = maxRetries || this._maxRetries;\n    }\n    start() {\n        return this._retry();\n    }\n    async _retry() {\n        try {\n            return await this._fn();\n        }\n        catch (err) {\n            console.info(err);\n            const closed = await this._handler(err);\n            if (closed || this._retries++ > this._maxRetries) {\n                throw err;\n            }\n            else {\n                console.log(\"retry\");\n                const [promise, resolve] = extractPromise();\n                setTimeout(resolve, await this._nextTimer(this._timer));\n                await promise;\n                console.log(\"ready\");\n                return this._retry();\n            }\n        }\n    }\n}\n","import { OQ } from \"./utils/oqueue\";\nimport { allSettled } from \"./utils/allSettled\";\nimport { sizeOnFS, numberOfBlocksOnFS, numberOfBlocks, blockSize, blockSizeOnFS } from \"./utils/blocks\";\nimport { numberOfPartsOnFS, partSize } from \"./utils/parts\";\nimport { getPayloadFD, getPayload } from \"./utils/payload\";\nimport { bytesToHex } from \"./utils/hex\";\nimport { Uint8ArrayChunkStream } from \"./utils/chunkStream\";\nimport { WritableStream, TransformStream } from \"web-streams-polyfill/ponyfill\";\nimport { extractPromise } from \"./utils/extractPromise\";\nimport { Retry } from \"./utils/retry\";\nexport class Upload extends EventTarget {\n    constructor({ config, size, name, type }) {\n        super();\n        this._cancelled = false;\n        this._errored = false;\n        this._started = false;\n        this._done = false;\n        this._unpaused = Promise.resolve();\n        this._progress = { network: 0, decrypt: 0 };\n        this._metadata = {\n            name: undefined,\n            p: undefined,\n            size: undefined,\n            type: undefined\n        };\n        this._buffer = [];\n        this._dataOffset = 0;\n        this._encryped = [];\n        this._partOffset = 0;\n        this.config = config;\n        this._size = size;\n        this._sizeOnFS = sizeOnFS(this._size);\n        this._numberOfBlocks = numberOfBlocks(this._size);\n        this._numberOfParts = numberOfPartsOnFS(this._sizeOnFS);\n        this._metadata.name = name;\n        this._metadata.size = size;\n        this._metadata.type = type;\n        const u = this;\n        const [finished, resolve, reject] = extractPromise();\n        this._finished = finished;\n        this._resolve = (val) => {\n            u._done = true;\n            resolve(val);\n        };\n        this._reject = (err) => {\n            u._errored = true;\n            u.pause();\n            reject(err);\n        };\n    }\n    get cancelled() { return this._cancelled; }\n    get errored() { return this._errored; }\n    get started() { return this._started; }\n    get done() { return this._done; }\n    get size() { return this._size; }\n    get sizeOnFS() { return this._sizeOnFS; }\n    pause() {\n        const [unpaused, unpause] = extractPromise();\n        this._unpaused = unpaused;\n        this._unpause = unpause;\n    }\n    unpause() {\n        this._unpause();\n    }\n    async generateHandle() {\n        if (!this._key) {\n            // generate key\n            this._key = new Uint8Array(await crypto.subtle.exportKey(\"raw\", await crypto.subtle.generateKey({ name: \"AES-GCM\", length: 256 }, true, [\"encrypt\", \"decrypt\"])));\n        }\n        if (!this._location) {\n            this._location = crypto.getRandomValues(new Uint8Array(32));\n        }\n    }\n    async start() {\n        if (this._cancelled || this._errored) {\n            return;\n        }\n        if (this._started) {\n            return this._output;\n        }\n        this._started = true;\n        // ping both servers before starting\n        const arr = await allSettled([\n            this.config.network.GET(this.config.storageNode + \"\", undefined, undefined, async (d) => new TextDecoder(\"utf8\").decode(await new Response(d).arrayBuffer())),\n        ]).catch(this._reject);\n        if (!arr) {\n            return;\n        }\n        for (const v of arr) {\n            const [res, rej] = v;\n            if (res) {\n                // if (res.data != \"pong\") {\n                // \tthis.#reject(new Error(`Server ${res.url} did not respond to ping`))\n                // \treturn\n                // }\n            }\n            if (rej) {\n                this._reject(rej);\n                return;\n            }\n        }\n        await this.generateHandle();\n        const u = this;\n        // upload started metadata\n        // ...\n        const encryptedMeta = await u.config.crypto.encrypt(u._key, new TextEncoder().encode(JSON.stringify(u._metadata)));\n        const fd = await getPayloadFD({\n            crypto: u.config.crypto,\n            payload: {\n                fileHandle: bytesToHex(u._location),\n                fileSizeInByte: u._sizeOnFS,\n                endIndex: numberOfPartsOnFS(u._sizeOnFS),\n            },\n            extraPayload: {\n                metadata: encryptedMeta,\n            },\n        });\n        await u.config.network.POST(u.config.storageNode + \"/api/v1/init-upload\", {}, fd).catch(u._reject);\n        u.dispatchEvent(new ProgressEvent(\"start\", { loaded: numberOfBlocksOnFS(u._sizeOnFS) }));\n        const encryptQueue = new OQ(1, Number.MAX_SAFE_INTEGER);\n        const netQueue = new OQ(3);\n        u._encryptQueue = encryptQueue;\n        u._netQueue = netQueue;\n        let blockIndex = 0;\n        let partIndex = 0;\n        const partCollector = new Uint8ArrayChunkStream(partSize, new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }), new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }));\n        u._output = new TransformStream({\n            transform(chunk, controller) {\n                controller.enqueue(chunk);\n            }\n        }, new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }));\n        u._output.readable\n            .pipeThrough(partCollector)\n            .pipeTo(new WritableStream({\n            async write(part) {\n                // console.log(\"write part\")\n                u.dispatchEvent(new ProgressEvent(\"part-loaded\", { loaded: partIndex }));\n                const p = new Uint8Array(sizeOnFS(part.length));\n                netQueue.add(partIndex++, async (partIndex) => {\n                    if (u._cancelled || u._errored) {\n                        return;\n                    }\n                    for (let i = 0; i < numberOfBlocks(part.length); i++) {\n                        const block = part.slice(i * blockSize, (i + 1) * blockSize);\n                        encryptQueue.add(blockIndex++, async (blockIndex) => {\n                            if (u._cancelled || u._errored) {\n                                return;\n                            }\n                            u.dispatchEvent(new ProgressEvent(\"block-loaded\", { loaded: blockIndex }));\n                            return await u.config.crypto.encrypt(u._key, block);\n                        }, async (encrypted, blockIndex) => {\n                            // console.log(\"write encrypted\")\n                            if (!encrypted) {\n                                return;\n                            }\n                            let byteIndex = 0;\n                            for (let byte of encrypted) {\n                                p[i * blockSizeOnFS + byteIndex] = byte;\n                                byteIndex++;\n                            }\n                            u.dispatchEvent(new ProgressEvent(\"upload-progress\", { loaded: blockIndex, total: u._numberOfBlocks }));\n                            u.dispatchEvent(new ProgressEvent(\"block-finished\", { loaded: blockIndex }));\n                        });\n                    }\n                    await encryptQueue.waitForCommit(blockIndex - 1);\n                    const res = await new Retry(async () => {\n                        const fd = await getPayloadFD({\n                            crypto: u.config.crypto,\n                            payload: {\n                                fileHandle: bytesToHex(u._location),\n                                partIndex: partIndex + 1,\n                                endIndex: u._numberOfParts,\n                            },\n                            extraPayload: {\n                                chunkData: p,\n                            },\n                        });\n                        return await u.config.network.POST(u.config.storageNode + \"/api/v1/upload\", {}, fd);\n                    }, {\n                        firstTimer: 500,\n                        handler: (err) => {\n                            console.warn(err);\n                            return false;\n                        }\n                    }).start().catch(u._reject);\n                    if (!res) {\n                        return;\n                    }\n                    u.dispatchEvent(new ProgressEvent(\"part-finished\", { loaded: partIndex }));\n                    // console.log(res)\n                    // console.log(\"finished\", blockIndex)\n                    return p;\n                }, async (part, partIndex) => {\n                    if (!part) {\n                        return;\n                    }\n                });\n            },\n            async close() {\n                await encryptQueue.waitForClose();\n            },\n        }));\n        (async () => {\n            encryptQueue.add(numberOfBlocks(u._size), () => { }, async () => {\n                encryptQueue.close();\n            });\n            netQueue.add(u._numberOfParts, () => { }, async () => {\n                const data = await getPayload({\n                    crypto: u.config.crypto,\n                    payload: {\n                        fileHandle: bytesToHex(u._location),\n                    },\n                });\n                const res = await u.config.network.POST(u.config.storageNode + \"/api/v1/upload-status\", {}, JSON.stringify(data)).catch(u._reject);\n                // console.log(res)\n                netQueue.close();\n            });\n            await encryptQueue.waitForClose();\n            await netQueue.waitForClose();\n            u._resolve();\n        })();\n        return u._output;\n    }\n    async finish() {\n        return this._finished;\n    }\n    async cancel() {\n        this._cancelled = true;\n        // if (this._output) {\n        // \tthis._output.cancel()\n        // }\n    }\n}\n","export const readAllIntoUint8Array = async (s, size) => {\n    const alloc = new Uint8Array(size);\n    const reader = s.getReader();\n    let written = 0;\n    while (true) {\n        let { value, done } = await reader.read();\n        if (value) {\n            for (let i = 0; i < value.length; i++) {\n                alloc[written + i] = value[i];\n            }\n            written += value.length;\n        }\n        if (done) {\n            break;\n        }\n    }\n    return alloc;\n};\n","import { EventEmitter } from \"events\";\nimport { Download } from \"../../../../download\";\nimport { hexToBytes } from \"../../../../utils/hex\";\nimport { extractPromise } from \"../../../../utils/extractPromise\";\nimport { readAllIntoUint8Array } from \"../../../../utils/readAll\";\nconst downloadFile = (masterHandle, handle) => {\n    const ee = new EventEmitter();\n    const d = new Download({\n        config: {\n            crypto: masterHandle.crypto,\n            network: masterHandle.net,\n            storageNode: masterHandle.downloadOpts.endpoint,\n            metadataNode: masterHandle.downloadOpts.endpoint,\n        },\n        handle: hexToBytes(handle),\n    });\n    d.addEventListener(\"download-progress\", (progress) => {\n        ee.emit(\"download-progress\", { progress: progress.loaded / progress.total });\n    });\n    d._finished.catch((err) => {\n        ee.emit(\"error\", err);\n    });\n    let started = false;\n    let [buf, resolveBuf] = extractPromise();\n    const start = async () => {\n        if (started) {\n            return;\n        }\n        await d.metadata();\n        started = true;\n        const stream = await d.start();\n        console.log(stream);\n        const b = Buffer.from(await readAllIntoUint8Array(stream, d._metadata.size));\n        resolveBuf(b);\n        ee.emit(\"finish\");\n    };\n    const metadata = async () => {\n        return await d.metadata();\n    };\n    const toBuffer = async () => {\n        start();\n        return await buf;\n    };\n    const toFile = async () => {\n        start();\n        const file = new File([await buf], d._metadata.name, { type: d._metadata.type });\n        return file;\n    };\n    const stream = async () => {\n        if (started) {\n            return;\n        }\n        started = true;\n        d.addEventListener(\"finish\", () => {\n            ee.emit(\"finish\");\n        });\n        return d.start();\n    };\n    ee.metadata = metadata;\n    ee.toBuffer = toBuffer;\n    ee.toFile = toFile;\n    ee.stream = stream;\n    return ee;\n};\nexport { downloadFile };\n","import { soliditySha3 } from \"web3-utils\";\nexport const hash = (...val) => {\n    return soliditySha3(...val).replace(/^0x/, \"\");\n};\n","const hashToPath = (h, { prefix = false } = {}) => {\n    if (h.length % 4) {\n        throw new Error(\"hash length must be multiple of two bytes\");\n    }\n    return (prefix ? \"m/\" : \"\") + h.match(/.{1,4}/g).map(p => parseInt(p, 16)).join(\"'/\") + \"'\";\n};\nexport { hashToPath };\n","import { hash } from \"../../../../core/hashing\";\nimport { hashToPath } from \"../../../../utils/hashToPath\";\nconst generateSubHDKey = (masterHandle, pathString) => {\n    const path = hashToPath(hash(pathString), { prefix: true });\n    return masterHandle.derive(path);\n};\nexport { generateSubHDKey };\n","import Axios from \"axios\";\n/**\n * get a list of available plans\n *\n * @param endpoint\n *\n * @internal\n */\nexport async function getPlans(endpoint) {\n    return Axios.get(endpoint + \"/plans\");\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request the creation of an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKey\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function createAccount(endpoint, hdNode, metadataKey, duration = 12, limit = 128) {\n    const payload = {\n        metadataKey: metadataKey,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/accounts\", signedPayload);\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request creating a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function createMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/create\", signedPayload);\n}\n/**\n * request deleting a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function deleteMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/delete\", signedPayload);\n}\n/**\n * request changing a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n * @param metadata - the metadata to put\n *\n * @internal\n */\nexport async function setMetadata(endpoint, hdNode, metadataKey, metadata) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadata, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/set\", signedPayload);\n}\n/**\n * request get of a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function getMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/get\", signedPayload);\n}\n","import FormDataNode from \"form-data\";\nimport * as EthUtil from \"ethereumjs-util\";\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\n/**\n * get a signed payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param hdNode = the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayload(rawPayload, hdNode, key = \"requestBody\") {\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    const signedPayload = {\n        signature,\n        publicKey: pubKey,\n        hash: hash.toString(\"hex\")\n    };\n    signedPayload[key] = payload;\n    return signedPayload;\n}\n/**\n * get a signed formdata payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param extraPayload - additional (unsigned) payload information\n * @param hdNode - the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayloadFD(rawPayload, extraPayload, hdNode, key = \"requestBody\") {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    // node, buffers\n    if (POLYFILL_FORMDATA) {\n        const data = new FormDataNode();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        // data.append(\"hash\", hash);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                const pl = Buffer.from(extraPayload[key]);\n                data.append(key, pl, {\n                    filename: key,\n                    contentType: \"application/octet-stream\",\n                    knownLength: pl.length\n                });\n            });\n        }\n        return data;\n    }\n    else {\n        const data = new FormData();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                data.append(key, new Blob([extraPayload[key].buffer]), key);\n            });\n        }\n        return data;\n    }\n}\nexport { getPlans } from \"./requests/getPlans\";\nexport { checkPaymentStatus } from \"./requests/checkPaymentStatus\";\nexport { createAccount } from \"./requests/createAccount\";\nexport { getMetadata, setMetadata, createMetadata, deleteMetadata } from \"./requests/metadata\";\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check whether a payment has gone through for an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to check\n *\n * @internal\n */\nexport async function checkPaymentStatus(endpoint, hdNode) {\n    const payload = {\n        timestamp: Math.floor(Date.now() / 1000)\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/account-data\", signedPayload);\n}\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst getAccountInfo = async (masterHandle) => ((await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data.account);\nexport { getAccountInfo };\n","// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nconst posixSep = new RegExp(posix.sep + \"+\", \"g\");\nconst posixSepEnd = new RegExp(\"(.)\" + posix.sep + \"+$\");\n// NOTE: win32 isn't included in the polyfill\nconst win32Sep = new RegExp(\"\\\\+\", \"g\");\nconst trimTrailingSep = (path) => {\n    return path.replace(posixSepEnd, \"$1\");\n};\nconst cleanPath = (path) => {\n    return trimTrailingSep(path.replace(win32Sep, posix.sep).replace(posixSep, posix.sep));\n};\nexport { cleanPath };\n","import { generateSubHDKey } from \"./generateSubHDKey\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderHDKey = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return generateSubHDKey(masterHandle, \"folder: \" + dir);\n};\nexport { getFolderHDKey };\n","import { hash } from \"../../../../core/hashing\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderLocation = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return hash(masterHandle.getFolderHDKey(dir).publicKey.toString(\"hex\"));\n};\nexport { getFolderLocation };\n","export const FILENAME_MAX_LENGTH = 256;\nexport const CURRENT_VERSION = 1;\nexport const IV_BYTE_LENGTH = 16;\nexport const TAG_BYTE_LENGTH = 16;\nexport const TAG_BIT_LENGTH = TAG_BYTE_LENGTH * 8;\nexport const DEFAULT_BLOCK_SIZE = 64 * 1024;\nexport const BLOCK_OVERHEAD = TAG_BYTE_LENGTH + IV_BYTE_LENGTH;\nexport const DEFAULT_PART_SIZE = 128 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD);\n","import { cipher as ForgeCipher, md as ForgeMd, util as ForgeUtil, random as ForgeRandom } from \"node-forge\";\nimport { IV_BYTE_LENGTH, TAG_BYTE_LENGTH, TAG_BIT_LENGTH, BLOCK_OVERHEAD } from \"./constants\";\nconst Forge = { cipher: ForgeCipher, md: ForgeMd, util: ForgeUtil, random: ForgeRandom };\nconst ByteBuffer = Forge.util.ByteBuffer;\n// Encryption\nexport function encrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    const iv = Forge.random.getBytesSync(IV_BYTE_LENGTH);\n    const cipher = Forge.cipher.createCipher(\"AES-GCM\", keyBuf);\n    cipher.start({\n        iv,\n        tagLength: TAG_BIT_LENGTH\n    });\n    cipher.update(byteBuffer);\n    cipher.finish();\n    byteBuffer.clear();\n    byteBuffer.putBuffer(cipher.output);\n    byteBuffer.putBuffer(cipher.mode.tag);\n    byteBuffer.putBytes(iv);\n    return byteBuffer;\n}\nexport function encryptString(key, string, encoding = \"utf8\") {\n    const buf = Forge.util.createBuffer(string, encoding);\n    return encrypt(key, buf);\n}\nexport function encryptBytes(key, bytes) {\n    return encrypt(key, Forge.util.createBuffer(bytes));\n}\n// Decryption\nexport function decrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    keyBuf.read = 0;\n    byteBuffer.read = byteBuffer.length() - BLOCK_OVERHEAD;\n    const tag = byteBuffer.getBytes(TAG_BYTE_LENGTH);\n    const iv = byteBuffer.getBytes(IV_BYTE_LENGTH);\n    const decipher = Forge.cipher.createDecipher(\"AES-GCM\", keyBuf);\n    byteBuffer.read = 0;\n    byteBuffer.truncate(BLOCK_OVERHEAD);\n    decipher.start({\n        iv,\n        // the type definitions are wrong in @types/node-forge\n        tag: tag,\n        tagLength: TAG_BIT_LENGTH\n    });\n    decipher.update(byteBuffer);\n    if (decipher.finish()) {\n        return decipher.output;\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptBytes(key, bytes) {\n    const buf = new ByteBuffer(bytes);\n    const output = decrypt(key, buf);\n    if (output) {\n        return Forge.util.binary.raw.decode(output.getBytes());\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptString(key, byteBuffer, encoding = \"utf8\") {\n    const output = decrypt(key, byteBuffer);\n    if (output) {\n        return Buffer.from(output.toString()).toString(encoding);\n    }\n    else {\n        throw new Error(\"unable to decrypt\");\n    }\n}\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        // TODO\n        // I have no idea why but the decrypted is correct hex without converting\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"hex\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return meta;\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","const getHandle = (masterHandle) => {\n    return masterHandle.privateKey.toString(\"hex\") + masterHandle.chainCode.toString(\"hex\");\n};\nexport { getHandle };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isPaid = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"paid\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isPaid };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nimport { createAccount } from \"../../../../core/requests/createAccount\";\nconst register = async (masterHandle, duration, limit) => {\n    if (await masterHandle.isPaid()) {\n        return {\n            data: { invoice: { cost: 0, ethAddress: \"0x0\" } },\n            waitForPayment: async () => ({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data })\n        };\n    }\n    const createAccountResponse = await createAccount(masterHandle.uploadOpts.endpoint, masterHandle, masterHandle.getFolderLocation(\"/\"), duration, limit);\n    return {\n        data: createAccountResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                if (await masterHandle.isPaid() && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { register };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getFolderMeta } from \"../v0/getFolderMeta\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isPaid, register };\n/**\n * internal API v0\n *\n * @internal\n */\nconst v0 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getFolderMeta,\n    getHandle,\n    isPaid,\n    register\n};\nexport default v0;\n","/**\n * metadata to describe a version of a file as it relates to a filesystem\n *\n * @public\n */\nclass FileVersion {\n    /**\n     * create metadata for a file version\n     *\n     * @param handle - the file handle\n     * @param size - the size of the file in bytes\n     * @param created - the date this version was uploaded\n     * @param modified - the date the filesystem marked as last modified\n     */\n    constructor({ handle, size, created = Date.now(), modified = Date.now() }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileVersion([\n            this.handle,\n            this.size,\n            this.created,\n            this.modified\n        ]);\n        this.handle = handle;\n        this.size = size;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileVersion extends Array {\n    constructor([handle, size, created, modified]) {\n        super(4);\n        this.unminify = () => new FileVersion({\n            handle: this[0],\n            size: this[1],\n            created: this[2],\n            modified: this[3]\n        });\n        this[0] = handle;\n        this[1] = size;\n        this[2] = created;\n        this[3] = modified;\n    }\n}\nexport { FileVersion, MinifiedFileVersion };\n","import { FileVersion, MinifiedFileVersion } from \"./file-version\";\n/**\n * metadata to describe a file as it relates to the UI\n *\n * @public\n */\nclass FileEntryMeta {\n    /**\n     * create metadata for a file entry in the UI\n     *\n     * @param name - the name of the file as shown in the UI\n     * @param created - the date in `ms` that this file was initially uploaded\n     * @param created - the date in `ms` that the newest version of this file was uploaded\n     * @param versions - versions of the uploaded file (the most recent of which should be the current version of the file)\n     */\n    constructor({ name, created = Date.now(), modified = Date.now(), versions = [] }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileEntryMeta([\n            this.name,\n            this.created,\n            this.modified,\n            this.versions.map(version => new FileVersion(version).minify())\n        ]);\n        this.name = name;\n        this.created = created;\n        this.modified = modified;\n        this.versions = versions;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileEntryMeta extends Array {\n    constructor([name, created, modified, versions]) {\n        super(4);\n        this.unminify = () => new FileEntryMeta({\n            name: this[0],\n            created: this[1],\n            modified: this[2],\n            versions: this[3].map(version => new MinifiedFileVersion(version).unminify())\n        });\n        this[0] = name;\n        this[1] = created;\n        this[2] = modified;\n        this[3] = versions;\n    }\n}\nexport { FileEntryMeta, MinifiedFileEntryMeta };\n","/**\n * metadata to describe where a folder can be found (for root metadata of an account)\n *\n * @public\n */\nclass FolderEntryMeta {\n    /**\n     * create metadata entry for a folder\n     *\n     * @param name - a name of the folder shown in the UI\n     * @param location - the public key for the metadata file\n     *   it is how the file will be queried for (using the same system as for the account metadata)\n     */\n    constructor({ name, location }) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderEntryMeta([\n            this.name,\n            this.location\n        ]);\n        this.name = name;\n        this.location = location;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderEntryMeta extends Array {\n    constructor([name, location]) {\n        super(2);\n        this.unminify = () => new FolderEntryMeta({\n            name: this[0],\n            location: this[1]\n        });\n        this[0] = name;\n        this[1] = location;\n    }\n}\nexport { FolderEntryMeta, MinifiedFolderEntryMeta };\n","import { FileEntryMeta, MinifiedFileEntryMeta } from \"./file-entry\";\nimport { FolderEntryMeta, MinifiedFolderEntryMeta } from \"./folder-entry\";\n/**\n * metadata to describe a folder for the UI\n *\n * @public\n */\nclass FolderMeta {\n    /**\n     * create metadata for a folder\n     *\n     * @param name - a nickname shown on the folder when accessed without adding to account metadata\n     * @param files - the files included only in the most shallow part of the folder\n     * @param created - when the folder was created (if not created now) in `ms`\n     * @param created - when the folder was changed (if not modified now) in `ms`\n     */\n    constructor({ name = \"Folder\", files = [], folders = [], created = Date.now(), modified = Date.now() } = {}) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderMeta([\n            this.name,\n            this.files.map(file => new FileEntryMeta(file).minify()),\n            this.folders.map(folder => new FolderEntryMeta(folder).minify()),\n            this.created,\n            this.modified\n        ]);\n        this.name = name;\n        this.files = files;\n        this.folders = folders;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderMeta extends Array {\n    constructor([name, files, folders, created, modified]) {\n        super(5);\n        this.unminify = () => new FolderMeta({\n            name: this[0],\n            files: this[1].map(file => new MinifiedFileEntryMeta(file).unminify()),\n            folders: this[2].map(folder => new MinifiedFolderEntryMeta(folder).unminify()),\n            created: this[3],\n            modified: this[4]\n        });\n        this[0] = name;\n        this[1] = files;\n        this[2] = folders;\n        this[3] = created;\n        this[4] = modified;\n    }\n}\nexport { FolderMeta, MinifiedFolderMeta };\n","import { EventEmitter } from \"events\";\nimport debounce from \"debounce\";\nclass NetQueue extends EventEmitter {\n    constructor({ fetch, update, data = {}, timeout = 1000 }) {\n        super();\n        this.updating = false;\n        this.queue = [];\n        this.types = {};\n        this.data = {};\n        this._timeout = 1000;\n        this.push = ({ type, payload }) => {\n            this.queue.push({ type, payload });\n            this._process();\n        };\n        this.addType = ({ type, handler }) => {\n            this.types[type] = handler;\n        };\n        this._process = debounce(async () => {\n            if (this.updating)\n                return;\n            this.updating = true;\n            const queueCopy = Object.assign([], this.queue);\n            this.result = await Promise.resolve(this._fetch());\n            for (let { type, payload } of queueCopy) {\n                if (this.types[type])\n                    this.result = await Promise.resolve(this.types[type](this.result, payload));\n                else\n                    throw new Error(\"unknown type: \" + type);\n                this.queue.shift();\n            }\n            await Promise.resolve(this._update(this.result));\n            this.updating = false;\n            this.emit(\"update\", this.result);\n            if (this.queue.length)\n                this._process();\n        }, this._timeout);\n        this._fetch = fetch;\n        this._update = update;\n        this.data = data;\n        this._timeout = timeout;\n    }\n}\nexport { NetQueue };\n","import { hash } from \"../../../hashing\";\nimport { encryptString } from \"../../../encryption\";\nimport { setMetadata } from \"../../../requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst setFolderMeta = async (masterHandle, dir, folderMeta) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), key = hash(folderKey.privateKey.toString(\"hex\")), metaString = JSON.stringify(folderMeta.minify()), encryptedMeta = Buffer.from(encryptString(key, metaString, \"utf8\").toHex(), \"hex\").toString(\"base64\");\n    // TODO: verify folder can only be changed by the creating account\n    await setMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir), encryptedMeta);\n};\nexport { setFolderMeta };\n","const removeFile = async (metaQueue, meta, file) => {\n    // precondition for if file is no longer in the metadata\n    if (!meta.files.find(f => file === f || file.name === f.name))\n        return meta;\n    meta.files = meta.files.filter(f => file !== f && file.name !== f.name);\n    return meta;\n};\nexport { removeFile };\n","const removeVersion = async (metaQueue, meta, version) => {\n    const file = meta.files.find(f => f.versions.includes(version) || !!f.versions.find(v => version.handle === v.handle));\n    // precondition for if version no longer exists in meta\n    if (!file)\n        return meta;\n    file.versions = file.versions.filter(v => version !== v && version.handle !== v.handle);\n    if (file.versions.length === 0)\n        metaQueue.push({\n            type: \"remove-file\",\n            payload: file\n        });\n    return meta;\n};\nexport { removeVersion };\n","const addFile = (metaQueue, meta, file) => {\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    if (existingFile) {\n        existingFile.modified = file.modified;\n        existingFile.versions = [...existingFile.versions, ...file.versions];\n    }\n    else {\n        meta.files.push(file);\n    }\n    return meta;\n};\nexport { addFile };\n","const addFolder = (metaQueue, meta, folder) => {\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    if (!existingFolder)\n        meta.folders.push(folder);\n    return meta;\n};\nexport { addFolder };\n","const removeFolder = async (metaQueue, meta, folder) => {\n    // precondition for if folder is no longer in the metadata\n    if (!meta.folders.find(f => folder === f || folder.name === f.name))\n        return meta;\n    meta.folders = meta.folders.filter(f => folder !== f && folder.name !== f.name);\n    return meta;\n};\nexport { removeFolder };\n","import { NetQueue } from \"../../../../utils/netQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { removeFile } from \"./meta/removeFile\";\nimport { removeVersion } from \"./meta/removeVersion\";\nimport { addFile } from \"./meta/addFile\";\nimport { addFolder } from \"./meta/addFolder\";\nimport { removeFolder } from \"./meta/removeFolder\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createMetaQueue = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    if (masterHandle.metaQueue[dir])\n        return;\n    const metaQueue = new NetQueue({\n        fetch: async () => {\n            return getFolderMeta(masterHandle, dir);\n        },\n        update: async (meta) => {\n            await setFolderMeta(masterHandle, dir, meta);\n        }\n    });\n    const types = [\n        { type: \"add-folder\", action: addFolder },\n        { type: \"add-file\", action: addFile },\n        { type: \"remove-folder\", action: removeFolder },\n        { type: \"remove-file\", action: removeFile },\n        { type: \"remove-version\", action: removeVersion }\n    ];\n    for (let type of types) {\n        metaQueue.addType({\n            type: type.type,\n            handler: async (meta, payload) => {\n                return await type.action(metaQueue, meta, payload);\n            }\n        });\n    }\n    masterHandle.metaQueue[dir] = metaQueue;\n};\nexport { createMetaQueue };\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { MinifiedFolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    createMetaQueue(masterHandle, dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"base64\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return new MinifiedFolderMeta(meta).unminify();\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst buildFullTree = async (masterHandle, dir = \"/\") => {\n    dir = cleanPath(dir);\n    const tree = {};\n    tree[dir] = await getFolderMeta(masterHandle, dir);\n    await Promise.all(tree[dir].folders.map(async (folder) => {\n        Object.assign(tree, await buildFullTree(masterHandle, posix.join(dir, folder.name)));\n    }));\n    return tree;\n};\nexport { buildFullTree };\n","import { FolderEntryMeta } from \"../../../../core/account/folder-entry\";\nimport { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\n// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderFn = async (masterHandle, dir, name) => {\n    const fullDir = posix.join(dir, name);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    // recurively create containing folders first\n    if (!await masterHandle.getFolderMeta(dir).catch(console.warn))\n        await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n    if (await masterHandle.getFolderMeta(fullDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    // initialize as empty folder\n    await masterHandle.createFolderMeta(fullDir).catch(console.warn);\n    await masterHandle.setFolderMeta(fullDir, new FolderMeta({ name }));\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: masterHandle.getFolderLocation(fullDir)\n        })\n    });\n};\nconst createFolder = async (masterHandle, dir, name) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, name);\n    if (masterHandle.metaFolderCreating[fullDir]) {\n        // TODO: this is hacky\n        await new Promise(resolve => {\n            const interval = setInterval(() => {\n                if (!masterHandle.metaFolderCreating[fullDir]) {\n                    resolve();\n                    clearInterval(interval);\n                }\n            }, 250);\n        });\n        return;\n    }\n    masterHandle.metaFolderCreating[fullDir] = true;\n    await createFolderFn(masterHandle, dir, name);\n    masterHandle.metaFolderCreating[fullDir] = false;\n};\nexport { createFolder };\n","import { createMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    try {\n        // TODO: verify folder can only be changed by the creating account\n        await createMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n        // masterHandle.getFolderHDKey(dir),\n        masterHandle.getFolderLocation(dir));\n    }\n    catch (err) {\n        console.error(`Can't create folder metadata for folder ${dir}`);\n        throw err;\n    }\n};\nexport { createFolderMeta };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n// Metadata as hexstring as of right now\nexport async function deleteFile(endpoint, hdNode, fileID) {\n    const payload = { fileID };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/delete\", signedPayload);\n}\n","import { deleteFile as requestDeleteFile } from \"../../../../core/requests/deleteFile\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteVersion = async (masterHandle, dir, version) => {\n    dir = cleanPath(dir);\n    await requestDeleteFile(masterHandle.uploadOpts.endpoint, masterHandle, \n    // only send the location, not the private key\n    version.handle.slice(0, 64)).catch(err => {\n        console.warn(\"version does not exist\");\n        console.warn(err);\n    });\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-version\",\n        payload: version\n    });\n};\nexport { deleteVersion };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFile = async (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir);\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // precondition for if file is no longer in the metadata\n    if (!existingFile)\n        return;\n    for (let version of existingFile.versions) {\n        await deleteVersion(masterHandle, dir, version);\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n};\nexport { deleteFile };\n","import { createMetaQueue } from \"./createMetaQueue\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolder = async (masterHandle, dir, folder) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, folder.name);\n    if (folder.name.indexOf(\"/\") > 0 || folder.name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const meta = await masterHandle.getFolderMeta(fullDir).catch(console.warn);\n    if (meta) {\n        await Promise.all([\n            (async () => {\n                try {\n                    for (let folder of meta.folders) {\n                        await masterHandle.deleteFolder(fullDir, folder);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete sub folders\");\n                    throw err;\n                }\n            })(),\n            (async () => {\n                try {\n                    for (let file of meta.files) {\n                        await masterHandle.deleteFile(fullDir, file);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete file\");\n                    throw err;\n                }\n            })()\n        ]);\n    }\n    try {\n        await masterHandle.deleteFolderMeta(fullDir);\n    }\n    catch (err) {\n        console.error(\"Failed to delete meta entry\");\n        throw err;\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: folder\n    });\n};\nexport { deleteFolder };\n","import { deleteMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    // TODO: verify folder can only be changed by the creating account\n    await deleteMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir));\n};\nexport { deleteFolderMeta };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isExpired = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"expired\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isExpired };\n","import { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { getFolderMeta, isPaid } from \"../v0/index\";\nconst login = async (masterHandle) => {\n    // only attempt changes if account is paid\n    if (!await isPaid(masterHandle)) {\n        return;\n    }\n    // try newer meta\n    try {\n        await masterHandle.getFolderMeta(\"/\");\n    }\n    catch (err) {\n        // try older meta\n        try {\n            const meta = await getFolderMeta(masterHandle, \"/\");\n            await masterHandle.deleteFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            console.info(\"--- META ---\", meta);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta(meta));\n        }\n        catch (err) {\n            // no meta exists\n            // set meta to an empty meta\n            console.warn(err);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta());\n        }\n    }\n};\nexport { login };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFile = async (masterHandle, dir, { file, to }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-file\",\n        payload: existingFile\n    });\n};\nexport { moveFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFolder = async (masterHandle, dir, { folder, to }) => {\n    dir = cleanPath(dir);\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(to, folder.name);\n    const folderMeta = await getFolderMeta(masterHandle, oldDir).catch(console.warn), outerMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!outerMeta)\n        throw new Error(\"Outer folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = outerMeta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"File no longer exists\");\n    await createFolderMeta(masterHandle, newDir).catch(console.warn);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-folder\",\n        payload: existingFolder\n    });\n};\nexport { moveFolder };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFile = async (masterHandle, dir, { file, name }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-file\",\n        payload: new FileEntryMeta({\n            ...existingFile,\n            name\n        })\n    });\n};\nexport { renameFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { getFolderLocation } from \"./index\";\nimport { FolderEntryMeta } from \"../../folder-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFolder = async (masterHandle, dir, { folder, name }) => {\n    dir = cleanPath(dir);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(dir, name);\n    const folderMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!meta)\n        throw new Error(\"Outer folder does not exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"Folder no longer exists\");\n    await createFolder(masterHandle, dir, name);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: getFolderLocation(masterHandle, newDir)\n        })\n    });\n};\nexport { renameFolder };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to renew\n * @param fileHandles - all file handles from the account to renew\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew\", signedPayload);\n}\n/**\n * request an invoice for renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountInvoice(endpoint, hdNode, duration = 12) {\n    const payload = {\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew/invoice\", signedPayload);\n}\n","import { renewAccountStatus, renewAccountInvoice } from \"../../../requests/renewAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst renewAccount = async (masterHandle, duration) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const renewAccountInvoiceResponse = await renewAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration);\n    console.log(renewAccountInvoiceResponse);\n    const renewAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration\n    ];\n    return {\n        data: renewAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const renewAccountStatusResponse = await renewAccountStatus(...renewAccountStatusOpts);\n                console.log(renewAccountStatusResponse);\n                if (renewAccountStatusResponse.data.status\n                    && renewAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: renewAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { renewAccount };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to upgrade\n * @param fileHandles - all file handles from the account to upgrade\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12, limit = 128) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade\", signedPayload);\n}\n/**\n * request an invoice for upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountInvoice(endpoint, hdNode, duration = 12, limit = 128) {\n    const payload = {\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade/invoice\", signedPayload);\n}\n","import { upgradeAccountStatus, upgradeAccountInvoice } from \"../../../requests/upgradeAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst upgradeAccount = async (masterHandle, duration, limit) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const upgradeAccountInvoiceResponse = await upgradeAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration, limit);\n    console.log(upgradeAccountInvoiceResponse);\n    const upgradeAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration,\n        limit\n    ];\n    return {\n        data: upgradeAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const upgradeAccountStatusResponse = await upgradeAccountStatus(...upgradeAccountStatusOpts);\n                console.log(upgradeAccountStatusResponse);\n                if (upgradeAccountStatusResponse.data.status\n                    && upgradeAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: upgradeAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { upgradeAccount };\n","import { EventEmitter } from \"events\";\nimport { Upload } from \"../../../../upload\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { FileVersion } from \"../../file-version\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nimport { bytesToHex } from \"../../../../utils/hex\";\nimport { polyfillReadableStream } from \"../../../../utils/polyfillStream\";\nconst uploadFile = async (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const upload = new Upload({\n        config: {\n            crypto: masterHandle.crypto,\n            network: masterHandle.net,\n            storageNode: masterHandle.uploadOpts.endpoint,\n            metadataNode: masterHandle.uploadOpts.endpoint,\n        },\n        name: file.name,\n        size: file.size,\n        type: file.type,\n    }), ee = new EventEmitter();\n    await upload.generateHandle();\n    const handle = bytesToHex(new Uint8Array([...upload._location, ...upload._key]));\n    ee.handle = handle;\n    upload.addEventListener(\"upload-progress\", (progress) => {\n        ee.emit(\"upload-progress\", { progress: progress.loaded / progress.total });\n    });\n    upload.addEventListener(\"error\", err => {\n        ee.emit(\"error\", err);\n    });\n    upload.finish().then(async () => {\n        if (!await getFolderMeta(masterHandle, dir).catch(console.warn))\n            await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n        createMetaQueue(masterHandle, dir);\n        masterHandle.metaQueue[dir].push({\n            type: \"add-file\",\n            payload: new FileEntryMeta({\n                name: file.name,\n                modified: file.lastModified,\n                versions: [\n                    new FileVersion({\n                        handle,\n                        size: file.size,\n                        modified: file.lastModified\n                    })\n                ]\n            })\n        });\n        masterHandle.metaQueue[dir].once(\"update\", meta => {\n            ee.emit(\"finish\", { handle });\n        });\n    });\n    const stream = await upload.start();\n    polyfillReadableStream(file.stream()).pipeThrough(stream);\n    return ee;\n};\nexport { uploadFile };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { createFolder } from \"./createFolder\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { deleteFile } from \"./deleteFile\";\nimport { deleteFolder } from \"./deleteFolder\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { isExpired } from \"./isExpired\";\nimport { login } from \"./login\";\nimport { moveFile } from \"./moveFile\";\nimport { moveFolder } from \"./moveFolder\";\nimport { renameFile } from \"./renameFile\";\nimport { renameFolder } from \"./renameFolder\";\nimport { renewAccount } from \"./renewAccount\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { upgradeAccount } from \"./upgradeAccount\";\nimport { uploadFile } from \"./uploadFile\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getHandle, isPaid, register, buildFullTree, createFolder, createFolderMeta, createMetaQueue, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, getFolderMeta, isExpired, login, moveFile, moveFolder, renameFile, renameFolder, renewAccount, setFolderMeta, upgradeAccount, uploadFile };\n/**\n * internal API v1\n *\n * @internal\n */\nconst v1 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getHandle,\n    isPaid,\n    register,\n    buildFullTree,\n    createFolder,\n    createFolderMeta,\n    createMetaQueue,\n    deleteFile,\n    deleteFolder,\n    deleteFolderMeta,\n    deleteVersion,\n    getFolderMeta,\n    isExpired,\n    login,\n    moveFile,\n    moveFolder,\n    renameFile,\n    renameFolder,\n    renewAccount,\n    setFolderMeta,\n    upgradeAccount,\n    uploadFile\n};\nexport default v1;\n","import HDKey from \"hdkey\";\nexport class WebAccountMiddleware {\n    constructor({ symmetricKey, asymmetricKey } = {}) {\n        this.asymmetricKey = asymmetricKey;\n        this.symmetricKey = symmetricKey;\n    }\n    async getPublicKey(k = this.asymmetricKey) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        return hd.publicKey;\n    }\n    async derive(k = this.asymmetricKey, p) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        const derived = hd.derive(p);\n        const k2 = Buffer.concat([derived.privateKey, derived.chainCode]);\n        hd.wipePrivateData();\n        return k2;\n    }\n    async sign(k = this.asymmetricKey, d) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        const sig = hd.sign(new Buffer(d));\n        hd.wipePrivateData();\n        return sig;\n    }\n    async encrypt(k = this.symmetricKey, d) {\n        const key = await crypto.subtle.importKey(\"raw\", k, \"AES-GCM\", false, [\"encrypt\"]);\n        const iv = crypto.getRandomValues(new Uint8Array(16));\n        const encrypted = new Uint8Array(await crypto.subtle.encrypt({ name: \"AES-GCM\", iv, tagLength: 128 }, key, d));\n        return new Uint8Array([...encrypted, ...iv]);\n    }\n    async decrypt(k = this.symmetricKey, ct) {\n        const key = await crypto.subtle.importKey(\"raw\", k, \"AES-GCM\", false, [\"decrypt\"]);\n        return new Uint8Array(await crypto.subtle.decrypt({ name: \"AES-GCM\", iv: ct.slice(-16) }, key, ct.slice(0, -16)));\n    }\n}\n","const fetchAdapter = async (method, address, headers, body, mapReturn = async (b) => await new Response(b).arrayBuffer()) => {\n    const res = await fetch(address, { method, body, headers });\n    return {\n        headers: res.headers,\n        data: await mapReturn(res.body),\n        ok: res.ok,\n        redirected: res.redirected,\n        status: res.status,\n        statusText: res.statusText,\n        url: address,\n    };\n};\nexport class WebNetworkMiddleware {\n    async GET(address, headers, body, mapReturn) {\n        return await fetchAdapter(\"GET\", address, headers, body, mapReturn);\n    }\n    async POST(address, headers, body, mapReturn) {\n        return await fetchAdapter(\"POST\", address, headers, body, mapReturn);\n    }\n}\n","import { generateMnemonic, mnemonicToSeedSync, validateMnemonic, } from \"bip39\";\nimport HDKey, { fromMasterSeed } from \"hdkey\";\nimport * as namehash from \"eth-ens-namehash\";\nimport { hashToPath } from \"./utils/hashToPath\";\nimport { buildFullTree, createFolder, createFolderMeta, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isExpired, isPaid, login, moveFile, moveFolder, register, renameFile, renameFolder, renewAccount, setFolderMeta, uploadFile, upgradeAccount } from \"./core/account/api/v1/index\";\nimport { WebAccountMiddleware } from \"./core/web/webAccountMiddleware\";\nimport { WebNetworkMiddleware } from \"./core/web/webNetworkMiddleware\";\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for representing the account mnemonic\n *\n * @public\n */\nclass Account {\n    /**\n     * creates an account from a mnemonic if provided, otherwise from entropy\n     *\n     * @param mnemonic - the mnemonic to use for the account\n     */\n    constructor(mnemonic = generateMnemonic()) {\n        if (!validateMnemonic(mnemonic)) {\n            throw new Error(\"mnemonic provided was not valid\");\n        }\n        this._mnemonic = mnemonic;\n    }\n    get mnemonic() {\n        return this._mnemonic.trim().split(/\\s+/g);\n    }\n    get seed() {\n        return mnemonicToSeedSync(this._mnemonic);\n    }\n}\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for creating a master handle from an account mnemonic\n *\n * @remarks\n *\n * a master handle is responsible for:\n *  <br /> - logging in to an account\n *  <br /> - signing changes for the account\n *  <br /> - deterministic entropy for generating features of an account (such as folder keys)\n *\n * @public\n */\nclass MasterHandle extends HDKey {\n    /**\n     * creates a master handle from an account\n     *\n     * @param _ - the account to generate the handle from\n     * @param _.account - an {@link Account}\n     * @param _.handle - an account handle as a string\n     */\n    constructor({ account, handle, }, { uploadOpts = {}, downloadOpts = {} } = {}) {\n        super();\n        this.metaQueue = {};\n        this.metaFolderCreating = {};\n        /**\n         * creates a sub key seed for validating\n         *\n         * @param path - the string to use as a sub path\n         */\n        this.generateSubHDKey = (pathString) => generateSubHDKey(this, pathString);\n        this.uploadFile = (dir, file) => uploadFile(this, dir, file);\n        this.downloadFile = (handle) => downloadFile(this, handle);\n        /**\n         * deletes every version of a file and removes it from the metadata\n         *\n         * @param dir - the containing folder\n         * @param file - file entry to delete (loosely matched name)\n         */\n        this.deleteFile = (dir, file) => deleteFile(this, dir, file);\n        /**\n         * deletes a single version of a file (ie. delete by handle)\n         *\n         * @param dir - the containing folder\n         * @param version - version to delete (loosely matched by handle)\n         */\n        this.deleteVersion = (dir, version) => deleteVersion(this, dir, version);\n        /**\n         * creates a dir key seed for validating and folder navigation\n         *\n         * @param dir - the folder\n         */\n        this.getFolderHDKey = (dir) => getFolderHDKey(this, dir);\n        /**\n         * get the location (ie. metadata id) of a folder\n         *\n         * @remarks this is a deterministic location derived from the account's hdkey to allow for random folder access\n         *\n         * @param dir - the folder to locate\n         */\n        this.getFolderLocation = (dir) => getFolderLocation(this, dir);\n        /**\n         * request the creation of a folder metadata\n         *\n         * @param dir - the folder to create\n         */\n        this.createFolderMeta = async (dir) => createFolderMeta(this, dir);\n        /**\n         * create folder {name} inside of {dir}\n         *\n         * @param dir - the containing folder\n         * @param name - the name of the new folder\n         */\n        this.createFolder = async (dir, name) => createFolder(this, dir, name);\n        this.deleteFolderMeta = async (dir) => deleteFolderMeta(this, dir);\n        this.deleteFolder = async (dir, folder) => deleteFolder(this, dir, folder);\n        this.moveFile = async (dir, { file, to }) => moveFile(this, dir, { file, to });\n        this.moveFolder = async (dir, { folder, to }) => moveFolder(this, dir, { folder, to });\n        this.renameFile = async (dir, { file, name }) => renameFile(this, dir, { file, name });\n        this.renameFolder = async (dir, { folder, name }) => renameFolder(this, dir, { folder, name });\n        this.setFolderMeta = async (dir, folderMeta) => setFolderMeta(this, dir, folderMeta);\n        this.getFolderMeta = async (dir) => getFolderMeta(this, dir);\n        /**\n         * recursively build full file tree starting from directory {dir}\n         *\n         * @param dir - the starting directory\n         */\n        this.buildFullTree = async (dir) => buildFullTree(this, dir);\n        this.getAccountInfo = async () => getAccountInfo(this);\n        this.isExpired = async () => isExpired(this);\n        this.isPaid = async () => isPaid(this);\n        this.login = async () => login(this);\n        this.register = async (duration, limit) => register(this, duration, limit);\n        this.upgrade = async (duration, limit) => upgradeAccount(this, duration, limit);\n        this.renew = async (duration) => renewAccount(this, duration);\n        this.uploadOpts = uploadOpts;\n        this.downloadOpts = downloadOpts;\n        if (account && account.constructor == Account) {\n            const path = \"m/43'/60'/1775'/0'/\" + hashToPath(namehash.hash(\"opacity.io\").replace(/^0x/, \"\"));\n            // ethereum/EIPs#1775\n            Object.assign(this, fromMasterSeed(account.seed).derive(path));\n        }\n        else if (handle && handle.constructor == String) {\n            this.privateKey = Buffer.from(handle.slice(0, 64), \"hex\");\n            this.chainCode = Buffer.from(handle.slice(64), \"hex\");\n        }\n        else {\n            throw new Error(\"master handle was not of expected type\");\n        }\n        this.crypto = new WebAccountMiddleware({ asymmetricKey: new Uint8Array([...this.privateKey, ...this.chainCode]) });\n        this.net = new WebNetworkMiddleware();\n    }\n    /**\n     * get the account handle\n     */\n    get handle() {\n        return getHandle(this);\n    }\n}\nexport { Account, MasterHandle, HDKey };\n"],"names":["ReadableStreamPolyfill","ReadableStream","getPayload","EthUtil.keccak256","getPayloadFD","ForgeCipher","ForgeMd","ForgeUtil","ForgeRandom","getFolderMeta","requestDeleteFile","deleteFile","namehash.hash"],"mappings":"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"}