{"version":3,"file":"index.js","sources":["../dist-src/streams/fileSourceStream.js","../dist-src/streams/bufferSourceStream.js","../dist-src/core/constants.js","../dist-src/core/helpers.js","../dist-src/core/encryption.js","../dist-src/core/metadata.js","../dist-src/streams/decryptStream.js","../dist-src/streams/downloadStream.js","../dist-src/download.js","../dist-src/streams/encryptStream.js","../dist-src/core/requests/getPlans.js","../dist-src/core/requests/checkPaymentStatus.js","../dist-src/core/requests/createAccount.js","../dist-src/core/requests/metadata.js","../dist-src/core/request.js","../dist-src/streams/uploadStream.js","../dist-src/upload.js","../dist-src/core/account/api/v0/downloadFile.js","../dist-src/core/hashing.js","../dist-src/utils/hashToPath.js","../dist-src/core/account/api/v0/generateSubHDKey.js","../dist-src/core/account/api/v0/getAccountInfo.js","../dist-src/utils/cleanPath.js","../dist-src/core/account/api/v0/getFolderHDKey.js","../dist-src/core/account/api/v0/getFolderLocation.js","../dist-src/core/account/api/v0/getFolderMeta.js","../dist-src/core/account/api/v0/getHandle.js","../dist-src/core/account/api/v0/isPaid.js","../dist-src/core/account/api/v0/register.js","../dist-src/core/account/api/v0/index.js","../dist-src/core/account/folder-entry.js","../dist-src/core/account/file-version.js","../dist-src/core/account/file-entry.js","../dist-src/core/account/folder-meta.js","../dist-src/utils/netQueue.js","../dist-src/core/account/api/v1/getFolderMeta.js","../dist-src/core/account/api/v1/setFolderMeta.js","../dist-src/core/account/api/v1/meta/removeFile.js","../dist-src/core/account/api/v1/meta/removeVersion.js","../dist-src/core/account/api/v1/meta/addFile.js","../dist-src/core/account/api/v1/meta/addFolder.js","../dist-src/core/account/api/v1/meta/removeFolder.js","../dist-src/core/account/api/v1/createMetaQueue.js","../dist-src/core/account/api/v1/createFolder.js","../dist-src/core/account/api/v1/createFolderMeta.js","../dist-src/core/requests/deleteFile.js","../dist-src/core/account/api/v1/deleteVersion.js","../dist-src/core/account/api/v1/deleteFile.js","../dist-src/core/account/api/v1/deleteFolder.js","../dist-src/core/account/api/v1/deleteFolderMeta.js","../dist-src/core/account/api/v1/login.js","../dist-src/core/account/api/v1/moveFile.js","../dist-src/core/account/api/v1/moveFolder.js","../dist-src/core/account/api/v1/renameFile.js","../dist-src/core/account/api/v1/renameFolder.js","../dist-src/core/account/api/v1/uploadFile.js","../dist-src/core/account/api/v1/index.js","../dist-src/account.js"],"sourcesContent":["import { Readable } from \"readable-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class FileSourceStream extends Readable {\r\n    constructor(blob, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        console.log(\"Starting file source stream\", blob);\r\n        super(opts);\r\n        this.offset = 0;\r\n        this.options = opts;\r\n        this.blob = blob;\r\n        this.reader = new FileReader();\r\n        this._onChunkRead = this._onChunkRead.bind(this);\r\n        if (opts.blockSize <= 0) {\r\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\r\n        }\r\n    }\r\n    _read() {\r\n        if (this.reader.readyState !== FileReader.LOADING) {\r\n            this._readChunkFromBlob();\r\n        }\r\n    }\r\n    _readChunkFromBlob() {\r\n        const blob = this.blob;\r\n        const offset = this.offset;\r\n        const blockSize = this.options.blockSize;\r\n        const limit = Math.min(offset + blockSize, blob.size);\r\n        // End stream when file is read in\r\n        if (offset >= blob.size) {\r\n            return this.push(null);\r\n        }\r\n        const chunk = blob.slice(offset, limit, \"application/octet-stream\");\r\n        this.offset += blockSize;\r\n        this.reader.onload = this._onChunkRead;\r\n        this.reader.readAsArrayBuffer(chunk);\r\n    }\r\n    _onChunkRead(event) {\r\n        const chunk = event.target.result;\r\n        if (this.push(new Uint8Array(chunk))) {\r\n            this._read();\r\n        }\r\n    }\r\n}\r\n","import { Readable } from \"readable-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class BufferSourceStream extends Readable {\r\n    constructor(data, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.offset = 0;\r\n        this.options = opts;\r\n        this.buffer = data.data;\r\n        if (opts.blockSize <= 0) {\r\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\r\n        }\r\n    }\r\n    _read() {\r\n        let read;\r\n        do {\r\n            read = this.push(this._readChunkFromBuffer());\r\n        } while (read);\r\n    }\r\n    _readChunkFromBuffer() {\r\n        const buf = this.buffer;\r\n        const offset = this.offset;\r\n        const blockSize = this.options.blockSize;\r\n        const limit = Math.min(offset + blockSize, buf.length) - offset;\r\n        // End stream when file is read in\r\n        if (offset >= buf.length) {\r\n            return null;\r\n        }\r\n        const slice = buf.slice(offset, offset + limit);\r\n        this.offset += blockSize;\r\n        return slice;\r\n    }\r\n}\r\n","export const FILENAME_MAX_LENGTH = 256;\r\nexport const CURRENT_VERSION = 1;\r\nexport const IV_BYTE_LENGTH = 16;\r\nexport const TAG_BYTE_LENGTH = 16;\r\nexport const TAG_BIT_LENGTH = TAG_BYTE_LENGTH * 8;\r\nexport const DEFAULT_BLOCK_SIZE = 64 * 1024;\r\nexport const BLOCK_OVERHEAD = TAG_BYTE_LENGTH + IV_BYTE_LENGTH;\r\nexport const DEFAULT_PART_SIZE = 128 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD);\r\n","import { md as ForgeMd, random as ForgeRandom, util as ForgeUtil } from \"node-forge\";\r\nimport isBuffer from \"is-buffer\";\r\nimport FileSourceStream from \"../streams/fileSourceStream\";\r\nimport BufferSourceStream from \"../streams/bufferSourceStream\";\r\nimport mime from \"mime/lite\";\r\nimport { FILENAME_MAX_LENGTH, BLOCK_OVERHEAD, DEFAULT_BLOCK_SIZE, DEFAULT_PART_SIZE } from \"./constants\";\r\nconst Forge = { md: ForgeMd, random: ForgeRandom, util: ForgeUtil };\r\nconst ByteBuffer = Forge.util.ByteBuffer;\r\n// Generate new handle, datamap entry hash and encryption key\r\n// TODO: Decide on format and derivation\r\nexport function generateFileKeys() {\r\n    const hash = Forge.md.sha256\r\n        .create()\r\n        .update(Forge.random.getBytesSync(32))\r\n        .digest().toHex();\r\n    const key = Forge.md.sha256\r\n        .create()\r\n        .update(Forge.random.getBytesSync(32))\r\n        .digest().toHex();\r\n    const handle = hash + key;\r\n    return {\r\n        hash,\r\n        key,\r\n        handle\r\n    };\r\n}\r\n// Return datamap hash and encryption key from handle\r\n// TODO: Decide on format and derivation\r\nexport function keysFromHandle(handle) {\r\n    const bytes = Forge.util.binary.hex.decode(handle);\r\n    const buf = new ByteBuffer(bytes);\r\n    const hash = buf.getBytes(32);\r\n    const key = buf.getBytes(32);\r\n    return {\r\n        hash: Forge.util.bytesToHex(hash),\r\n        key: Forge.util.bytesToHex(key),\r\n        handle\r\n    };\r\n}\r\nexport function sanitizeFilename(filename) {\r\n    if (filename.length > FILENAME_MAX_LENGTH) {\r\n        const l = (FILENAME_MAX_LENGTH / 2) - 2;\r\n        const start = filename.substring(0, l);\r\n        const end = filename.substring(filename.length - l);\r\n        filename = start + \"...\" + end;\r\n    }\r\n    return filename;\r\n}\r\n// Rudimentary format normalization\r\nexport function getFileData(file, nameFallback = \"file\") {\r\n    if (isBuffer(file)) {\r\n        file = file;\r\n        return {\r\n            data: file,\r\n            size: file.length,\r\n            name: nameFallback,\r\n            type: \"application/octet-stream\",\r\n            reader: BufferSourceStream\r\n        };\r\n    }\r\n    else if (file && file.data && isBuffer(file.data)) {\r\n        file = file;\r\n        return {\r\n            data: file.data,\r\n            size: file.data.length,\r\n            name: file.name || nameFallback,\r\n            type: file.type || mime.getType(file.name) || \"\",\r\n            reader: BufferSourceStream\r\n        };\r\n    }\r\n    else {\r\n        // TODO\r\n        file.reader = FileSourceStream;\r\n    }\r\n    return file;\r\n}\r\nexport function getMimeType(metadata) {\r\n    return metadata.type || mime.getType(metadata.name) || \"\";\r\n}\r\n// get true upload size, accounting for encryption overhead\r\nexport function getUploadSize(size, params) {\r\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\r\n    const blockCount = Math.ceil(size / blockSize);\r\n    return size + blockCount * BLOCK_OVERHEAD;\r\n}\r\n// get\r\nexport function getEndIndex(uploadSize, params) {\r\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\r\n    const partSize = params.partSize || DEFAULT_PART_SIZE;\r\n    const chunkSize = blockSize + BLOCK_OVERHEAD;\r\n    const chunkCount = Math.ceil(uploadSize / chunkSize);\r\n    const chunksPerPart = Math.ceil(partSize / chunkSize);\r\n    const endIndex = Math.ceil(chunkCount / chunksPerPart);\r\n    return endIndex;\r\n}\r\nexport function getBlockSize(params) {\r\n    if (params && params.blockSize) {\r\n        return params.blockSize;\r\n    }\r\n    else if (params && params.p && params.p.blockSize) {\r\n        return params.p.blockSize;\r\n    }\r\n    else {\r\n        return DEFAULT_BLOCK_SIZE;\r\n    }\r\n}\r\n","import { cipher as ForgeCipher, md as ForgeMd, util as ForgeUtil, random as ForgeRandom } from \"node-forge\";\r\nimport { IV_BYTE_LENGTH, TAG_BYTE_LENGTH, TAG_BIT_LENGTH, BLOCK_OVERHEAD } from \"./constants\";\r\nconst Forge = { cipher: ForgeCipher, md: ForgeMd, util: ForgeUtil, random: ForgeRandom };\r\nconst ByteBuffer = Forge.util.ByteBuffer;\r\n// Encryption\r\nexport function encrypt(key, byteBuffer) {\r\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\r\n    const iv = Forge.random.getBytesSync(IV_BYTE_LENGTH);\r\n    const cipher = Forge.cipher.createCipher(\"AES-GCM\", keyBuf);\r\n    cipher.start({\r\n        iv,\r\n        tagLength: TAG_BIT_LENGTH\r\n    });\r\n    cipher.update(byteBuffer);\r\n    cipher.finish();\r\n    byteBuffer.clear();\r\n    byteBuffer.putBuffer(cipher.output);\r\n    byteBuffer.putBuffer(cipher.mode.tag);\r\n    byteBuffer.putBytes(iv);\r\n    return byteBuffer;\r\n}\r\nexport function encryptString(key, string, encoding = \"utf8\") {\r\n    const buf = Forge.util.createBuffer(string, encoding);\r\n    return encrypt(key, buf);\r\n}\r\nexport function encryptBytes(key, bytes) {\r\n    return encrypt(key, Forge.util.createBuffer(bytes));\r\n}\r\n// Decryption\r\nexport function decrypt(key, byteBuffer) {\r\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\r\n    keyBuf.read = 0;\r\n    byteBuffer.read = byteBuffer.length() - BLOCK_OVERHEAD;\r\n    const tag = byteBuffer.getBytes(TAG_BYTE_LENGTH);\r\n    const iv = byteBuffer.getBytes(IV_BYTE_LENGTH);\r\n    const decipher = Forge.cipher.createDecipher(\"AES-GCM\", keyBuf);\r\n    byteBuffer.read = 0;\r\n    byteBuffer.truncate(BLOCK_OVERHEAD);\r\n    decipher.start({\r\n        iv,\r\n        // the type definitions are wrong in @types/node-forge\r\n        tag: tag,\r\n        tagLength: TAG_BIT_LENGTH\r\n    });\r\n    decipher.update(byteBuffer);\r\n    if (decipher.finish()) {\r\n        return decipher.output;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexport function decryptBytes(key, bytes) {\r\n    const buf = new ByteBuffer(bytes);\r\n    const output = decrypt(key, buf);\r\n    if (output) {\r\n        return Forge.util.binary.raw.decode(output.getBytes());\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexport function decryptString(key, byteBuffer, encoding = \"utf8\") {\r\n    const output = decrypt(key, byteBuffer);\r\n    if (output) {\r\n        return Buffer.from(output.toString()).toString(encoding);\r\n    }\r\n    else {\r\n        throw new Error(\"unable to decrypt\");\r\n    }\r\n}\r\n","import { sanitizeFilename } from \"./helpers\";\r\nimport { encryptString, decryptString } from \"./encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nconst Forge = { util: ForgeUtil };\r\nconst PROTOCOL_VERSION = 1;\r\nexport function createMetadata(file, opts) {\r\n    const filename = sanitizeFilename(file.name);\r\n    const metadata = {\r\n        name: filename,\r\n        type: file.type,\r\n        size: file.size,\r\n        p: opts\r\n    };\r\n    return metadata;\r\n}\r\nexport function encryptMetadata(metadata, key) {\r\n    const encryptedMeta = encryptString(key, JSON.stringify(metadata), \"utf8\");\r\n    return Forge.util.binary.raw.decode(encryptedMeta.getBytes());\r\n}\r\nexport function decryptMetadata(data, key) {\r\n    const byteStr = Forge.util.binary.raw.encode(data);\r\n    const byteBuffer = new Forge.util.ByteBuffer(byteStr);\r\n    const meta = JSON.parse(decryptString(key, byteBuffer));\r\n    return meta;\r\n}\r\n","import { Transform } from \"readable-stream\";\r\nimport { decryptBytes } from \"../core/encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\r\nimport { getBlockSize } from \"../core/helpers\";\r\nconst Forge = { util: ForgeUtil };\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    binaryMode: false,\r\n    objectMode: true,\r\n    blockSize: DEFAULT_BLOCK_SIZE\r\n});\r\nexport default class DecryptStream extends Transform {\r\n    constructor(key, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.options = opts;\r\n        this.key = key;\r\n        this.iter = 0;\r\n        this.blockSize = getBlockSize(options);\r\n    }\r\n    _transform(chunk, encoding, callback) {\r\n        const blockSize = this.blockSize;\r\n        const chunkSize = blockSize + BLOCK_OVERHEAD;\r\n        const length = chunk.length;\r\n        for (let offset = 0; offset < length; offset += chunkSize) {\r\n            const limit = Math.min(offset + chunkSize, length);\r\n            const buf = chunk.slice(offset, limit);\r\n            const data = decryptBytes(this.key, buf);\r\n            if (data) {\r\n                this.push(data);\r\n            }\r\n            else {\r\n                this.emit(\"error\", \"Error decrypting data block\");\r\n            }\r\n        }\r\n        callback(null);\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { Readable } from \"readable-stream\";\r\nimport { getBlockSize } from \"../core/helpers\";\r\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autostart: true,\r\n    maxParallelDownloads: 1,\r\n    maxRetries: 0,\r\n    partSize: 80 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD),\r\n    objectMode: false\r\n});\r\nexport default class DownloadStream extends Readable {\r\n    constructor(url, metadata, size, options = {}) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        // Input\r\n        this.options = opts;\r\n        this.url = url;\r\n        this.size = size;\r\n        this.metadata = metadata;\r\n        // Internal\r\n        this.chunks = [];\r\n        this.chunkId = 0;\r\n        this.pushId = 0;\r\n        this.bytesDownloaded = 0;\r\n        this.isDownloadFinished = false;\r\n        this.ongoingDownloads = 0;\r\n        this.pushChunk = false;\r\n        const blockSize = getBlockSize(metadata);\r\n        const blockCount = opts.partSize / (blockSize + BLOCK_OVERHEAD);\r\n        if (blockCount !== Math.floor(blockCount)) {\r\n            this.emit(\"error\", \"options.partSize must be a multiple of blockSize + blockOverhead\");\r\n        }\r\n        if (opts.autostart) {\r\n            this._download();\r\n        }\r\n    }\r\n    _read() {\r\n        this.pushChunk = true;\r\n        const attemptDownload = this.ongoingDownloads < this.options.maxParallelDownloads;\r\n        if (!this.isDownloadFinished && attemptDownload) {\r\n            this._download();\r\n        }\r\n        this._pushChunk();\r\n    }\r\n    async _download(chunkIndex) {\r\n        const size = this.size;\r\n        const partSize = this.options.partSize;\r\n        const index = chunkIndex || this.chunks.length;\r\n        const offset = index * partSize;\r\n        // TODO: Make sure last byte works to prevent edge case\r\n        if (offset >= size) {\r\n            this.isDownloadFinished = true;\r\n            return;\r\n        }\r\n        const limit = Math.min(offset + partSize, size) - offset;\r\n        const range = `bytes=${offset}-${offset + limit - 1}`;\r\n        const chunk = {\r\n            id: this.chunkId++,\r\n            data: null,\r\n            offset,\r\n            limit\r\n        };\r\n        try {\r\n            this.chunks.push(chunk);\r\n            this.ongoingDownloads++;\r\n            const download = await Axios.get(this.url + \"/file\", {\r\n                responseType: \"arraybuffer\",\r\n                headers: {\r\n                    range\r\n                }\r\n            });\r\n            chunk.data = new Uint8Array(download.data);\r\n            this.bytesDownloaded += chunk.data.length;\r\n            this.ongoingDownloads--;\r\n            this.emit(\"progress\", this.bytesDownloaded / this.size);\r\n            this._pushChunk();\r\n        }\r\n        catch (error) {\r\n            this.ongoingDownloads--;\r\n            this.emit(\"error\", error);\r\n        }\r\n        return;\r\n    }\r\n    async _afterDownload() {\r\n    }\r\n    _pushChunk() {\r\n        if (!this.pushChunk) {\r\n            return;\r\n        }\r\n        const chunk = this.chunks[this.pushId];\r\n        if (chunk && chunk.data !== null) {\r\n            this.pushId++;\r\n            this.pushChunk = this.push(chunk.data);\r\n            chunk.data = null;\r\n            this._pushChunk();\r\n        }\r\n        else if (this.ongoingDownloads === 0 && this.isDownloadFinished) {\r\n            this.push(null);\r\n        }\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { EventEmitter } from \"events\";\r\nimport { decryptMetadata } from \"./core/metadata\";\r\nimport { getMimeType, getUploadSize, keysFromHandle } from \"./core/helpers\";\r\nimport DecryptStream from \"./streams/decryptStream\";\r\nimport DownloadStream from \"./streams/downloadStream\";\r\nconst METADATA_PATH = \"/download/metadata/\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autoStart: true\r\n});\r\n/**\r\n * @internal\r\n */\r\nexport default class Download extends EventEmitter {\r\n    constructor(handle, opts = {}) {\r\n        super();\r\n        this.metadata = async () => {\r\n            if (this._metadata) {\r\n                return this._metadata;\r\n            }\r\n            else {\r\n                return await this.downloadMetadata();\r\n            }\r\n        };\r\n        this.toBuffer = async () => {\r\n            const chunks = [];\r\n            let totalLength = 0;\r\n            if (typeof Buffer === \"undefined\") {\r\n                return false;\r\n            }\r\n            await this.startDownload();\r\n            return new Promise(resolve => {\r\n                this.decryptStream.on(\"data\", (data) => {\r\n                    chunks.push(data);\r\n                    totalLength += data.length;\r\n                });\r\n                this.decryptStream.once(\"finish\", () => {\r\n                    resolve(Buffer.concat(chunks, totalLength));\r\n                });\r\n            }).catch(err => {\r\n                throw err;\r\n            });\r\n        };\r\n        this.toFile = async () => {\r\n            const chunks = [];\r\n            let totalLength = 0;\r\n            await this.startDownload();\r\n            return new Promise(resolve => {\r\n                this.decryptStream.on(\"data\", (data) => {\r\n                    chunks.push(data);\r\n                    totalLength += data.length;\r\n                });\r\n                this.decryptStream.once(\"finish\", async () => {\r\n                    const meta = await this.metadata();\r\n                    resolve(new File(chunks, meta.name, {\r\n                        type: getMimeType(meta)\r\n                    }));\r\n                });\r\n            }).catch(err => {\r\n                throw err;\r\n            });\r\n        };\r\n        this.startDownload = async () => {\r\n            try {\r\n                await this.getDownloadURL();\r\n                await this.downloadMetadata();\r\n                await this.downloadFile();\r\n            }\r\n            catch (e) {\r\n                this.propagateError(e);\r\n            }\r\n        };\r\n        this.getDownloadURL = async (overwrite = false) => {\r\n            let req;\r\n            if (!overwrite && this.downloadURLRequest) {\r\n                req = this.downloadURLRequest;\r\n            }\r\n            else {\r\n                req = Axios.post(this.options.endpoint + \"/api/v1/download\", {\r\n                    fileID: this.hash\r\n                });\r\n                this.downloadURLRequest = req;\r\n            }\r\n            const res = await req;\r\n            if (res.status === 200) {\r\n                this.downloadURL = res.data.fileDownloadUrl;\r\n                return this.downloadURL;\r\n            }\r\n        };\r\n        this.downloadMetadata = async (overwrite = false) => {\r\n            let req;\r\n            if (!this.downloadURL) {\r\n                await this.getDownloadURL();\r\n            }\r\n            if (!overwrite && this.metadataRequest) {\r\n                req = this.metadataRequest;\r\n            }\r\n            else {\r\n                const endpoint = this.options.endpoint;\r\n                const path = METADATA_PATH + this.hash;\r\n                req = Axios.get(this.downloadURL + \"/metadata\", {\r\n                    responseType: \"arraybuffer\"\r\n                });\r\n                this.metadataRequest = req;\r\n            }\r\n            const res = await req;\r\n            const metadata = decryptMetadata(new Uint8Array(res.data), this.key);\r\n            this._metadata = metadata;\r\n            this.size = getUploadSize(metadata.size, metadata.p || {});\r\n            return metadata;\r\n        };\r\n        this.downloadFile = async () => {\r\n            if (this.isDownloading) {\r\n                return true;\r\n            }\r\n            this.isDownloading = true;\r\n            this.downloadStream = new DownloadStream(this.downloadURL, await this.metadata, this.size, this.options);\r\n            this.decryptStream = new DecryptStream(this.key);\r\n            this.downloadStream.on(\"progress\", progress => {\r\n                this.emit(\"download-progress\", {\r\n                    target: this,\r\n                    handle: this.handle,\r\n                    progress: progress\r\n                });\r\n            });\r\n            this.downloadStream\r\n                .pipe(this.decryptStream);\r\n            this.downloadStream.on(\"error\", this.propagateError);\r\n            this.decryptStream.on(\"error\", this.propagateError);\r\n        };\r\n        this.finishDownload = (error) => {\r\n            if (error) {\r\n                this.propagateError(error);\r\n            }\r\n            else {\r\n                this.emit(\"finish\");\r\n            }\r\n        };\r\n        this.propagateError = (error) => {\r\n            console.warn(\"Download error: \", error.message || error);\r\n            process.nextTick(() => this.emit(\"error\", error.message || error));\r\n        };\r\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\r\n        const { hash, key } = keysFromHandle(handle);\r\n        this.options = options;\r\n        this.handle = handle;\r\n        this.hash = hash;\r\n        this.key = key;\r\n        this.downloadURLRequest = null;\r\n        this.metadataRequest = null;\r\n        this.isDownloading = false;\r\n        if (options.autoStart) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n}\r\n","import { Transform } from \"readable-stream\";\r\nimport { encryptBytes } from \"../core/encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nconst Forge = { util: ForgeUtil };\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class EncryptStream extends Transform {\r\n    constructor(key, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.options = opts;\r\n        this.key = key;\r\n    }\r\n    _transform(data, encoding, callback) {\r\n        const chunk = encryptBytes(this.key, data);\r\n        const buf = Forge.util.binary.raw.decode(chunk.getBytes());\r\n        this.push(buf);\r\n        callback(null);\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\n/**\r\n * get a list of available plans\r\n *\r\n * @param endpoint\r\n *\r\n * @internal\r\n */\r\nexport async function getPlans(endpoint) {\r\n    return Axios.get(endpoint + \"/plans\");\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * check whether a payment has gone through for an account\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to check\r\n *\r\n * @internal\r\n */\r\nexport async function checkPaymentStatus(endpoint, hdNode) {\r\n    const payload = {\r\n        timestamp: Math.floor(Date.now() / 1000)\r\n    };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/account-data\", signedPayload);\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * request the creation of an account\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to create\r\n * @param metadataKey\r\n * @param duration - account duration in months\r\n * @param limit - storage limit in GB\r\n *\r\n * @internal\r\n */\r\nexport async function createAccount(endpoint, hdNode, metadataKey, duration = 12, limit = 128) {\r\n    const payload = {\r\n        metadataKey: metadataKey,\r\n        durationInMonths: duration,\r\n        // TODO: I'm not sure why this is like this, but it doesn't match what was planned\r\n        storageLimit: limit\r\n    };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/accounts\", signedPayload);\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * request creating a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function createMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/create\", signedPayload);\r\n}\r\n/**\r\n * request deleting a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function deleteMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/delete\", signedPayload);\r\n}\r\n/**\r\n * request changing a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n * @param metadata - the metadata to put\r\n *\r\n * @internal\r\n */\r\nexport async function setMetadata(endpoint, hdNode, metadataKey, metadata) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadata, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/set\", signedPayload);\r\n}\r\n/**\r\n * request get of a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function getMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/get\", signedPayload);\r\n}\r\n","import FormDataNode from \"form-data\";\r\nimport * as EthUtil from \"ethereumjs-util\";\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\n/**\r\n * get a signed payload from an hdkey\r\n *\r\n * @param rawPayload - a payload object to be processed and signed\r\n * @param hdNode = the account to sign with\r\n * @param key\r\n *\r\n * @internal\r\n */\r\nexport function getPayload(rawPayload, hdNode, key = \"requestBody\") {\r\n    const payload = JSON.stringify(rawPayload);\r\n    const hash = EthUtil.keccak256(payload);\r\n    const signature = hdNode.sign(hash).toString(\"hex\");\r\n    const pubKey = hdNode.publicKey.toString(\"hex\");\r\n    const signedPayload = {\r\n        signature,\r\n        publicKey: pubKey,\r\n        hash: hash.toString(\"hex\")\r\n    };\r\n    signedPayload[key] = payload;\r\n    return signedPayload;\r\n}\r\n/**\r\n * get a signed formdata payload from an hdkey\r\n *\r\n * @param rawPayload - a payload object to be processed and signed\r\n * @param extraPayload - additional (unsigned) payload information\r\n * @param hdNode - the account to sign with\r\n * @param key\r\n *\r\n * @internal\r\n */\r\nexport function getPayloadFD(rawPayload, extraPayload, hdNode, key = \"requestBody\") {\r\n    // rawPayload.timestamp = Date.now();\r\n    const payload = JSON.stringify(rawPayload);\r\n    const hash = EthUtil.keccak256(payload);\r\n    const signature = hdNode.sign(hash).toString(\"hex\");\r\n    const pubKey = hdNode.publicKey.toString(\"hex\");\r\n    // node, buffers\r\n    if (POLYFILL_FORMDATA) {\r\n        const data = new FormDataNode();\r\n        data.append(key, payload);\r\n        data.append(\"signature\", signature);\r\n        data.append(\"publicKey\", pubKey);\r\n        // data.append(\"hash\", hash);\r\n        if (extraPayload) {\r\n            Object.keys(extraPayload).forEach(key => {\r\n                const pl = Buffer.from(extraPayload[key]);\r\n                data.append(key, pl, {\r\n                    filename: key,\r\n                    contentType: \"application/octet-stream\",\r\n                    knownLength: pl.length\r\n                });\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n    else {\r\n        const data = new FormData();\r\n        data.append(key, payload);\r\n        data.append(\"signature\", signature);\r\n        data.append(\"publicKey\", pubKey);\r\n        if (extraPayload) {\r\n            Object.keys(extraPayload).forEach(key => {\r\n                data.append(key, new Blob([extraPayload[key].buffer]), key);\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n}\r\nexport { getPlans } from \"./requests/getPlans\";\r\nexport { checkPaymentStatus } from \"./requests/checkPaymentStatus\";\r\nexport { createAccount } from \"./requests/createAccount\";\r\nexport { getMetadata, setMetadata, createMetadata, deleteMetadata } from \"./requests/metadata\";\r\n","import Axios from \"axios\";\r\nimport { Writable } from \"readable-stream\";\r\nimport { getPayload, getPayloadFD } from \"../core/request\";\r\nimport { getEndIndex } from \"../core/helpers\";\r\nimport { DEFAULT_PART_SIZE } from \"../core/constants\";\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\nconst PART_MIME = \"application/octet-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    maxParallelUploads: 3,\r\n    maxRetries: 0,\r\n    partSize: DEFAULT_PART_SIZE,\r\n    objectMode: false\r\n});\r\nexport default class UploadStream extends Writable {\r\n    constructor(account, hash, size, endpoint, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        // Input\r\n        this.account = account;\r\n        this.hash = hash;\r\n        this.endpoint = endpoint;\r\n        this.options = opts;\r\n        this.size = size;\r\n        this.endIndex = getEndIndex(size, opts);\r\n        // Internal\r\n        this.bytesUploaded = 0;\r\n        this.blockBuffer = [];\r\n        this.partBuffer = [];\r\n        this.bufferSize = 0;\r\n        this.ongoingUploads = 0;\r\n        this.retries = 0;\r\n        this.partIndex = 0;\r\n        this.finalCallback = null;\r\n    }\r\n    _write(data, encoding, callback) {\r\n        this.blockBuffer.push(data);\r\n        this.bufferSize += data.length;\r\n        if (this.bufferSize >= this.options.partSize) {\r\n            this._addPart();\r\n            this._attemptUpload();\r\n        }\r\n        callback();\r\n    }\r\n    _final(callback) {\r\n        this.finalCallback = callback;\r\n        if (this.blockBuffer.length > 0) {\r\n            this._addPart();\r\n            this._attemptUpload();\r\n        }\r\n        else if (this.ongoingUploads === 0) {\r\n            this._finishUpload();\r\n        }\r\n    }\r\n    // Flatten inputs into a single ArrayBuffer for sending\r\n    _addPart() {\r\n        const blocks = this.blockBuffer;\r\n        const data = new Uint8Array(this.bufferSize);\r\n        let offset = 0;\r\n        do {\r\n            const block = blocks.shift();\r\n            data.set(block, offset);\r\n            offset += block.length;\r\n        } while (blocks.length > 0);\r\n        this.partBuffer.push({\r\n            partIndex: ++this.partIndex,\r\n            data\r\n        });\r\n        this.blockBuffer = [];\r\n        this.bufferSize = 0;\r\n    }\r\n    _attemptUpload() {\r\n        if (this.ongoingUploads >= this.options.maxParallelUploads) {\r\n            return;\r\n        }\r\n        const part = this.partBuffer.shift();\r\n        this._upload(part);\r\n    }\r\n    _upload(part) {\r\n        this.ongoingUploads++;\r\n        // Cork stream when busy\r\n        if (this.ongoingUploads === this.options.maxParallelUploads) {\r\n            this.cork();\r\n        }\r\n        const data = getPayloadFD({\r\n            fileHandle: this.hash,\r\n            partIndex: part.partIndex,\r\n            endIndex: this.endIndex\r\n        }, {\r\n            chunkData: part.data\r\n        }, this.account);\r\n        const upload = Axios.post(this.endpoint + \"/api/v1/upload\", data, {\r\n            headers: data.getHeaders ? data.getHeaders() : {},\r\n            onUploadProgress: (event) => {\r\n                return;\r\n            }\r\n        })\r\n            .then(result => {\r\n            this._afterUpload(part);\r\n        })\r\n            .catch(error => {\r\n            this._uploadError(error, part);\r\n        });\r\n    }\r\n    _afterUpload(part) {\r\n        this.ongoingUploads--;\r\n        this.bytesUploaded += part.data.length;\r\n        this.emit(\"progress\", this.bytesUploaded / this.size);\r\n        // Upload until done\r\n        if (this.partBuffer.length > 0) {\r\n            return this._attemptUpload();\r\n        }\r\n        if (this.finalCallback) {\r\n            // Finish\r\n            if (this.ongoingUploads === 0) {\r\n                this._finishUpload();\r\n            }\r\n        }\r\n        else {\r\n            // Continue\r\n            process.nextTick(() => this.uncork());\r\n        }\r\n    }\r\n    async _finishUpload() {\r\n        const confirmUpload = this._confirmUpload.bind(this);\r\n        const data = getPayload({\r\n            fileHandle: this.hash\r\n        }, this.account);\r\n        let uploadFinished = false;\r\n        do {\r\n            uploadFinished = await confirmUpload(data);\r\n            if (!uploadFinished) {\r\n                await new Promise(resolve => setTimeout(resolve, 5000));\r\n            }\r\n        } while (!uploadFinished);\r\n        this.finalCallback();\r\n    }\r\n    async _confirmUpload(data) {\r\n        try {\r\n            const req = Axios.post(this.endpoint + \"/api/v1/upload-status\", data);\r\n            const res = await req;\r\n            if (!res.data.missingIndexes || !res.data.missingIndexes.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message || err);\r\n            return false;\r\n        }\r\n    }\r\n    _uploadError(error, part) {\r\n        this.ongoingUploads--;\r\n        console.warn(\"error\", error);\r\n        if (this.retries++ < this.options.maxRetries) {\r\n            console.log(\"retrying\", this.retries, \"of\", this.options.maxRetries);\r\n            this.partBuffer.push(part);\r\n            this._attemptUpload();\r\n            return;\r\n        }\r\n        if (this.finalCallback) {\r\n            this.finalCallback(error);\r\n        }\r\n        else {\r\n            this.emit(\"error\", error);\r\n            this.end();\r\n        }\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { EventEmitter } from \"events\";\r\nimport { createMetadata, encryptMetadata } from \"./core/metadata\";\r\nimport { generateFileKeys, getUploadSize, getFileData, getEndIndex } from \"./core/helpers\";\r\nimport EncryptStream from \"./streams/encryptStream\";\r\nimport UploadStream from \"./streams/uploadStream\";\r\nimport { getPayloadFD } from \"./core/request\";\r\nconst PART_MIN_SIZE = 1024 * 1024 * 5;\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autoStart: true\r\n});\r\nconst DEFAULT_FILE_PARAMS = {\r\n    blockSize: 64 * 1024,\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport default class Upload extends EventEmitter {\r\n    constructor(file, account, opts = {}) {\r\n        super();\r\n        this.startUpload = async () => {\r\n            try {\r\n                await this.uploadMetadata();\r\n                await this.uploadFile();\r\n            }\r\n            catch (e) {\r\n                this.propagateError(e);\r\n            }\r\n        };\r\n        this.uploadMetadata = async () => {\r\n            const meta = createMetadata(this.data, this.options.params);\r\n            const encryptedMeta = encryptMetadata(meta, this.key);\r\n            const data = getPayloadFD({\r\n                fileHandle: this.hash,\r\n                fileSizeInByte: this.uploadSize,\r\n                endIndex: getEndIndex(this.uploadSize, this.options.params)\r\n            }, {\r\n                metadata: encryptedMeta\r\n            }, this.account);\r\n            const url = this.options.endpoint + \"/api/v1/init-upload\";\r\n            const headers = data.getHeaders ? data.getHeaders() : {};\r\n            const req = Axios.post(url, data, { headers });\r\n            const res = await req;\r\n            this.emit(\"metadata\", meta);\r\n        };\r\n        this.uploadFile = async () => {\r\n            const readStream = new this.data.reader(this.data, this.options.params);\r\n            this.readStream = readStream;\r\n            this.encryptStream = new EncryptStream(this.key, this.options.params);\r\n            this.uploadStream = new UploadStream(this.account, this.hash, this.uploadSize, this.options.endpoint, this.options.params);\r\n            this.uploadStream.on(\"progress\", progress => {\r\n                this.emit(\"upload-progress\", {\r\n                    target: this,\r\n                    handle: this.handle,\r\n                    progress\r\n                });\r\n            });\r\n            this.readStream\r\n                .pipe(this.encryptStream)\r\n                .pipe(this.uploadStream)\r\n                .on(\"finish\", this.finishUpload);\r\n            this.readStream.on(\"error\", this.propagateError);\r\n            this.encryptStream.on(\"error\", this.propagateError);\r\n            this.uploadStream.on(\"error\", this.propagateError);\r\n        };\r\n        this.finishUpload = async () => {\r\n            this.emit(\"finish\", {\r\n                target: this,\r\n                handle: this.handle,\r\n                metadata: this.metadata\r\n            });\r\n        };\r\n        this.propagateError = (error) => {\r\n            process.nextTick(() => this.emit(\"error\", error));\r\n        };\r\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\r\n        options.params = Object.assign({}, DEFAULT_FILE_PARAMS, options.params || {});\r\n        const { handle, hash, key } = generateFileKeys();\r\n        const data = getFileData(file, handle);\r\n        const size = getUploadSize(data.size, options.params);\r\n        this.account = account;\r\n        this.options = options;\r\n        this.data = data;\r\n        this.uploadSize = size;\r\n        this.key = key; // Encryption key\r\n        this.hash = hash; // Datamap entry hash\r\n        this.handle = handle; // File handle - hex(hash) + hex(key)\r\n        this.metadata = createMetadata(data, options.params);\r\n        if (options.autoStart) {\r\n            this.startUpload();\r\n        }\r\n    }\r\n}\r\n","import Download from \"../../../../download\";\r\nconst downloadFile = (masterHandle, handle) => {\r\n    return new Download(handle, masterHandle.downloadOpts);\r\n};\r\nexport { downloadFile };\r\n","import { soliditySha3 } from \"web3-utils\";\r\nexport const hash = (...val) => {\r\n    return soliditySha3(...val).replace(/^0x/, \"\");\r\n};\r\n","const hashToPath = (h, { prefix = false } = {}) => {\r\n    if (h.length % 4) {\r\n        throw new Error(\"hash length must be multiple of two bytes\");\r\n    }\r\n    return (prefix ? \"m/\" : \"\") + h.match(/.{1,4}/g).map(p => parseInt(p, 16)).join(\"'/\") + \"'\";\r\n};\r\nexport { hashToPath };\r\n","import { hash } from \"../../../../core/hashing\";\r\nimport { hashToPath } from \"../../../../utils/hashToPath\";\r\nconst generateSubHDKey = (masterHandle, pathString) => {\r\n    const path = hashToPath(hash(pathString), { prefix: true });\r\n    return masterHandle.derive(path);\r\n};\r\nexport { generateSubHDKey };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nconst getAccountInfo = async (masterHandle) => ((await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data.account);\r\nexport { getAccountInfo };\r\n","// TODO: don't use polyfill\r\nimport { posix } from \"path-browserify\";\r\nconst posixSep = new RegExp(posix.sep + \"+\", \"g\");\r\nconst posixSepEnd = new RegExp(\"(.)\" + posix.sep + \"+$\");\r\n// NOTE: win32 isn't included in the polyfill\r\nconst win32Sep = new RegExp(\"\\\\+\", \"g\");\r\nconst trimTrailingSep = (path) => {\r\n    return path.replace(posixSepEnd, \"$1\");\r\n};\r\nconst cleanPath = (path) => {\r\n    return trimTrailingSep(path.replace(win32Sep, posix.sep).replace(posixSep, posix.sep));\r\n};\r\nexport { cleanPath };\r\n","import { generateSubHDKey } from \"./generateSubHDKey\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderHDKey = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    return generateSubHDKey(masterHandle, \"folder: \" + dir);\r\n};\r\nexport { getFolderHDKey };\r\n","import { hash } from \"../../../../core/hashing\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderLocation = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    return hash(masterHandle.getFolderHDKey(dir).publicKey.toString(\"hex\"));\r\n};\r\nexport { getFolderLocation };\r\n","import { util as ForgeUtil } from \"node-forge\";\r\nimport { hash } from \"../../../../core/hashing\";\r\nimport { getMetadata } from \"../../../../core/requests/metadata\";\r\nimport { decrypt } from \"../../../../core/encryption\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \r\n    // TODO: verify folder can only be read by the creating account\r\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // folderKey,\r\n    location);\r\n    try {\r\n        // TODO\r\n        // I have no idea why but the decrypted is correct hex without converting\r\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"hex\"))).toString();\r\n        try {\r\n            const meta = JSON.parse(metaString);\r\n            return meta;\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            console.info(\"META STRING:\", metaString);\r\n            throw new Error(\"metadata corrupted\");\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        throw new Error(\"error decrypting meta\");\r\n    }\r\n};\r\nexport { getFolderMeta };\r\n","const getHandle = (masterHandle) => {\r\n    return masterHandle.privateKey.toString(\"hex\") + masterHandle.chainCode.toString(\"hex\");\r\n};\r\nexport { getHandle };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nconst isPaid = async (masterHandle) => {\r\n    try {\r\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\r\n        return accountInfoResponse.data.paymentStatus == \"paid\";\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n};\r\nexport { isPaid };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nimport { createAccount } from \"../../../../core/requests/createAccount\";\r\nconst register = async (masterHandle, duration, limit) => {\r\n    if (await masterHandle.isPaid()) {\r\n        return {\r\n            data: { invoice: { cost: 0, ethAddress: \"0x0\" } },\r\n            waitForPayment: async () => ({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data })\r\n        };\r\n    }\r\n    const createAccountResponse = await createAccount(masterHandle.uploadOpts.endpoint, masterHandle, masterHandle.getFolderLocation(\"/\"), duration, limit);\r\n    return {\r\n        data: createAccountResponse.data,\r\n        waitForPayment: () => new Promise(resolve => {\r\n            const interval = setInterval(async () => {\r\n                // don't perform run if it takes more than 5 seconds for response\r\n                const time = Date.now();\r\n                if (await masterHandle.isPaid() && time + 5 * 1000 > Date.now()) {\r\n                    clearInterval(interval);\r\n                    await masterHandle.login();\r\n                    resolve({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data });\r\n                }\r\n            }, 10 * 1000);\r\n        })\r\n    };\r\n};\r\nexport { register };\r\n","import { downloadFile } from \"../v0/downloadFile\";\r\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\r\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\r\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\r\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\r\nimport { getFolderMeta } from \"../v0/getFolderMeta\";\r\nimport { getHandle } from \"../v0/getHandle\";\r\nimport { isPaid } from \"../v0/isPaid\";\r\nimport { register } from \"../v0/register\";\r\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isPaid, register };\r\n/**\r\n * internal API v0\r\n *\r\n * @internal\r\n */\r\nconst v0 = {\r\n    downloadFile,\r\n    generateSubHDKey,\r\n    getAccountInfo,\r\n    getFolderHDKey,\r\n    getFolderLocation,\r\n    getFolderMeta,\r\n    getHandle,\r\n    isPaid,\r\n    register\r\n};\r\nexport default v0;\r\n","/**\r\n * metadata to describe where a folder can be found (for root metadata of an account)\r\n *\r\n * @public\r\n */\r\nclass FolderEntryMeta {\r\n    /**\r\n     * create metadata entry for a folder\r\n     *\r\n     * @param name - a name of the folder shown in the UI\r\n     * @param location - the public key for the metadata file\r\n     *   it is how the file will be queried for (using the same system as for the account metadata)\r\n     */\r\n    constructor({ name, location }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFolderEntryMeta([\r\n            this.name,\r\n            this.location\r\n        ]);\r\n        this.name = name;\r\n        this.location = location;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFolderEntryMeta extends Array {\r\n    constructor([name, location]) {\r\n        super(2);\r\n        this.unminify = () => new FolderEntryMeta({\r\n            name: this[0],\r\n            location: this[1]\r\n        });\r\n        this[0] = name;\r\n        this[1] = location;\r\n    }\r\n}\r\nexport { FolderEntryMeta, MinifiedFolderEntryMeta };\r\n","/**\r\n * metadata to describe a version of a file as it relates to a filesystem\r\n *\r\n * @public\r\n */\r\nclass FileVersion {\r\n    /**\r\n     * create metadata for a file version\r\n     *\r\n     * @param handle - the file handle\r\n     * @param size - the size of the file in bytes\r\n     * @param created - the date this version was uploaded\r\n     * @param modified - the date the filesystem marked as last modified\r\n     */\r\n    constructor({ handle, size, created = Date.now(), modified = Date.now() }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFileVersion([\r\n            this.handle,\r\n            this.size,\r\n            this.created,\r\n            this.modified\r\n        ]);\r\n        this.handle = handle;\r\n        this.size = size;\r\n        this.created = created;\r\n        this.modified = modified;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFileVersion extends Array {\r\n    constructor([handle, size, created, modified]) {\r\n        super(4);\r\n        this.unminify = () => new FileVersion({\r\n            handle: this[0],\r\n            size: this[1],\r\n            created: this[2],\r\n            modified: this[3]\r\n        });\r\n        this[0] = handle;\r\n        this[1] = size;\r\n        this[2] = created;\r\n        this[3] = modified;\r\n    }\r\n}\r\nexport { FileVersion, MinifiedFileVersion };\r\n","import { FileVersion, MinifiedFileVersion } from \"./file-version\";\r\n/**\r\n * metadata to describe a file as it relates to the UI\r\n *\r\n * @public\r\n */\r\nclass FileEntryMeta {\r\n    /**\r\n     * create metadata for a file entry in the UI\r\n     *\r\n     * @param name - the name of the file as shown in the UI\r\n     * @param created - the date in `ms` that this file was initially uploaded\r\n     * @param created - the date in `ms` that the newest version of this file was uploaded\r\n     * @param versions - versions of the uploaded file (the most recent of which should be the current version of the file)\r\n     */\r\n    constructor({ name, created = Date.now(), modified = Date.now(), versions = [] }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFileEntryMeta([\r\n            this.name,\r\n            this.created,\r\n            this.modified,\r\n            this.versions.map(version => new FileVersion(version).minify())\r\n        ]);\r\n        this.name = name;\r\n        this.created = created;\r\n        this.modified = modified;\r\n        this.versions = versions;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFileEntryMeta extends Array {\r\n    constructor([name, created, modified, versions]) {\r\n        super(4);\r\n        this.unminify = () => new FileEntryMeta({\r\n            name: this[0],\r\n            created: this[1],\r\n            modified: this[2],\r\n            versions: this[3].map(version => new MinifiedFileVersion(version).unminify())\r\n        });\r\n        this[0] = name;\r\n        this[1] = created;\r\n        this[2] = modified;\r\n        this[3] = versions;\r\n    }\r\n}\r\nexport { FileEntryMeta, MinifiedFileEntryMeta };\r\n","import { FileEntryMeta, MinifiedFileEntryMeta } from \"./file-entry\";\r\nimport { FolderEntryMeta, MinifiedFolderEntryMeta } from \"./folder-entry\";\r\n/**\r\n * metadata to describe a folder for the UI\r\n *\r\n * @public\r\n */\r\nclass FolderMeta {\r\n    /**\r\n     * create metadata for a folder\r\n     *\r\n     * @param name - a nickname shown on the folder when accessed without adding to account metadata\r\n     * @param files - the files included only in the most shallow part of the folder\r\n     * @param created - when the folder was created (if not created now) in `ms`\r\n     * @param created - when the folder was changed (if not modified now) in `ms`\r\n     */\r\n    constructor({ name = \"Folder\", files = [], folders = [], created = Date.now(), modified = Date.now() } = {}) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFolderMeta([\r\n            this.name,\r\n            this.files.map(file => new FileEntryMeta(file).minify()),\r\n            this.folders.map(folder => new FolderEntryMeta(folder).minify()),\r\n            this.created,\r\n            this.modified\r\n        ]);\r\n        this.name = name;\r\n        this.files = files;\r\n        this.folders = folders;\r\n        this.created = created;\r\n        this.modified = modified;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFolderMeta extends Array {\r\n    constructor([name, files, folders, created, modified]) {\r\n        super(5);\r\n        this.unminify = () => new FolderMeta({\r\n            name: this[0],\r\n            files: this[1].map(file => new MinifiedFileEntryMeta(file).unminify()),\r\n            folders: this[2].map(folder => new MinifiedFolderEntryMeta(folder).unminify()),\r\n            created: this[3],\r\n            modified: this[4]\r\n        });\r\n        this[0] = name;\r\n        this[1] = files;\r\n        this[2] = folders;\r\n        this[3] = created;\r\n        this[4] = modified;\r\n    }\r\n}\r\nexport { FolderMeta, MinifiedFolderMeta };\r\n","import { EventEmitter } from \"events\";\r\nimport debounce from \"debounce\";\r\nclass NetQueue extends EventEmitter {\r\n    constructor({ fetch, update, data = {}, timeout = 1000 }) {\r\n        super();\r\n        this.updating = false;\r\n        this.queue = [];\r\n        this.types = {};\r\n        this.data = {};\r\n        this.push = ({ type, payload }) => {\r\n            this.queue.push({ type, payload });\r\n            this._process();\r\n        };\r\n        this.addType = ({ type, handler }) => {\r\n            this.types[type] = handler;\r\n        };\r\n        this._process = debounce(async () => {\r\n            if (this.updating)\r\n                return;\r\n            this.updating = true;\r\n            const queueCopy = Object.assign([], this.queue);\r\n            this.result = await Promise.resolve(this._fetch());\r\n            for (let { type, payload } of queueCopy) {\r\n                if (this.types[type])\r\n                    this.result = await Promise.resolve(this.types[type](this.result, payload));\r\n                else\r\n                    throw new Error(\"unknown type: \" + type);\r\n                this.queue.shift();\r\n            }\r\n            await Promise.resolve(this._update(this.result));\r\n            this.updating = false;\r\n            this.emit(\"update\", this.result);\r\n            if (this.queue.length)\r\n                this._process();\r\n        }, this._timeout);\r\n        this._fetch = fetch;\r\n        this._update = update;\r\n        this.data = data;\r\n        this._timeout = timeout;\r\n    }\r\n}\r\nexport { NetQueue };\r\n","import { util as ForgeUtil } from \"node-forge\";\r\nimport { hash } from \"../../../../core/hashing\";\r\nimport { getMetadata } from \"../../../../core/requests/metadata\";\r\nimport { decrypt } from \"../../../../core/encryption\";\r\nimport { MinifiedFolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    createMetaQueue(masterHandle, dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \r\n    // TODO: verify folder can only be read by the creating account\r\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // folderKey,\r\n    location);\r\n    try {\r\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"base64\"))).toString();\r\n        try {\r\n            const meta = JSON.parse(metaString);\r\n            return new MinifiedFolderMeta(meta).unminify();\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            console.info(\"META STRING:\", metaString);\r\n            throw new Error(\"metadata corrupted\");\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        throw new Error(\"error decrypting meta\");\r\n    }\r\n};\r\nexport { getFolderMeta };\r\n","import { hash } from \"../../../hashing\";\r\nimport { encryptString } from \"../../../encryption\";\r\nimport { setMetadata } from \"../../../requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst setFolderMeta = async (masterHandle, dir, folderMeta) => {\r\n    dir = cleanPath(dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), key = hash(folderKey.privateKey.toString(\"hex\")), metaString = JSON.stringify(folderMeta.minify()), encryptedMeta = Buffer.from(encryptString(key, metaString, \"utf8\").toHex(), \"hex\").toString(\"base64\");\r\n    // TODO: verify folder can only be changed by the creating account\r\n    await setMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // masterHandle.getFolderHDKey(dir),\r\n    masterHandle.getFolderLocation(dir), encryptedMeta);\r\n};\r\nexport { setFolderMeta };\r\n","const removeFile = async (metaQueue, meta, file) => {\r\n    // precondition for if file is no longer in the metadata\r\n    if (!meta.files.find(f => file === f || file.name === f.name))\r\n        return meta;\r\n    meta.files = meta.files.filter(f => file !== f && file.name !== f.name);\r\n    return meta;\r\n};\r\nexport { removeFile };\r\n","const removeVersion = async (metaQueue, meta, version) => {\r\n    const file = meta.files.find(f => f.versions.includes(version) || !!f.versions.find(v => version.handle === v.handle));\r\n    // precondition for if version no longer exists in meta\r\n    if (!file)\r\n        return meta;\r\n    file.versions = file.versions.filter(v => version !== v && version.handle !== v.handle);\r\n    if (file.versions.length === 0)\r\n        metaQueue.push({\r\n            type: \"remove-file\",\r\n            payload: file\r\n        });\r\n    return meta;\r\n};\r\nexport { removeVersion };\r\n","const addFile = (metaQueue, meta, file) => {\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    if (existingFile) {\r\n        existingFile.modified = file.modified;\r\n        existingFile.versions = [...existingFile.versions, ...file.versions];\r\n    }\r\n    else {\r\n        meta.files.push(file);\r\n    }\r\n    return meta;\r\n};\r\nexport { addFile };\r\n","const addFolder = (metaQueue, meta, folder) => {\r\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\r\n    if (!existingFolder)\r\n        meta.folders.push(folder);\r\n    return meta;\r\n};\r\nexport { addFolder };\r\n","const removeFolder = async (metaQueue, meta, folder) => {\r\n    // precondition for if folder is no longer in the metadata\r\n    if (!meta.folders.find(f => folder === f || folder.name === f.name))\r\n        return meta;\r\n    meta.folders = meta.folders.filter(f => folder !== f && folder.name !== f.name);\r\n    return meta;\r\n};\r\nexport { removeFolder };\r\n","import { NetQueue } from \"../../../../utils/netQueue\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { removeFile } from \"./meta/removeFile\";\r\nimport { removeVersion } from \"./meta/removeVersion\";\r\nimport { addFile } from \"./meta/addFile\";\r\nimport { addFolder } from \"./meta/addFolder\";\r\nimport { removeFolder } from \"./meta/removeFolder\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createMetaQueue = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    if (masterHandle.metaQueue[dir])\r\n        return;\r\n    const metaQueue = new NetQueue({\r\n        fetch: async () => {\r\n            return getFolderMeta(masterHandle, dir);\r\n        },\r\n        update: async (meta) => {\r\n            await setFolderMeta(masterHandle, dir, meta);\r\n        }\r\n    });\r\n    const types = [\r\n        { type: \"add-folder\", action: addFolder },\r\n        { type: \"add-file\", action: addFile },\r\n        { type: \"remove-folder\", action: removeFolder },\r\n        { type: \"remove-file\", action: removeFile },\r\n        { type: \"remove-version\", action: removeVersion }\r\n    ];\r\n    for (let type of types) {\r\n        metaQueue.addType({\r\n            type: type.type,\r\n            handler: async (meta, payload) => {\r\n                return await type.action(metaQueue, meta, payload);\r\n            }\r\n        });\r\n    }\r\n    masterHandle.metaQueue[dir] = metaQueue;\r\n};\r\nexport { createMetaQueue };\r\n","import { FolderEntryMeta } from \"../../../../core/account/folder-entry\";\r\nimport { FolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\n// TODO: don't use polyfill\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createFolderFn = async (masterHandle, dir, name) => {\r\n    const fullDir = posix.join(dir, name);\r\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    // recurively create containing folders first\r\n    if (!await masterHandle.getFolderMeta(dir).catch(console.warn))\r\n        await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\r\n    if (await masterHandle.getFolderMeta(fullDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    // initialize as empty folder\r\n    await masterHandle.createFolderMeta(fullDir).catch(console.warn);\r\n    await masterHandle.setFolderMeta(fullDir, new FolderMeta({ name }));\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-folder\",\r\n        payload: new FolderEntryMeta({\r\n            name,\r\n            location: masterHandle.getFolderLocation(fullDir)\r\n        })\r\n    });\r\n};\r\nconst createFolder = async (masterHandle, dir, name) => {\r\n    dir = cleanPath(dir);\r\n    const fullDir = posix.join(dir, name);\r\n    if (masterHandle.metaFolderCreating[fullDir]) {\r\n        // TODO: this is hacky\r\n        await new Promise(resolve => {\r\n            const interval = setInterval(() => {\r\n                if (!masterHandle.metaFolderCreating[fullDir]) {\r\n                    resolve();\r\n                    clearInterval(interval);\r\n                }\r\n            }, 250);\r\n        });\r\n        return;\r\n    }\r\n    masterHandle.metaFolderCreating[fullDir] = true;\r\n    await createFolderFn(masterHandle, dir, name);\r\n    masterHandle.metaFolderCreating[fullDir] = false;\r\n};\r\nexport { createFolder };\r\n","import { createMetadata } from \"../../../../core/requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    try {\r\n        // TODO: verify folder can only be changed by the creating account\r\n        await createMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n        // masterHandle.getFolderHDKey(dir),\r\n        masterHandle.getFolderLocation(dir));\r\n    }\r\n    catch (err) {\r\n        console.error(`Can't create folder metadata for folder ${dir}`);\r\n        throw err;\r\n    }\r\n};\r\nexport { createFolderMeta };\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n// Metadata as hexstring as of right now\r\nexport async function deleteFile(endpoint, hdNode, fileID) {\r\n    const payload = { fileID };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/delete\", signedPayload);\r\n}\r\n","import { deleteFile as requestDeleteFile } from \"../../../../core/requests/deleteFile\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteVersion = async (masterHandle, dir, version) => {\r\n    dir = cleanPath(dir);\r\n    await requestDeleteFile(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // only send the location, not the private key\r\n    version.handle.slice(0, 64)).catch(err => {\r\n        console.warn(\"version does not exist\");\r\n        console.warn(err);\r\n    });\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-version\",\r\n        payload: version\r\n    });\r\n};\r\nexport { deleteVersion };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { deleteVersion } from \"./deleteVersion\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFile = async (masterHandle, dir, file) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir);\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // precondition for if file is no longer in the metadata\r\n    if (!existingFile)\r\n        return;\r\n    for (let version of existingFile.versions) {\r\n        await deleteVersion(masterHandle, dir, version);\r\n    }\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n};\r\nexport { deleteFile };\r\n","import { createMetaQueue } from \"./createMetaQueue\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFolder = async (masterHandle, dir, folder) => {\r\n    dir = cleanPath(dir);\r\n    const fullDir = posix.join(dir, folder.name);\r\n    if (folder.name.indexOf(\"/\") > 0 || folder.name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    const meta = await masterHandle.getFolderMeta(fullDir).catch(console.warn);\r\n    if (meta) {\r\n        await Promise.all([\r\n            (async () => {\r\n                try {\r\n                    for (let folder of meta.folders) {\r\n                        await masterHandle.deleteFolder(fullDir, folder);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error(\"Failed to delete sub folders\");\r\n                    throw err;\r\n                }\r\n            })(),\r\n            (async () => {\r\n                try {\r\n                    for (let file of meta.files) {\r\n                        await masterHandle.deleteFile(fullDir, file);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error(\"Failed to delete file\");\r\n                    throw err;\r\n                }\r\n            })()\r\n        ]);\r\n    }\r\n    try {\r\n        await masterHandle.deleteFolderMeta(fullDir);\r\n    }\r\n    catch (err) {\r\n        console.error(\"Failed to delete meta entry\");\r\n        throw err;\r\n    }\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: folder\r\n    });\r\n};\r\nexport { deleteFolder };\r\n","import { deleteMetadata } from \"../../../../core/requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    // TODO: verify folder can only be changed by the creating account\r\n    await deleteMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // masterHandle.getFolderHDKey(dir),\r\n    masterHandle.getFolderLocation(dir));\r\n};\r\nexport { deleteFolderMeta };\r\n","import { FolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { getFolderMeta } from \"../v0/index\";\r\nconst login = async (masterHandle) => {\r\n    // try newer meta\r\n    try {\r\n        await masterHandle.getFolderMeta(\"/\");\r\n    }\r\n    catch (err) {\r\n        // try older meta\r\n        try {\r\n            const meta = await getFolderMeta(masterHandle, \"/\");\r\n            await masterHandle.deleteFolderMeta(\"/\").catch(console.warn);\r\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\r\n            console.info(\"--- META ---\", meta);\r\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta(meta));\r\n        }\r\n        catch (err) {\r\n            // no meta exists\r\n            // set meta to an empty meta\r\n            console.warn(err);\r\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\r\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta());\r\n        }\r\n    }\r\n};\r\nexport { login };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst moveFile = async (masterHandle, dir, { file, to }) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\r\n    if (!meta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!toMeta)\r\n        throw new Error(\"Can't move to folder that doesn't exist\");\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // file is no longer in the metadata\r\n    if (!existingFile)\r\n        throw new Error(\"File no longer exists\");\r\n    createMetaQueue(masterHandle, dir);\r\n    createMetaQueue(masterHandle, to);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n    masterHandle.metaQueue[to].push({\r\n        type: \"add-file\",\r\n        payload: existingFile\r\n    });\r\n};\r\nexport { moveFile };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { createFolderMeta } from \"./createFolderMeta\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst moveFolder = async (masterHandle, dir, { folder, to }) => {\r\n    dir = cleanPath(dir);\r\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(to, folder.name);\r\n    const folderMeta = await getFolderMeta(masterHandle, oldDir).catch(console.warn), outerMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\r\n    if (!folderMeta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!outerMeta)\r\n        throw new Error(\"Outer folder does not exist\");\r\n    if (!toMeta)\r\n        throw new Error(\"Can't move to folder that doesn't exist\");\r\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    const existingFolder = outerMeta.folders.find(f => folder === f || folder.name === f.name);\r\n    // folder is no longer in the metadata\r\n    if (!existingFolder)\r\n        throw new Error(\"File no longer exists\");\r\n    await createFolderMeta(masterHandle, newDir).catch(console.warn);\r\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\r\n    await deleteFolderMeta(masterHandle, oldDir);\r\n    createMetaQueue(masterHandle, dir);\r\n    createMetaQueue(masterHandle, to);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: existingFolder\r\n    });\r\n    masterHandle.metaQueue[to].push({\r\n        type: \"add-folder\",\r\n        payload: existingFolder\r\n    });\r\n};\r\nexport { moveFolder };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { FileEntryMeta } from \"../../file-entry\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst renameFile = async (masterHandle, dir, { file, name }) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\r\n    if (!meta)\r\n        throw new Error(\"Folder does not exist\");\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // file is no longer in the metadata\r\n    if (!existingFile)\r\n        throw new Error(\"File no longer exists\");\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-file\",\r\n        payload: new FileEntryMeta({\r\n            ...existingFile,\r\n            name\r\n        })\r\n    });\r\n};\r\nexport { renameFile };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { getFolderLocation } from \"./index\";\r\nimport { FolderEntryMeta } from \"../../folder-entry\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst renameFolder = async (masterHandle, dir, { folder, name }) => {\r\n    dir = cleanPath(dir);\r\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(dir, name);\r\n    const folderMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\r\n    if (!folderMeta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!meta)\r\n        throw new Error(\"Outer folder does not exist\");\r\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\r\n    // folder is no longer in the metadata\r\n    if (!existingFolder)\r\n        throw new Error(\"Folder no longer exists\");\r\n    await createFolder(masterHandle, dir, name);\r\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\r\n    await deleteFolderMeta(masterHandle, oldDir);\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: existingFolder\r\n    });\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-folder\",\r\n        payload: new FolderEntryMeta({\r\n            name,\r\n            location: getFolderLocation(masterHandle, newDir)\r\n        })\r\n    });\r\n};\r\nexport { renameFolder };\r\n","import { EventEmitter } from \"events\";\r\nimport Upload from \"../../../../upload\";\r\nimport { FileEntryMeta } from \"../../file-entry\";\r\nimport { FileVersion } from \"../../file-version\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst uploadFile = (masterHandle, dir, file) => {\r\n    dir = cleanPath(dir);\r\n    const upload = new Upload(file, masterHandle, masterHandle.uploadOpts), ee = new EventEmitter();\r\n    Object.assign(ee, { handle: upload.handle });\r\n    upload.on(\"upload-progress\", progress => {\r\n        ee.emit(\"upload-progress\", progress);\r\n    });\r\n    upload.on(\"error\", err => {\r\n        ee.emit(\"error\", err);\r\n    });\r\n    upload.on(\"finish\", async (finishedUpload) => {\r\n        if (!await getFolderMeta(masterHandle, dir).catch(console.warn))\r\n            await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\r\n        createMetaQueue(masterHandle, dir);\r\n        masterHandle.metaQueue[dir].push({\r\n            type: \"add-file\",\r\n            payload: new FileEntryMeta({\r\n                name: file.name,\r\n                modified: file.lastModified,\r\n                versions: [\r\n                    new FileVersion({\r\n                        handle: finishedUpload.handle,\r\n                        size: file.size,\r\n                        modified: file.lastModified\r\n                    })\r\n                ]\r\n            })\r\n        });\r\n        masterHandle.metaQueue[dir].once(\"update\", meta => {\r\n            ee.emit(\"finish\", finishedUpload);\r\n        });\r\n    });\r\n    return ee;\r\n};\r\nexport { uploadFile };\r\n","import { downloadFile } from \"../v0/downloadFile\";\r\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\r\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\r\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\r\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\r\nimport { getHandle } from \"../v0/getHandle\";\r\nimport { isPaid } from \"../v0/isPaid\";\r\nimport { register } from \"../v0/register\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { createFolderMeta } from \"./createFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { deleteFile } from \"./deleteFile\";\r\nimport { deleteFolder } from \"./deleteFolder\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { deleteVersion } from \"./deleteVersion\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { login } from \"./login\";\r\nimport { moveFile } from \"./moveFile\";\r\nimport { moveFolder } from \"./moveFolder\";\r\nimport { renameFile } from \"./renameFile\";\r\nimport { renameFolder } from \"./renameFolder\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { uploadFile } from \"./uploadFile\";\r\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getHandle, isPaid, register, createFolder, createFolderMeta, createMetaQueue, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, getFolderMeta, login, moveFile, moveFolder, renameFile, renameFolder, setFolderMeta, uploadFile };\r\n/**\r\n * internal API v1\r\n *\r\n * @internal\r\n */\r\nconst v1 = {\r\n    downloadFile,\r\n    generateSubHDKey,\r\n    getAccountInfo,\r\n    getFolderHDKey,\r\n    getFolderLocation,\r\n    getHandle,\r\n    isPaid,\r\n    register,\r\n    createFolder,\r\n    createFolderMeta,\r\n    createMetaQueue,\r\n    deleteFile,\r\n    deleteFolder,\r\n    deleteFolderMeta,\r\n    deleteVersion,\r\n    getFolderMeta,\r\n    login,\r\n    moveFile,\r\n    moveFolder,\r\n    renameFile,\r\n    renameFolder,\r\n    setFolderMeta,\r\n    uploadFile\r\n};\r\nexport default v1;\r\n","import { generateMnemonic, mnemonicToSeedSync, validateMnemonic, } from \"bip39\";\r\nimport HDKey, { fromMasterSeed } from \"hdkey\";\r\nimport * as namehash from \"eth-ens-namehash\";\r\nimport { hashToPath } from \"./utils/hashToPath\";\r\nimport { getFolderHDKey, uploadFile, deleteFile, deleteVersion, downloadFile, getFolderLocation, createFolderMeta, createFolder, deleteFolderMeta, deleteFolder, setFolderMeta, getFolderMeta, getAccountInfo, isPaid, login, register, generateSubHDKey, getHandle, moveFile, moveFolder, renameFile, renameFolder } from \"./core/account/api/v1/index\";\r\n/**\r\n * <b><i>this should never be shared or left in storage</i></b><br />\r\n *\r\n * a class for representing the account mnemonic\r\n *\r\n * @public\r\n */\r\nclass Account {\r\n    /**\r\n     * creates an account from a mnemonic if provided, otherwise from entropy\r\n     *\r\n     * @param mnemonic - the mnemonic to use for the account\r\n     */\r\n    constructor(mnemonic = generateMnemonic()) {\r\n        if (!validateMnemonic(mnemonic)) {\r\n            throw new Error(\"mnemonic provided was not valid\");\r\n        }\r\n        this._mnemonic = mnemonic;\r\n    }\r\n    get mnemonic() {\r\n        return this._mnemonic.trim().split(/\\s+/g);\r\n    }\r\n    get seed() {\r\n        return mnemonicToSeedSync(this._mnemonic);\r\n    }\r\n}\r\n/**\r\n * <b><i>this should never be shared or left in storage</i></b><br />\r\n *\r\n * a class for creating a master handle from an account mnemonic\r\n *\r\n * @remarks\r\n *\r\n * a master handle is responsible for:\r\n *  <br /> - logging in to an account\r\n *  <br /> - signing changes for the account\r\n *  <br /> - deterministic entropy for generating features of an account (such as folder keys)\r\n *\r\n * @public\r\n */\r\nclass MasterHandle extends HDKey {\r\n    /**\r\n     * creates a master handle from an account\r\n     *\r\n     * @param _ - the account to generate the handle from\r\n     * @param _.account - an {@link Account}\r\n     * @param _.handle - an account handle as a string\r\n     */\r\n    constructor({ account, handle, }, { uploadOpts = {}, downloadOpts = {} } = {}) {\r\n        super();\r\n        this.metaQueue = {};\r\n        this.metaFolderCreating = {};\r\n        /**\r\n         * creates a sub key seed for validating\r\n         *\r\n         * @param path - the string to use as a sub path\r\n         */\r\n        this.generateSubHDKey = (pathString) => generateSubHDKey(this, pathString);\r\n        this.uploadFile = (dir, file) => uploadFile(this, dir, file);\r\n        this.downloadFile = (handle) => downloadFile(this, handle);\r\n        /**\r\n         * deletes every version of a file and removes it from the metadata\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param file - file entry to delete (loosely matched name)\r\n         */\r\n        this.deleteFile = (dir, file) => deleteFile(this, dir, file);\r\n        /**\r\n         * deletes a single version of a file (ie. delete by handle)\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param version - version to delete (loosely matched by handle)\r\n         */\r\n        this.deleteVersion = (dir, version) => deleteVersion(this, dir, version);\r\n        /**\r\n         * creates a dir key seed for validating and folder navigation\r\n         *\r\n         * @param dir - the folder\r\n         */\r\n        this.getFolderHDKey = (dir) => getFolderHDKey(this, dir);\r\n        /**\r\n         * get the location (ie. metadata id) of a folder\r\n         *\r\n         * @remarks this is a deterministic location derived from the account's hdkey to allow for random folder access\r\n         *\r\n         * @param dir - the folder to locate\r\n         */\r\n        this.getFolderLocation = (dir) => getFolderLocation(this, dir);\r\n        /**\r\n         * request the creation of a folder metadata\r\n         *\r\n         * @param dir - the folder to create\r\n         */\r\n        this.createFolderMeta = async (dir) => createFolderMeta(this, dir);\r\n        /**\r\n         * create folder {name} inside of {dir}\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param name - the name of the new folder\r\n         */\r\n        this.createFolder = async (dir, name) => createFolder(this, dir, name);\r\n        this.deleteFolderMeta = async (dir) => deleteFolderMeta(this, dir);\r\n        this.deleteFolder = async (dir, folder) => deleteFolder(this, dir, folder);\r\n        this.moveFile = async (dir, { file, to }) => moveFile(this, dir, { file, to });\r\n        this.moveFolder = async (dir, { folder, to }) => moveFolder(this, dir, { folder, to });\r\n        this.renameFile = async (dir, { file, name }) => renameFile(this, dir, { file, name });\r\n        this.renameFolder = async (dir, { folder, name }) => renameFolder(this, dir, { folder, name });\r\n        this.setFolderMeta = async (dir, folderMeta) => setFolderMeta(this, dir, folderMeta);\r\n        this.getFolderMeta = async (dir) => getFolderMeta(this, dir);\r\n        this.getAccountInfo = async () => getAccountInfo(this);\r\n        this.isPaid = async () => isPaid(this);\r\n        this.login = async () => login(this);\r\n        this.register = async (duration, limit) => register(this, duration, limit);\r\n        this.uploadOpts = uploadOpts;\r\n        this.downloadOpts = downloadOpts;\r\n        if (account && account.constructor == Account) {\r\n            const path = \"m/43'/60'/1775'/0'/\" + hashToPath(namehash.hash(\"opacity.io\").replace(/^0x/, \"\"));\r\n            // ethereum/EIPs#1775\r\n            Object.assign(this, fromMasterSeed(account.seed).derive(path));\r\n        }\r\n        else if (handle && handle.constructor == String) {\r\n            this.privateKey = Buffer.from(handle.slice(0, 64), \"hex\");\r\n            this.chainCode = Buffer.from(handle.slice(64), \"hex\");\r\n        }\r\n        else {\r\n            throw new Error(\"master handle was not of expected type\");\r\n        }\r\n    }\r\n    /**\r\n     * get the account handle\r\n     */\r\n    get handle() {\r\n        return getHandle(this);\r\n    }\r\n}\r\nexport { Account, MasterHandle, HDKey };\r\n"],"names":["DEFAULT_OPTIONS","ForgeMd","ForgeRandom","ForgeUtil","Forge","ForgeCipher","ByteBuffer","createMetadata","EthUtil.keccak256","getFolderMeta","requestDeleteFile","deleteFile","namehash.hash"],"mappings":"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"}