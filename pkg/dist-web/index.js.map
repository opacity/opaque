{"version":3,"file":"index.js","sources":["../dist-src/streams/fileSourceStream.js","../dist-src/streams/bufferSourceStream.js","../dist-src/core/constants.js","../dist-src/core/helpers.js","../dist-src/core/encryption.js","../dist-src/core/metadata.js","../dist-src/streams/decryptStream.js","../dist-src/streams/downloadStream.js","../dist-src/download.js","../dist-src/streams/encryptStream.js","../dist-src/core/requests/getPlans.js","../dist-src/core/requests/checkPaymentStatus.js","../dist-src/core/requests/createAccount.js","../dist-src/core/requests/metadata.js","../dist-src/core/request.js","../dist-src/streams/uploadStream.js","../dist-src/upload.js","../dist-src/core/account/api/v0/downloadFile.js","../dist-src/core/hashing.js","../dist-src/utils/hashToPath.js","../dist-src/core/account/api/v0/generateSubHDKey.js","../dist-src/core/account/api/v0/getAccountInfo.js","../dist-src/utils/cleanPath.js","../dist-src/core/account/api/v0/getFolderHDKey.js","../dist-src/core/account/api/v0/getFolderLocation.js","../dist-src/core/account/api/v0/getFolderMeta.js","../dist-src/core/account/api/v0/getHandle.js","../dist-src/core/account/api/v0/isPaid.js","../dist-src/core/account/api/v0/register.js","../dist-src/core/account/api/v0/index.js","../dist-src/core/account/file-version.js","../dist-src/core/account/file-entry.js","../dist-src/core/account/folder-entry.js","../dist-src/core/account/folder-meta.js","../dist-src/utils/netQueue.js","../dist-src/core/account/api/v1/setFolderMeta.js","../dist-src/core/account/api/v1/meta/removeFile.js","../dist-src/core/account/api/v1/meta/removeVersion.js","../dist-src/core/account/api/v1/meta/addFile.js","../dist-src/core/account/api/v1/meta/addFolder.js","../dist-src/core/account/api/v1/meta/removeFolder.js","../dist-src/core/account/api/v1/createMetaQueue.js","../dist-src/core/account/api/v1/getFolderMeta.js","../dist-src/core/account/api/v1/buildFullTree.js","../dist-src/core/account/api/v1/createFolder.js","../dist-src/core/account/api/v1/createFolderMeta.js","../dist-src/core/requests/deleteFile.js","../dist-src/core/account/api/v1/deleteVersion.js","../dist-src/core/account/api/v1/deleteFile.js","../dist-src/core/account/api/v1/deleteFolder.js","../dist-src/core/account/api/v1/deleteFolderMeta.js","../dist-src/core/account/api/v1/isExpired.js","../dist-src/core/account/api/v1/login.js","../dist-src/core/account/api/v1/moveFile.js","../dist-src/core/account/api/v1/moveFolder.js","../dist-src/core/account/api/v1/renameFile.js","../dist-src/core/account/api/v1/renameFolder.js","../dist-src/core/requests/renewAccount.js","../dist-src/core/account/api/v1/renewAccount.js","../dist-src/core/requests/upgradeAccount.js","../dist-src/core/account/api/v1/upgradeAccount.js","../dist-src/core/account/api/v1/uploadFile.js","../dist-src/core/account/api/v1/index.js","../dist-src/account.js"],"sourcesContent":["import { Readable } from \"readable-stream\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    objectMode: false\n});\nexport default class FileSourceStream extends Readable {\n    constructor(blob, options) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        console.log(\"Starting file source stream\", blob);\n        super(opts);\n        this.offset = 0;\n        this.options = opts;\n        this.blob = blob;\n        this.reader = new FileReader();\n        this._onChunkRead = this._onChunkRead.bind(this);\n        if (opts.blockSize <= 0) {\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\n        }\n    }\n    _read() {\n        if (this.reader.readyState !== FileReader.LOADING) {\n            this._readChunkFromBlob();\n        }\n    }\n    _readChunkFromBlob() {\n        const blob = this.blob;\n        const offset = this.offset;\n        const blockSize = this.options.blockSize;\n        const limit = Math.min(offset + blockSize, blob.size);\n        // End stream when file is read in\n        if (offset >= blob.size) {\n            return this.push(null);\n        }\n        const chunk = blob.slice(offset, limit, \"application/octet-stream\");\n        this.offset += blockSize;\n        this.reader.onload = this._onChunkRead;\n        this.reader.readAsArrayBuffer(chunk);\n    }\n    _onChunkRead(event) {\n        const chunk = event.target.result;\n        if (this.push(new Uint8Array(chunk))) {\n            this._read();\n        }\n    }\n}\n","import { Readable } from \"readable-stream\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    objectMode: false\n});\nexport default class BufferSourceStream extends Readable {\n    constructor(data, options) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        super(opts);\n        this.offset = 0;\n        this.options = opts;\n        this.buffer = data.data;\n        if (opts.blockSize <= 0) {\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\n        }\n    }\n    _read() {\n        let read;\n        do {\n            read = this.push(this._readChunkFromBuffer());\n        } while (read);\n    }\n    _readChunkFromBuffer() {\n        const buf = this.buffer;\n        const offset = this.offset;\n        const blockSize = this.options.blockSize;\n        const limit = Math.min(offset + blockSize, buf.length) - offset;\n        // End stream when file is read in\n        if (offset >= buf.length) {\n            return null;\n        }\n        const slice = buf.slice(offset, offset + limit);\n        this.offset += blockSize;\n        return slice;\n    }\n}\n","export const FILENAME_MAX_LENGTH = 256;\nexport const CURRENT_VERSION = 1;\nexport const IV_BYTE_LENGTH = 16;\nexport const TAG_BYTE_LENGTH = 16;\nexport const TAG_BIT_LENGTH = TAG_BYTE_LENGTH * 8;\nexport const DEFAULT_BLOCK_SIZE = 64 * 1024;\nexport const BLOCK_OVERHEAD = TAG_BYTE_LENGTH + IV_BYTE_LENGTH;\nexport const DEFAULT_PART_SIZE = 128 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD);\n","import { md as ForgeMd, random as ForgeRandom, util as ForgeUtil } from \"node-forge\";\nimport isBuffer from \"is-buffer\";\nimport FileSourceStream from \"../streams/fileSourceStream\";\nimport BufferSourceStream from \"../streams/bufferSourceStream\";\nimport mime from \"mime/lite\";\nimport { FILENAME_MAX_LENGTH, BLOCK_OVERHEAD, DEFAULT_BLOCK_SIZE, DEFAULT_PART_SIZE } from \"./constants\";\nconst Forge = { md: ForgeMd, random: ForgeRandom, util: ForgeUtil };\nconst ByteBuffer = Forge.util.ByteBuffer;\n// Generate new handle, datamap entry hash and encryption key\n// TODO: Decide on format and derivation\nexport function generateFileKeys() {\n    const hash = Forge.md.sha256\n        .create()\n        .update(Forge.random.getBytesSync(32))\n        .digest().toHex();\n    const key = Forge.md.sha256\n        .create()\n        .update(Forge.random.getBytesSync(32))\n        .digest().toHex();\n    const handle = hash + key;\n    return {\n        hash,\n        key,\n        handle\n    };\n}\n// Return datamap hash and encryption key from handle\n// TODO: Decide on format and derivation\nexport function keysFromHandle(handle) {\n    const bytes = Forge.util.binary.hex.decode(handle);\n    const buf = new ByteBuffer(bytes);\n    const hash = buf.getBytes(32);\n    const key = buf.getBytes(32);\n    return {\n        hash: Forge.util.bytesToHex(hash),\n        key: Forge.util.bytesToHex(key),\n        handle\n    };\n}\nexport function sanitizeFilename(filename) {\n    if (filename.length > FILENAME_MAX_LENGTH) {\n        const l = (FILENAME_MAX_LENGTH / 2) - 2;\n        const start = filename.substring(0, l);\n        const end = filename.substring(filename.length - l);\n        filename = start + \"...\" + end;\n    }\n    return filename;\n}\n// Rudimentary format normalization\nexport function getFileData(file, nameFallback = \"file\") {\n    if (isBuffer(file)) {\n        file = file;\n        return {\n            data: file,\n            size: file.length,\n            name: nameFallback,\n            type: \"application/octet-stream\",\n            reader: BufferSourceStream\n        };\n    }\n    else if (file && file.data && isBuffer(file.data)) {\n        file = file;\n        return {\n            data: file.data,\n            size: file.data.length,\n            name: file.name || nameFallback,\n            type: file.type || mime.getType(file.name) || \"\",\n            reader: BufferSourceStream\n        };\n    }\n    else {\n        // TODO\n        file.reader = FileSourceStream;\n    }\n    return file;\n}\nexport function getMimeType(metadata) {\n    return metadata.type || mime.getType(metadata.name) || \"\";\n}\n// get true upload size, accounting for encryption overhead\nexport function getUploadSize(size, params) {\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\n    const blockCount = Math.ceil(size / blockSize);\n    return size + blockCount * BLOCK_OVERHEAD;\n}\n// get\nexport function getEndIndex(uploadSize, params) {\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\n    const partSize = params.partSize || DEFAULT_PART_SIZE;\n    const chunkSize = blockSize + BLOCK_OVERHEAD;\n    const chunkCount = Math.ceil(uploadSize / chunkSize);\n    const chunksPerPart = Math.ceil(partSize / chunkSize);\n    const endIndex = Math.ceil(chunkCount / chunksPerPart);\n    return endIndex;\n}\nexport function getBlockSize(params) {\n    if (params && params.blockSize) {\n        return params.blockSize;\n    }\n    else if (params && params.p && params.p.blockSize) {\n        return params.p.blockSize;\n    }\n    else {\n        return DEFAULT_BLOCK_SIZE;\n    }\n}\n","import { cipher as ForgeCipher, md as ForgeMd, util as ForgeUtil, random as ForgeRandom } from \"node-forge\";\nimport { IV_BYTE_LENGTH, TAG_BYTE_LENGTH, TAG_BIT_LENGTH, BLOCK_OVERHEAD } from \"./constants\";\nconst Forge = { cipher: ForgeCipher, md: ForgeMd, util: ForgeUtil, random: ForgeRandom };\nconst ByteBuffer = Forge.util.ByteBuffer;\n// Encryption\nexport function encrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    const iv = Forge.random.getBytesSync(IV_BYTE_LENGTH);\n    const cipher = Forge.cipher.createCipher(\"AES-GCM\", keyBuf);\n    cipher.start({\n        iv,\n        tagLength: TAG_BIT_LENGTH\n    });\n    cipher.update(byteBuffer);\n    cipher.finish();\n    byteBuffer.clear();\n    byteBuffer.putBuffer(cipher.output);\n    byteBuffer.putBuffer(cipher.mode.tag);\n    byteBuffer.putBytes(iv);\n    return byteBuffer;\n}\nexport function encryptString(key, string, encoding = \"utf8\") {\n    const buf = Forge.util.createBuffer(string, encoding);\n    return encrypt(key, buf);\n}\nexport function encryptBytes(key, bytes) {\n    return encrypt(key, Forge.util.createBuffer(bytes));\n}\n// Decryption\nexport function decrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    keyBuf.read = 0;\n    byteBuffer.read = byteBuffer.length() - BLOCK_OVERHEAD;\n    const tag = byteBuffer.getBytes(TAG_BYTE_LENGTH);\n    const iv = byteBuffer.getBytes(IV_BYTE_LENGTH);\n    const decipher = Forge.cipher.createDecipher(\"AES-GCM\", keyBuf);\n    byteBuffer.read = 0;\n    byteBuffer.truncate(BLOCK_OVERHEAD);\n    decipher.start({\n        iv,\n        // the type definitions are wrong in @types/node-forge\n        tag: tag,\n        tagLength: TAG_BIT_LENGTH\n    });\n    decipher.update(byteBuffer);\n    if (decipher.finish()) {\n        return decipher.output;\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptBytes(key, bytes) {\n    const buf = new ByteBuffer(bytes);\n    const output = decrypt(key, buf);\n    if (output) {\n        return Forge.util.binary.raw.decode(output.getBytes());\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptString(key, byteBuffer, encoding = \"utf8\") {\n    const output = decrypt(key, byteBuffer);\n    if (output) {\n        return Buffer.from(output.toString()).toString(encoding);\n    }\n    else {\n        throw new Error(\"unable to decrypt\");\n    }\n}\n","import { sanitizeFilename } from \"./helpers\";\nimport { encryptString, decryptString } from \"./encryption\";\nimport { util as ForgeUtil } from \"node-forge\";\nconst Forge = { util: ForgeUtil };\nconst PROTOCOL_VERSION = 1;\nexport function createMetadata(file, opts) {\n    const filename = sanitizeFilename(file.name);\n    const metadata = {\n        name: filename,\n        type: file.type,\n        size: file.size,\n        p: opts\n    };\n    return metadata;\n}\nexport function encryptMetadata(metadata, key) {\n    const encryptedMeta = encryptString(key, JSON.stringify(metadata), \"utf8\");\n    return Forge.util.binary.raw.decode(encryptedMeta.getBytes());\n}\nexport function decryptMetadata(data, key) {\n    const byteStr = Forge.util.binary.raw.encode(data);\n    const byteBuffer = new Forge.util.ByteBuffer(byteStr);\n    const meta = JSON.parse(decryptString(key, byteBuffer));\n    return meta;\n}\n","import { Transform } from \"readable-stream\";\nimport { decryptBytes } from \"../core/encryption\";\nimport { util as ForgeUtil } from \"node-forge\";\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\nimport { getBlockSize } from \"../core/helpers\";\nconst Forge = { util: ForgeUtil };\nconst DEFAULT_OPTIONS = Object.freeze({\n    binaryMode: false,\n    objectMode: true,\n    blockSize: DEFAULT_BLOCK_SIZE\n});\nexport default class DecryptStream extends Transform {\n    constructor(key, options) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        super(opts);\n        this.options = opts;\n        this.key = key;\n        this.iter = 0;\n        this.blockSize = getBlockSize(options);\n    }\n    _transform(chunk, encoding, callback) {\n        const blockSize = this.blockSize;\n        const chunkSize = blockSize + BLOCK_OVERHEAD;\n        const length = chunk.length;\n        for (let offset = 0; offset < length; offset += chunkSize) {\n            const limit = Math.min(offset + chunkSize, length);\n            const buf = chunk.slice(offset, limit);\n            const data = decryptBytes(this.key, buf);\n            if (data) {\n                this.push(data);\n            }\n            else {\n                this.emit(\"error\", \"Error decrypting data block\");\n            }\n        }\n        callback(null);\n    }\n}\n","import Axios from \"axios\";\nimport { Readable } from \"readable-stream\";\nimport { getBlockSize } from \"../core/helpers\";\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    autostart: true,\n    maxParallelDownloads: 1,\n    maxRetries: 0,\n    partSize: 80 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD),\n    objectMode: false\n});\nexport default class DownloadStream extends Readable {\n    constructor(url, metadata, size, options = {}) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        super(opts);\n        // Input\n        this.options = opts;\n        this.url = url;\n        this.size = size;\n        this.metadata = metadata;\n        // Internal\n        this.chunks = [];\n        this.chunkId = 0;\n        this.pushId = 0;\n        this.bytesDownloaded = 0;\n        this.isDownloadFinished = false;\n        this.ongoingDownloads = 0;\n        this.pushChunk = false;\n        const blockSize = getBlockSize(metadata);\n        const blockCount = opts.partSize / (blockSize + BLOCK_OVERHEAD);\n        if (blockCount !== Math.floor(blockCount)) {\n            this.emit(\"error\", \"options.partSize must be a multiple of blockSize + blockOverhead\");\n        }\n        if (opts.autostart) {\n            this._download();\n        }\n    }\n    _read() {\n        this.pushChunk = true;\n        const attemptDownload = this.ongoingDownloads < this.options.maxParallelDownloads;\n        if (!this.isDownloadFinished && attemptDownload) {\n            this._download();\n        }\n        this._pushChunk();\n    }\n    async _download(chunkIndex) {\n        const size = this.size;\n        const partSize = this.options.partSize;\n        const index = chunkIndex || this.chunks.length;\n        const offset = index * partSize;\n        // TODO: Make sure last byte works to prevent edge case\n        if (offset >= size) {\n            this.isDownloadFinished = true;\n            return;\n        }\n        const limit = Math.min(offset + partSize, size) - offset;\n        const range = `bytes=${offset}-${offset + limit - 1}`;\n        const chunk = {\n            id: this.chunkId++,\n            data: null,\n            offset,\n            limit\n        };\n        try {\n            this.chunks.push(chunk);\n            this.ongoingDownloads++;\n            const download = await Axios.get(this.url + \"/file\", {\n                responseType: \"arraybuffer\",\n                headers: {\n                    range\n                }\n            });\n            chunk.data = new Uint8Array(download.data);\n            this.bytesDownloaded += chunk.data.length;\n            this.ongoingDownloads--;\n            this.emit(\"progress\", this.bytesDownloaded / this.size);\n            this._pushChunk();\n        }\n        catch (error) {\n            this.ongoingDownloads--;\n            this.emit(\"error\", error);\n        }\n        return;\n    }\n    async _afterDownload() {\n    }\n    _pushChunk() {\n        if (!this.pushChunk) {\n            return;\n        }\n        const chunk = this.chunks[this.pushId];\n        if (chunk && chunk.data !== null) {\n            this.pushId++;\n            this.pushChunk = this.push(chunk.data);\n            chunk.data = null;\n            this._pushChunk();\n        }\n        else if (this.ongoingDownloads === 0 && this.isDownloadFinished) {\n            this.push(null);\n        }\n    }\n}\n","import Axios from \"axios\";\nimport { EventEmitter } from \"events\";\nimport { decryptMetadata } from \"./core/metadata\";\nimport { getMimeType, getUploadSize, keysFromHandle } from \"./core/helpers\";\nimport DecryptStream from \"./streams/decryptStream\";\nimport DownloadStream from \"./streams/downloadStream\";\nconst METADATA_PATH = \"/download/metadata/\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    autoStart: true\n});\n/**\n * @internal\n */\nexport default class Download extends EventEmitter {\n    constructor(handle, opts = {}) {\n        super();\n        this.metadata = async () => {\n            if (this._metadata) {\n                return this._metadata;\n            }\n            else {\n                return await this.downloadMetadata();\n            }\n        };\n        this.toBuffer = async () => {\n            const chunks = [];\n            let totalLength = 0;\n            if (typeof Buffer === \"undefined\") {\n                return false;\n            }\n            await this.startDownload();\n            return new Promise(resolve => {\n                this.decryptStream.on(\"data\", (data) => {\n                    chunks.push(data);\n                    totalLength += data.length;\n                });\n                this.decryptStream.once(\"finish\", () => {\n                    resolve(Buffer.concat(chunks, totalLength));\n                });\n            }).catch(err => {\n                throw err;\n            });\n        };\n        this.toFile = async () => {\n            const chunks = [];\n            let totalLength = 0;\n            await this.startDownload();\n            return new Promise(resolve => {\n                this.decryptStream.on(\"data\", (data) => {\n                    chunks.push(data);\n                    totalLength += data.length;\n                });\n                this.decryptStream.once(\"finish\", async () => {\n                    const meta = await this.metadata();\n                    resolve(new File(chunks, meta.name, {\n                        type: getMimeType(meta)\n                    }));\n                });\n            }).catch(err => {\n                throw err;\n            });\n        };\n        this.startDownload = async () => {\n            try {\n                await this.getDownloadURL();\n                await this.downloadMetadata();\n                await this.downloadFile();\n            }\n            catch (e) {\n                this.propagateError(e);\n            }\n        };\n        this.getDownloadURL = async (overwrite = false) => {\n            let req;\n            if (!overwrite && this.downloadURLRequest) {\n                req = this.downloadURLRequest;\n            }\n            else {\n                req = Axios.post(this.options.endpoint + \"/api/v1/download\", {\n                    fileID: this.hash\n                });\n                this.downloadURLRequest = req;\n            }\n            const res = await req;\n            if (res.status === 200) {\n                this.downloadURL = res.data.fileDownloadUrl;\n                return this.downloadURL;\n            }\n        };\n        this.downloadMetadata = async (overwrite = false) => {\n            let req;\n            if (!this.downloadURL) {\n                await this.getDownloadURL();\n            }\n            if (!overwrite && this.metadataRequest) {\n                req = this.metadataRequest;\n            }\n            else {\n                const endpoint = this.options.endpoint;\n                const path = METADATA_PATH + this.hash;\n                req = Axios.get(this.downloadURL + \"/metadata\", {\n                    responseType: \"arraybuffer\"\n                });\n                this.metadataRequest = req;\n            }\n            const res = await req;\n            const metadata = decryptMetadata(new Uint8Array(res.data), this.key);\n            this._metadata = metadata;\n            this.size = getUploadSize(metadata.size, metadata.p || {});\n            return metadata;\n        };\n        this.downloadFile = async () => {\n            if (this.isDownloading) {\n                return true;\n            }\n            this.isDownloading = true;\n            this.downloadStream = new DownloadStream(this.downloadURL, await this.metadata, this.size, this.options);\n            this.decryptStream = new DecryptStream(this.key);\n            this.downloadStream.on(\"progress\", progress => {\n                this.emit(\"download-progress\", {\n                    target: this,\n                    handle: this.handle,\n                    progress: progress\n                });\n            });\n            this.downloadStream\n                .pipe(this.decryptStream);\n            this.downloadStream.on(\"error\", this.propagateError);\n            this.decryptStream.on(\"error\", this.propagateError);\n        };\n        this.finishDownload = (error) => {\n            if (error) {\n                this.propagateError(error);\n            }\n            else {\n                this.emit(\"finish\");\n            }\n        };\n        this.propagateError = (error) => {\n            console.warn(\"Download error: \", error.message || error);\n            process.nextTick(() => this.emit(\"error\", error.message || error));\n        };\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\n        const { hash, key } = keysFromHandle(handle);\n        this.options = options;\n        this.handle = handle;\n        this.hash = hash;\n        this.key = key;\n        this.downloadURLRequest = null;\n        this.metadataRequest = null;\n        this.isDownloading = false;\n        if (options.autoStart) {\n            this.startDownload();\n        }\n    }\n}\n","import { Transform } from \"readable-stream\";\nimport { encryptBytes } from \"../core/encryption\";\nimport { util as ForgeUtil } from \"node-forge\";\nconst Forge = { util: ForgeUtil };\nconst DEFAULT_OPTIONS = Object.freeze({\n    objectMode: false\n});\nexport default class EncryptStream extends Transform {\n    constructor(key, options) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        super(opts);\n        this.options = opts;\n        this.key = key;\n    }\n    _transform(data, encoding, callback) {\n        const chunk = encryptBytes(this.key, data);\n        const buf = Forge.util.binary.raw.decode(chunk.getBytes());\n        this.push(buf);\n        callback(null);\n    }\n}\n","import Axios from \"axios\";\n/**\n * get a list of available plans\n *\n * @param endpoint\n *\n * @internal\n */\nexport async function getPlans(endpoint) {\n    return Axios.get(endpoint + \"/plans\");\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check whether a payment has gone through for an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to check\n *\n * @internal\n */\nexport async function checkPaymentStatus(endpoint, hdNode) {\n    const payload = {\n        timestamp: Math.floor(Date.now() / 1000)\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/account-data\", signedPayload);\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request the creation of an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKey\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function createAccount(endpoint, hdNode, metadataKey, duration = 12, limit = 128) {\n    const payload = {\n        metadataKey: metadataKey,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/accounts\", signedPayload);\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request creating a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function createMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/create\", signedPayload);\n}\n/**\n * request deleting a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function deleteMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/delete\", signedPayload);\n}\n/**\n * request changing a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n * @param metadata - the metadata to put\n *\n * @internal\n */\nexport async function setMetadata(endpoint, hdNode, metadataKey, metadata) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadata, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/set\", signedPayload);\n}\n/**\n * request get of a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function getMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/get\", signedPayload);\n}\n","import FormDataNode from \"form-data\";\nimport * as EthUtil from \"ethereumjs-util\";\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\n/**\n * get a signed payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param hdNode = the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayload(rawPayload, hdNode, key = \"requestBody\") {\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    const signedPayload = {\n        signature,\n        publicKey: pubKey,\n        hash: hash.toString(\"hex\")\n    };\n    signedPayload[key] = payload;\n    return signedPayload;\n}\n/**\n * get a signed formdata payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param extraPayload - additional (unsigned) payload information\n * @param hdNode - the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayloadFD(rawPayload, extraPayload, hdNode, key = \"requestBody\") {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    // node, buffers\n    if (POLYFILL_FORMDATA) {\n        const data = new FormDataNode();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        // data.append(\"hash\", hash);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                const pl = Buffer.from(extraPayload[key]);\n                data.append(key, pl, {\n                    filename: key,\n                    contentType: \"application/octet-stream\",\n                    knownLength: pl.length\n                });\n            });\n        }\n        return data;\n    }\n    else {\n        const data = new FormData();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                data.append(key, new Blob([extraPayload[key].buffer]), key);\n            });\n        }\n        return data;\n    }\n}\nexport { getPlans } from \"./requests/getPlans\";\nexport { checkPaymentStatus } from \"./requests/checkPaymentStatus\";\nexport { createAccount } from \"./requests/createAccount\";\nexport { getMetadata, setMetadata, createMetadata, deleteMetadata } from \"./requests/metadata\";\n","import Axios from \"axios\";\nimport { Writable } from \"readable-stream\";\nimport { getPayload, getPayloadFD } from \"../core/request\";\nimport { getEndIndex } from \"../core/helpers\";\nimport { DEFAULT_PART_SIZE } from \"../core/constants\";\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\nconst PART_MIME = \"application/octet-stream\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    maxParallelUploads: 3,\n    maxRetries: 0,\n    partSize: DEFAULT_PART_SIZE,\n    objectMode: false\n});\nexport default class UploadStream extends Writable {\n    constructor(account, hash, size, endpoint, options) {\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n        super(opts);\n        // Input\n        this.account = account;\n        this.hash = hash;\n        this.endpoint = endpoint;\n        this.options = opts;\n        this.size = size;\n        this.endIndex = getEndIndex(size, opts);\n        // Internal\n        this.bytesUploaded = 0;\n        this.blockBuffer = [];\n        this.partBuffer = [];\n        this.bufferSize = 0;\n        this.ongoingUploads = 0;\n        this.retries = 0;\n        this.partIndex = 0;\n        this.finalCallback = null;\n    }\n    _write(data, encoding, callback) {\n        this.blockBuffer.push(data);\n        this.bufferSize += data.length;\n        if (this.bufferSize >= this.options.partSize) {\n            this._addPart();\n            this._attemptUpload();\n        }\n        callback();\n    }\n    _final(callback) {\n        this.finalCallback = callback;\n        if (this.blockBuffer.length > 0) {\n            this._addPart();\n            this._attemptUpload();\n        }\n        else if (this.ongoingUploads === 0) {\n            this._finishUpload();\n        }\n    }\n    // Flatten inputs into a single ArrayBuffer for sending\n    _addPart() {\n        const blocks = this.blockBuffer;\n        const data = new Uint8Array(this.bufferSize);\n        let offset = 0;\n        do {\n            const block = blocks.shift();\n            data.set(block, offset);\n            offset += block.length;\n        } while (blocks.length > 0);\n        this.partBuffer.push({\n            partIndex: ++this.partIndex,\n            data\n        });\n        this.blockBuffer = [];\n        this.bufferSize = 0;\n    }\n    _attemptUpload() {\n        if (this.ongoingUploads >= this.options.maxParallelUploads) {\n            return;\n        }\n        const part = this.partBuffer.shift();\n        this._upload(part);\n    }\n    _upload(part) {\n        this.ongoingUploads++;\n        // Cork stream when busy\n        if (this.ongoingUploads === this.options.maxParallelUploads) {\n            this.cork();\n        }\n        const data = getPayloadFD({\n            fileHandle: this.hash,\n            partIndex: part.partIndex,\n            endIndex: this.endIndex\n        }, {\n            chunkData: part.data\n        }, this.account);\n        const upload = Axios.post(this.endpoint + \"/api/v1/upload\", data, {\n            headers: data.getHeaders ? data.getHeaders() : {},\n            onUploadProgress: (event) => {\n                return;\n            }\n        })\n            .then(result => {\n            this._afterUpload(part);\n        })\n            .catch(error => {\n            this._uploadError(error, part);\n        });\n    }\n    _afterUpload(part) {\n        this.ongoingUploads--;\n        this.bytesUploaded += part.data.length;\n        this.emit(\"progress\", this.bytesUploaded / this.size);\n        // Upload until done\n        if (this.partBuffer.length > 0) {\n            return this._attemptUpload();\n        }\n        if (this.finalCallback) {\n            // Finish\n            if (this.ongoingUploads === 0) {\n                this._finishUpload();\n            }\n        }\n        else {\n            // Continue\n            process.nextTick(() => this.uncork());\n        }\n    }\n    async _finishUpload() {\n        const confirmUpload = this._confirmUpload.bind(this);\n        const data = getPayload({\n            fileHandle: this.hash\n        }, this.account);\n        let uploadFinished = false;\n        do {\n            uploadFinished = await confirmUpload(data);\n            if (!uploadFinished) {\n                await new Promise(resolve => setTimeout(resolve, 5000));\n            }\n        } while (!uploadFinished);\n        this.finalCallback();\n    }\n    async _confirmUpload(data) {\n        try {\n            const req = Axios.post(this.endpoint + \"/api/v1/upload-status\", data);\n            const res = await req;\n            if (!res.data.missingIndexes || !res.data.missingIndexes.length) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        catch (err) {\n            console.warn(err.message || err);\n            return false;\n        }\n    }\n    _uploadError(error, part) {\n        this.ongoingUploads--;\n        console.warn(\"error\", error);\n        if (this.retries++ < this.options.maxRetries) {\n            console.log(\"retrying\", this.retries, \"of\", this.options.maxRetries);\n            this.partBuffer.push(part);\n            this._attemptUpload();\n            return;\n        }\n        if (this.finalCallback) {\n            this.finalCallback(error);\n        }\n        else {\n            this.emit(\"error\", error);\n            this.end();\n        }\n    }\n}\n","import Axios from \"axios\";\nimport { EventEmitter } from \"events\";\nimport { createMetadata, encryptMetadata } from \"./core/metadata\";\nimport { generateFileKeys, getUploadSize, getFileData, getEndIndex } from \"./core/helpers\";\nimport EncryptStream from \"./streams/encryptStream\";\nimport UploadStream from \"./streams/uploadStream\";\nimport { getPayloadFD } from \"./core/request\";\nconst PART_MIN_SIZE = 1024 * 1024 * 5;\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\nconst DEFAULT_OPTIONS = Object.freeze({\n    autoStart: true\n});\nconst DEFAULT_FILE_PARAMS = {\n    blockSize: 64 * 1024,\n};\n/**\n * @internal\n */\nexport default class Upload extends EventEmitter {\n    constructor(file, account, opts = {}) {\n        super();\n        this.startUpload = async () => {\n            try {\n                await this.uploadMetadata();\n                await this.uploadFile();\n            }\n            catch (e) {\n                this.propagateError(e);\n            }\n        };\n        this.uploadMetadata = async () => {\n            const meta = createMetadata(this.data, this.options.params);\n            const encryptedMeta = encryptMetadata(meta, this.key);\n            const data = getPayloadFD({\n                fileHandle: this.hash,\n                fileSizeInByte: this.uploadSize,\n                endIndex: getEndIndex(this.uploadSize, this.options.params)\n            }, {\n                metadata: encryptedMeta\n            }, this.account);\n            const url = this.options.endpoint + \"/api/v1/init-upload\";\n            const headers = data.getHeaders ? data.getHeaders() : {};\n            const req = Axios.post(url, data, { headers });\n            const res = await req;\n            this.emit(\"metadata\", meta);\n        };\n        this.uploadFile = async () => {\n            const readStream = new this.data.reader(this.data, this.options.params);\n            this.readStream = readStream;\n            this.encryptStream = new EncryptStream(this.key, this.options.params);\n            this.uploadStream = new UploadStream(this.account, this.hash, this.uploadSize, this.options.endpoint, this.options.params);\n            this.uploadStream.on(\"progress\", progress => {\n                this.emit(\"upload-progress\", {\n                    target: this,\n                    handle: this.handle,\n                    progress\n                });\n            });\n            this.readStream\n                .pipe(this.encryptStream)\n                .pipe(this.uploadStream)\n                .on(\"finish\", this.finishUpload);\n            this.readStream.on(\"error\", this.propagateError);\n            this.encryptStream.on(\"error\", this.propagateError);\n            this.uploadStream.on(\"error\", this.propagateError);\n        };\n        this.finishUpload = async () => {\n            this.emit(\"finish\", {\n                target: this,\n                handle: this.handle,\n                metadata: this.metadata\n            });\n        };\n        this.propagateError = (error) => {\n            process.nextTick(() => this.emit(\"error\", error));\n        };\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\n        options.params = Object.assign({}, DEFAULT_FILE_PARAMS, options.params || {});\n        const { handle, hash, key } = generateFileKeys();\n        const data = getFileData(file, handle);\n        const size = getUploadSize(data.size, options.params);\n        this.account = account;\n        this.options = options;\n        this.data = data;\n        this.uploadSize = size;\n        this.key = key; // Encryption key\n        this.hash = hash; // Datamap entry hash\n        this.handle = handle; // File handle - hex(hash) + hex(key)\n        this.metadata = createMetadata(data, options.params);\n        if (options.autoStart) {\n            this.startUpload();\n        }\n    }\n}\n","import Download from \"../../../../download\";\nconst downloadFile = (masterHandle, handle) => {\n    return new Download(handle, masterHandle.downloadOpts);\n};\nexport { downloadFile };\n","import { soliditySha3 } from \"web3-utils\";\nexport const hash = (...val) => {\n    return soliditySha3(...val).replace(/^0x/, \"\");\n};\n","const hashToPath = (h, { prefix = false } = {}) => {\n    if (h.length % 4) {\n        throw new Error(\"hash length must be multiple of two bytes\");\n    }\n    return (prefix ? \"m/\" : \"\") + h.match(/.{1,4}/g).map(p => parseInt(p, 16)).join(\"'/\") + \"'\";\n};\nexport { hashToPath };\n","import { hash } from \"../../../../core/hashing\";\nimport { hashToPath } from \"../../../../utils/hashToPath\";\nconst generateSubHDKey = (masterHandle, pathString) => {\n    const path = hashToPath(hash(pathString), { prefix: true });\n    return masterHandle.derive(path);\n};\nexport { generateSubHDKey };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst getAccountInfo = async (masterHandle) => ((await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data.account);\nexport { getAccountInfo };\n","// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nconst posixSep = new RegExp(posix.sep + \"+\", \"g\");\nconst posixSepEnd = new RegExp(\"(.)\" + posix.sep + \"+$\");\n// NOTE: win32 isn't included in the polyfill\nconst win32Sep = new RegExp(\"\\\\+\", \"g\");\nconst trimTrailingSep = (path) => {\n    return path.replace(posixSepEnd, \"$1\");\n};\nconst cleanPath = (path) => {\n    return trimTrailingSep(path.replace(win32Sep, posix.sep).replace(posixSep, posix.sep));\n};\nexport { cleanPath };\n","import { generateSubHDKey } from \"./generateSubHDKey\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderHDKey = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return generateSubHDKey(masterHandle, \"folder: \" + dir);\n};\nexport { getFolderHDKey };\n","import { hash } from \"../../../../core/hashing\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderLocation = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return hash(masterHandle.getFolderHDKey(dir).publicKey.toString(\"hex\"));\n};\nexport { getFolderLocation };\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        // TODO\n        // I have no idea why but the decrypted is correct hex without converting\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"hex\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return meta;\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","const getHandle = (masterHandle) => {\n    return masterHandle.privateKey.toString(\"hex\") + masterHandle.chainCode.toString(\"hex\");\n};\nexport { getHandle };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isPaid = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"paid\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isPaid };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nimport { createAccount } from \"../../../../core/requests/createAccount\";\nconst register = async (masterHandle, duration, limit) => {\n    if (await masterHandle.isPaid()) {\n        return {\n            data: { invoice: { cost: 0, ethAddress: \"0x0\" } },\n            waitForPayment: async () => ({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data })\n        };\n    }\n    const createAccountResponse = await createAccount(masterHandle.uploadOpts.endpoint, masterHandle, masterHandle.getFolderLocation(\"/\"), duration, limit);\n    return {\n        data: createAccountResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                if (await masterHandle.isPaid() && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { register };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getFolderMeta } from \"../v0/getFolderMeta\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isPaid, register };\n/**\n * internal API v0\n *\n * @internal\n */\nconst v0 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getFolderMeta,\n    getHandle,\n    isPaid,\n    register\n};\nexport default v0;\n","/**\n * metadata to describe a version of a file as it relates to a filesystem\n *\n * @public\n */\nclass FileVersion {\n    /**\n     * create metadata for a file version\n     *\n     * @param handle - the file handle\n     * @param size - the size of the file in bytes\n     * @param created - the date this version was uploaded\n     * @param modified - the date the filesystem marked as last modified\n     */\n    constructor({ handle, size, created = Date.now(), modified = Date.now() }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileVersion([\n            this.handle,\n            this.size,\n            this.created,\n            this.modified\n        ]);\n        this.handle = handle;\n        this.size = size;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileVersion extends Array {\n    constructor([handle, size, created, modified]) {\n        super(4);\n        this.unminify = () => new FileVersion({\n            handle: this[0],\n            size: this[1],\n            created: this[2],\n            modified: this[3]\n        });\n        this[0] = handle;\n        this[1] = size;\n        this[2] = created;\n        this[3] = modified;\n    }\n}\nexport { FileVersion, MinifiedFileVersion };\n","import { FileVersion, MinifiedFileVersion } from \"./file-version\";\n/**\n * metadata to describe a file as it relates to the UI\n *\n * @public\n */\nclass FileEntryMeta {\n    /**\n     * create metadata for a file entry in the UI\n     *\n     * @param name - the name of the file as shown in the UI\n     * @param created - the date in `ms` that this file was initially uploaded\n     * @param created - the date in `ms` that the newest version of this file was uploaded\n     * @param versions - versions of the uploaded file (the most recent of which should be the current version of the file)\n     */\n    constructor({ name, created = Date.now(), modified = Date.now(), versions = [] }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileEntryMeta([\n            this.name,\n            this.created,\n            this.modified,\n            this.versions.map(version => new FileVersion(version).minify())\n        ]);\n        this.name = name;\n        this.created = created;\n        this.modified = modified;\n        this.versions = versions;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileEntryMeta extends Array {\n    constructor([name, created, modified, versions]) {\n        super(4);\n        this.unminify = () => new FileEntryMeta({\n            name: this[0],\n            created: this[1],\n            modified: this[2],\n            versions: this[3].map(version => new MinifiedFileVersion(version).unminify())\n        });\n        this[0] = name;\n        this[1] = created;\n        this[2] = modified;\n        this[3] = versions;\n    }\n}\nexport { FileEntryMeta, MinifiedFileEntryMeta };\n","/**\n * metadata to describe where a folder can be found (for root metadata of an account)\n *\n * @public\n */\nclass FolderEntryMeta {\n    /**\n     * create metadata entry for a folder\n     *\n     * @param name - a name of the folder shown in the UI\n     * @param location - the public key for the metadata file\n     *   it is how the file will be queried for (using the same system as for the account metadata)\n     */\n    constructor({ name, location }) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderEntryMeta([\n            this.name,\n            this.location\n        ]);\n        this.name = name;\n        this.location = location;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderEntryMeta extends Array {\n    constructor([name, location]) {\n        super(2);\n        this.unminify = () => new FolderEntryMeta({\n            name: this[0],\n            location: this[1]\n        });\n        this[0] = name;\n        this[1] = location;\n    }\n}\nexport { FolderEntryMeta, MinifiedFolderEntryMeta };\n","import { FileEntryMeta, MinifiedFileEntryMeta } from \"./file-entry\";\nimport { FolderEntryMeta, MinifiedFolderEntryMeta } from \"./folder-entry\";\n/**\n * metadata to describe a folder for the UI\n *\n * @public\n */\nclass FolderMeta {\n    /**\n     * create metadata for a folder\n     *\n     * @param name - a nickname shown on the folder when accessed without adding to account metadata\n     * @param files - the files included only in the most shallow part of the folder\n     * @param created - when the folder was created (if not created now) in `ms`\n     * @param created - when the folder was changed (if not modified now) in `ms`\n     */\n    constructor({ name = \"Folder\", files = [], folders = [], created = Date.now(), modified = Date.now() } = {}) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderMeta([\n            this.name,\n            this.files.map(file => new FileEntryMeta(file).minify()),\n            this.folders.map(folder => new FolderEntryMeta(folder).minify()),\n            this.created,\n            this.modified\n        ]);\n        this.name = name;\n        this.files = files;\n        this.folders = folders;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderMeta extends Array {\n    constructor([name, files, folders, created, modified]) {\n        super(5);\n        this.unminify = () => new FolderMeta({\n            name: this[0],\n            files: this[1].map(file => new MinifiedFileEntryMeta(file).unminify()),\n            folders: this[2].map(folder => new MinifiedFolderEntryMeta(folder).unminify()),\n            created: this[3],\n            modified: this[4]\n        });\n        this[0] = name;\n        this[1] = files;\n        this[2] = folders;\n        this[3] = created;\n        this[4] = modified;\n    }\n}\nexport { FolderMeta, MinifiedFolderMeta };\n","import { EventEmitter } from \"events\";\nimport debounce from \"debounce\";\nclass NetQueue extends EventEmitter {\n    constructor({ fetch, update, data = {}, timeout = 1000 }) {\n        super();\n        this.updating = false;\n        this.queue = [];\n        this.types = {};\n        this.data = {};\n        this.push = ({ type, payload }) => {\n            this.queue.push({ type, payload });\n            this._process();\n        };\n        this.addType = ({ type, handler }) => {\n            this.types[type] = handler;\n        };\n        this._process = debounce(async () => {\n            if (this.updating)\n                return;\n            this.updating = true;\n            const queueCopy = Object.assign([], this.queue);\n            this.result = await Promise.resolve(this._fetch());\n            for (let { type, payload } of queueCopy) {\n                if (this.types[type])\n                    this.result = await Promise.resolve(this.types[type](this.result, payload));\n                else\n                    throw new Error(\"unknown type: \" + type);\n                this.queue.shift();\n            }\n            await Promise.resolve(this._update(this.result));\n            this.updating = false;\n            this.emit(\"update\", this.result);\n            if (this.queue.length)\n                this._process();\n        }, this._timeout);\n        this._fetch = fetch;\n        this._update = update;\n        this.data = data;\n        this._timeout = timeout;\n    }\n}\nexport { NetQueue };\n","import { hash } from \"../../../hashing\";\nimport { encryptString } from \"../../../encryption\";\nimport { setMetadata } from \"../../../requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst setFolderMeta = async (masterHandle, dir, folderMeta) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), key = hash(folderKey.privateKey.toString(\"hex\")), metaString = JSON.stringify(folderMeta.minify()), encryptedMeta = Buffer.from(encryptString(key, metaString, \"utf8\").toHex(), \"hex\").toString(\"base64\");\n    // TODO: verify folder can only be changed by the creating account\n    await setMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir), encryptedMeta);\n};\nexport { setFolderMeta };\n","const removeFile = async (metaQueue, meta, file) => {\n    // precondition for if file is no longer in the metadata\n    if (!meta.files.find(f => file === f || file.name === f.name))\n        return meta;\n    meta.files = meta.files.filter(f => file !== f && file.name !== f.name);\n    return meta;\n};\nexport { removeFile };\n","const removeVersion = async (metaQueue, meta, version) => {\n    const file = meta.files.find(f => f.versions.includes(version) || !!f.versions.find(v => version.handle === v.handle));\n    // precondition for if version no longer exists in meta\n    if (!file)\n        return meta;\n    file.versions = file.versions.filter(v => version !== v && version.handle !== v.handle);\n    if (file.versions.length === 0)\n        metaQueue.push({\n            type: \"remove-file\",\n            payload: file\n        });\n    return meta;\n};\nexport { removeVersion };\n","const addFile = (metaQueue, meta, file) => {\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    if (existingFile) {\n        existingFile.modified = file.modified;\n        existingFile.versions = [...existingFile.versions, ...file.versions];\n    }\n    else {\n        meta.files.push(file);\n    }\n    return meta;\n};\nexport { addFile };\n","const addFolder = (metaQueue, meta, folder) => {\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    if (!existingFolder)\n        meta.folders.push(folder);\n    return meta;\n};\nexport { addFolder };\n","const removeFolder = async (metaQueue, meta, folder) => {\n    // precondition for if folder is no longer in the metadata\n    if (!meta.folders.find(f => folder === f || folder.name === f.name))\n        return meta;\n    meta.folders = meta.folders.filter(f => folder !== f && folder.name !== f.name);\n    return meta;\n};\nexport { removeFolder };\n","import { NetQueue } from \"../../../../utils/netQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { removeFile } from \"./meta/removeFile\";\nimport { removeVersion } from \"./meta/removeVersion\";\nimport { addFile } from \"./meta/addFile\";\nimport { addFolder } from \"./meta/addFolder\";\nimport { removeFolder } from \"./meta/removeFolder\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createMetaQueue = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    if (masterHandle.metaQueue[dir])\n        return;\n    const metaQueue = new NetQueue({\n        fetch: async () => {\n            return getFolderMeta(masterHandle, dir);\n        },\n        update: async (meta) => {\n            await setFolderMeta(masterHandle, dir, meta);\n        }\n    });\n    const types = [\n        { type: \"add-folder\", action: addFolder },\n        { type: \"add-file\", action: addFile },\n        { type: \"remove-folder\", action: removeFolder },\n        { type: \"remove-file\", action: removeFile },\n        { type: \"remove-version\", action: removeVersion }\n    ];\n    for (let type of types) {\n        metaQueue.addType({\n            type: type.type,\n            handler: async (meta, payload) => {\n                return await type.action(metaQueue, meta, payload);\n            }\n        });\n    }\n    masterHandle.metaQueue[dir] = metaQueue;\n};\nexport { createMetaQueue };\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { MinifiedFolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    createMetaQueue(masterHandle, dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"base64\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return new MinifiedFolderMeta(meta).unminify();\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst buildFullTree = async (masterHandle, dir = \"/\") => {\n    dir = cleanPath(dir);\n    const tree = {};\n    tree[dir] = await getFolderMeta(masterHandle, dir);\n    await Promise.all(tree[dir].folders.map(async (folder) => {\n        Object.assign(tree, await buildFullTree(masterHandle, posix.join(dir, folder.name)));\n    }));\n    return tree;\n};\nexport { buildFullTree };\n","import { FolderEntryMeta } from \"../../../../core/account/folder-entry\";\nimport { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\n// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderFn = async (masterHandle, dir, name) => {\n    const fullDir = posix.join(dir, name);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    // recurively create containing folders first\n    if (!await masterHandle.getFolderMeta(dir).catch(console.warn))\n        await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n    if (await masterHandle.getFolderMeta(fullDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    // initialize as empty folder\n    await masterHandle.createFolderMeta(fullDir).catch(console.warn);\n    await masterHandle.setFolderMeta(fullDir, new FolderMeta({ name }));\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: masterHandle.getFolderLocation(fullDir)\n        })\n    });\n};\nconst createFolder = async (masterHandle, dir, name) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, name);\n    if (masterHandle.metaFolderCreating[fullDir]) {\n        // TODO: this is hacky\n        await new Promise(resolve => {\n            const interval = setInterval(() => {\n                if (!masterHandle.metaFolderCreating[fullDir]) {\n                    resolve();\n                    clearInterval(interval);\n                }\n            }, 250);\n        });\n        return;\n    }\n    masterHandle.metaFolderCreating[fullDir] = true;\n    await createFolderFn(masterHandle, dir, name);\n    masterHandle.metaFolderCreating[fullDir] = false;\n};\nexport { createFolder };\n","import { createMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    try {\n        // TODO: verify folder can only be changed by the creating account\n        await createMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n        // masterHandle.getFolderHDKey(dir),\n        masterHandle.getFolderLocation(dir));\n    }\n    catch (err) {\n        console.error(`Can't create folder metadata for folder ${dir}`);\n        throw err;\n    }\n};\nexport { createFolderMeta };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n// Metadata as hexstring as of right now\nexport async function deleteFile(endpoint, hdNode, fileID) {\n    const payload = { fileID };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/delete\", signedPayload);\n}\n","import { deleteFile as requestDeleteFile } from \"../../../../core/requests/deleteFile\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteVersion = async (masterHandle, dir, version) => {\n    dir = cleanPath(dir);\n    await requestDeleteFile(masterHandle.uploadOpts.endpoint, masterHandle, \n    // only send the location, not the private key\n    version.handle.slice(0, 64)).catch(err => {\n        console.warn(\"version does not exist\");\n        console.warn(err);\n    });\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-version\",\n        payload: version\n    });\n};\nexport { deleteVersion };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFile = async (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir);\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // precondition for if file is no longer in the metadata\n    if (!existingFile)\n        return;\n    for (let version of existingFile.versions) {\n        await deleteVersion(masterHandle, dir, version);\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n};\nexport { deleteFile };\n","import { createMetaQueue } from \"./createMetaQueue\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolder = async (masterHandle, dir, folder) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, folder.name);\n    if (folder.name.indexOf(\"/\") > 0 || folder.name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const meta = await masterHandle.getFolderMeta(fullDir).catch(console.warn);\n    if (meta) {\n        await Promise.all([\n            (async () => {\n                try {\n                    for (let folder of meta.folders) {\n                        await masterHandle.deleteFolder(fullDir, folder);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete sub folders\");\n                    throw err;\n                }\n            })(),\n            (async () => {\n                try {\n                    for (let file of meta.files) {\n                        await masterHandle.deleteFile(fullDir, file);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete file\");\n                    throw err;\n                }\n            })()\n        ]);\n    }\n    try {\n        await masterHandle.deleteFolderMeta(fullDir);\n    }\n    catch (err) {\n        console.error(\"Failed to delete meta entry\");\n        throw err;\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: folder\n    });\n};\nexport { deleteFolder };\n","import { deleteMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    // TODO: verify folder can only be changed by the creating account\n    await deleteMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir));\n};\nexport { deleteFolderMeta };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isExpired = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"expired\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isExpired };\n","import { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { getFolderMeta, isPaid } from \"../v0/index\";\nconst login = async (masterHandle) => {\n    // only attempt changes if account is paid\n    if (!await isPaid(masterHandle)) {\n        return;\n    }\n    // try newer meta\n    try {\n        await masterHandle.getFolderMeta(\"/\");\n    }\n    catch (err) {\n        // try older meta\n        try {\n            const meta = await getFolderMeta(masterHandle, \"/\");\n            await masterHandle.deleteFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            console.info(\"--- META ---\", meta);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta(meta));\n        }\n        catch (err) {\n            // no meta exists\n            // set meta to an empty meta\n            console.warn(err);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta());\n        }\n    }\n};\nexport { login };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFile = async (masterHandle, dir, { file, to }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-file\",\n        payload: existingFile\n    });\n};\nexport { moveFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFolder = async (masterHandle, dir, { folder, to }) => {\n    dir = cleanPath(dir);\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(to, folder.name);\n    const folderMeta = await getFolderMeta(masterHandle, oldDir).catch(console.warn), outerMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!outerMeta)\n        throw new Error(\"Outer folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = outerMeta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"File no longer exists\");\n    await createFolderMeta(masterHandle, newDir).catch(console.warn);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-folder\",\n        payload: existingFolder\n    });\n};\nexport { moveFolder };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFile = async (masterHandle, dir, { file, name }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-file\",\n        payload: new FileEntryMeta({\n            ...existingFile,\n            name\n        })\n    });\n};\nexport { renameFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { getFolderLocation } from \"./index\";\nimport { FolderEntryMeta } from \"../../folder-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFolder = async (masterHandle, dir, { folder, name }) => {\n    dir = cleanPath(dir);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(dir, name);\n    const folderMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!meta)\n        throw new Error(\"Outer folder does not exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"Folder no longer exists\");\n    await createFolder(masterHandle, dir, name);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: getFolderLocation(masterHandle, newDir)\n        })\n    });\n};\nexport { renameFolder };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to renew\n * @param fileHandles - all file handles from the account to renew\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew\", signedPayload);\n}\n/**\n * request an invoice for renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountInvoice(endpoint, hdNode, duration = 12) {\n    const payload = {\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew/invoice\", signedPayload);\n}\n","import { renewAccountStatus, renewAccountInvoice } from \"../../../requests/renewAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst renewAccount = async (masterHandle, duration) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const renewAccountInvoiceResponse = await renewAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration);\n    console.log(renewAccountInvoiceResponse);\n    const renewAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration\n    ];\n    return {\n        data: renewAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const renewAccountStatusResponse = await renewAccountStatus(...renewAccountStatusOpts);\n                console.log(renewAccountStatusResponse);\n                if (renewAccountStatusResponse.data.status\n                    && renewAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: renewAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { renewAccount };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to upgrade\n * @param fileHandles - all file handles from the account to upgrade\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12, limit = 128) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade\", signedPayload);\n}\n/**\n * request an invoice for upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountInvoice(endpoint, hdNode, duration = 12, limit = 128) {\n    const payload = {\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade/invoice\", signedPayload);\n}\n","import { upgradeAccountStatus, upgradeAccountInvoice } from \"../../../requests/upgradeAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst upgradeAccount = async (masterHandle, duration, limit) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const upgradeAccountInvoiceResponse = await upgradeAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration, limit);\n    console.log(upgradeAccountInvoiceResponse);\n    const upgradeAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration,\n        limit\n    ];\n    return {\n        data: upgradeAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const upgradeAccountStatusResponse = await upgradeAccountStatus(...upgradeAccountStatusOpts);\n                console.log(upgradeAccountStatusResponse);\n                if (upgradeAccountStatusResponse.data.status\n                    && upgradeAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: upgradeAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { upgradeAccount };\n","import { EventEmitter } from \"events\";\nimport Upload from \"../../../../upload\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { FileVersion } from \"../../file-version\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst uploadFile = (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const upload = new Upload(file, masterHandle, masterHandle.uploadOpts), ee = new EventEmitter();\n    Object.assign(ee, { handle: upload.handle });\n    upload.on(\"upload-progress\", progress => {\n        ee.emit(\"upload-progress\", progress);\n    });\n    upload.on(\"error\", err => {\n        ee.emit(\"error\", err);\n    });\n    upload.on(\"finish\", async (finishedUpload) => {\n        if (!await getFolderMeta(masterHandle, dir).catch(console.warn))\n            await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n        createMetaQueue(masterHandle, dir);\n        masterHandle.metaQueue[dir].push({\n            type: \"add-file\",\n            payload: new FileEntryMeta({\n                name: file.name,\n                modified: file.lastModified,\n                versions: [\n                    new FileVersion({\n                        handle: finishedUpload.handle,\n                        size: file.size,\n                        modified: file.lastModified\n                    })\n                ]\n            })\n        });\n        masterHandle.metaQueue[dir].once(\"update\", meta => {\n            ee.emit(\"finish\", finishedUpload);\n        });\n    });\n    return ee;\n};\nexport { uploadFile };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { createFolder } from \"./createFolder\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { deleteFile } from \"./deleteFile\";\nimport { deleteFolder } from \"./deleteFolder\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { isExpired } from \"./isExpired\";\nimport { login } from \"./login\";\nimport { moveFile } from \"./moveFile\";\nimport { moveFolder } from \"./moveFolder\";\nimport { renameFile } from \"./renameFile\";\nimport { renameFolder } from \"./renameFolder\";\nimport { renewAccount } from \"./renewAccount\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { upgradeAccount } from \"./upgradeAccount\";\nimport { uploadFile } from \"./uploadFile\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getHandle, isPaid, register, buildFullTree, createFolder, createFolderMeta, createMetaQueue, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, getFolderMeta, isExpired, login, moveFile, moveFolder, renameFile, renameFolder, renewAccount, setFolderMeta, upgradeAccount, uploadFile };\n/**\n * internal API v1\n *\n * @internal\n */\nconst v1 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getHandle,\n    isPaid,\n    register,\n    buildFullTree,\n    createFolder,\n    createFolderMeta,\n    createMetaQueue,\n    deleteFile,\n    deleteFolder,\n    deleteFolderMeta,\n    deleteVersion,\n    getFolderMeta,\n    isExpired,\n    login,\n    moveFile,\n    moveFolder,\n    renameFile,\n    renameFolder,\n    renewAccount,\n    setFolderMeta,\n    upgradeAccount,\n    uploadFile\n};\nexport default v1;\n","import { generateMnemonic, mnemonicToSeedSync, validateMnemonic, } from \"bip39\";\nimport HDKey, { fromMasterSeed } from \"hdkey\";\nimport * as namehash from \"eth-ens-namehash\";\nimport { hashToPath } from \"./utils/hashToPath\";\nimport { buildFullTree, createFolder, createFolderMeta, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isExpired, isPaid, login, moveFile, moveFolder, register, renameFile, renameFolder, renewAccount, setFolderMeta, uploadFile, upgradeAccount } from \"./core/account/api/v1/index\";\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for representing the account mnemonic\n *\n * @public\n */\nclass Account {\n    /**\n     * creates an account from a mnemonic if provided, otherwise from entropy\n     *\n     * @param mnemonic - the mnemonic to use for the account\n     */\n    constructor(mnemonic = generateMnemonic()) {\n        if (!validateMnemonic(mnemonic)) {\n            throw new Error(\"mnemonic provided was not valid\");\n        }\n        this._mnemonic = mnemonic;\n    }\n    get mnemonic() {\n        return this._mnemonic.trim().split(/\\s+/g);\n    }\n    get seed() {\n        return mnemonicToSeedSync(this._mnemonic);\n    }\n}\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for creating a master handle from an account mnemonic\n *\n * @remarks\n *\n * a master handle is responsible for:\n *  <br /> - logging in to an account\n *  <br /> - signing changes for the account\n *  <br /> - deterministic entropy for generating features of an account (such as folder keys)\n *\n * @public\n */\nclass MasterHandle extends HDKey {\n    /**\n     * creates a master handle from an account\n     *\n     * @param _ - the account to generate the handle from\n     * @param _.account - an {@link Account}\n     * @param _.handle - an account handle as a string\n     */\n    constructor({ account, handle, }, { uploadOpts = {}, downloadOpts = {} } = {}) {\n        super();\n        this.metaQueue = {};\n        this.metaFolderCreating = {};\n        /**\n         * creates a sub key seed for validating\n         *\n         * @param path - the string to use as a sub path\n         */\n        this.generateSubHDKey = (pathString) => generateSubHDKey(this, pathString);\n        this.uploadFile = (dir, file) => uploadFile(this, dir, file);\n        this.downloadFile = (handle) => downloadFile(this, handle);\n        /**\n         * deletes every version of a file and removes it from the metadata\n         *\n         * @param dir - the containing folder\n         * @param file - file entry to delete (loosely matched name)\n         */\n        this.deleteFile = (dir, file) => deleteFile(this, dir, file);\n        /**\n         * deletes a single version of a file (ie. delete by handle)\n         *\n         * @param dir - the containing folder\n         * @param version - version to delete (loosely matched by handle)\n         */\n        this.deleteVersion = (dir, version) => deleteVersion(this, dir, version);\n        /**\n         * creates a dir key seed for validating and folder navigation\n         *\n         * @param dir - the folder\n         */\n        this.getFolderHDKey = (dir) => getFolderHDKey(this, dir);\n        /**\n         * get the location (ie. metadata id) of a folder\n         *\n         * @remarks this is a deterministic location derived from the account's hdkey to allow for random folder access\n         *\n         * @param dir - the folder to locate\n         */\n        this.getFolderLocation = (dir) => getFolderLocation(this, dir);\n        /**\n         * request the creation of a folder metadata\n         *\n         * @param dir - the folder to create\n         */\n        this.createFolderMeta = async (dir) => createFolderMeta(this, dir);\n        /**\n         * create folder {name} inside of {dir}\n         *\n         * @param dir - the containing folder\n         * @param name - the name of the new folder\n         */\n        this.createFolder = async (dir, name) => createFolder(this, dir, name);\n        this.deleteFolderMeta = async (dir) => deleteFolderMeta(this, dir);\n        this.deleteFolder = async (dir, folder) => deleteFolder(this, dir, folder);\n        this.moveFile = async (dir, { file, to }) => moveFile(this, dir, { file, to });\n        this.moveFolder = async (dir, { folder, to }) => moveFolder(this, dir, { folder, to });\n        this.renameFile = async (dir, { file, name }) => renameFile(this, dir, { file, name });\n        this.renameFolder = async (dir, { folder, name }) => renameFolder(this, dir, { folder, name });\n        this.setFolderMeta = async (dir, folderMeta) => setFolderMeta(this, dir, folderMeta);\n        this.getFolderMeta = async (dir) => getFolderMeta(this, dir);\n        /**\n         * recursively build full file tree starting from directory {dir}\n         *\n         * @param dir - the starting directory\n         */\n        this.buildFullTree = async (dir) => buildFullTree(this, dir);\n        this.getAccountInfo = async () => getAccountInfo(this);\n        this.isExpired = async () => isExpired(this);\n        this.isPaid = async () => isPaid(this);\n        this.login = async () => login(this);\n        this.register = async (duration, limit) => register(this, duration, limit);\n        this.upgrade = async (duration, limit) => upgradeAccount(this, duration, limit);\n        this.renew = async (duration) => renewAccount(this, duration);\n        this.uploadOpts = uploadOpts;\n        this.downloadOpts = downloadOpts;\n        if (account && account.constructor == Account) {\n            const path = \"m/43'/60'/1775'/0'/\" + hashToPath(namehash.hash(\"opacity.io\").replace(/^0x/, \"\"));\n            // ethereum/EIPs#1775\n            Object.assign(this, fromMasterSeed(account.seed).derive(path));\n        }\n        else if (handle && handle.constructor == String) {\n            this.privateKey = Buffer.from(handle.slice(0, 64), \"hex\");\n            this.chainCode = Buffer.from(handle.slice(64), \"hex\");\n        }\n        else {\n            throw new Error(\"master handle was not of expected type\");\n        }\n    }\n    /**\n     * get the account handle\n     */\n    get handle() {\n        return getHandle(this);\n    }\n}\nexport { Account, MasterHandle, HDKey };\n"],"names":["DEFAULT_OPTIONS","ForgeMd","ForgeRandom","ForgeUtil","Forge","ForgeCipher","ByteBuffer","createMetadata","EthUtil.keccak256","getFolderMeta","requestDeleteFile","deleteFile","namehash.hash"],"mappings":"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"}