{"version":3,"file":"index.js","sources":["../dist-src/utils/allSettled.js","../dist-src/utils/hex.js","../dist-src/utils/blocks.js","../dist-src/utils/serializeEncrypted.js","../dist-src/utils/parts.js","../dist-src/utils/extractPromise.js","../dist-src/utils/oqueue.js","../dist-src/utils/chunkStream.js","../dist-src/utils/polyfillStream.js","../dist-src/download.js","../dist-src/utils/payload.js","../dist-src/utils/retry.js","../dist-src/upload.js","../dist-src/utils/readAll.js","../dist-src/core/account/api/v0/downloadFile.js","../dist-src/core/hashing.js","../dist-src/utils/hashToPath.js","../dist-src/core/account/api/v0/generateSubHDKey.js","../dist-src/core/requests/getPlans.js","../dist-src/core/requests/createAccount.js","../dist-src/core/requests/metadata.js","../dist-src/core/request.js","../dist-src/core/requests/checkPaymentStatus.js","../dist-src/core/account/api/v0/getAccountInfo.js","../dist-src/utils/cleanPath.js","../dist-src/core/account/api/v0/getFolderHDKey.js","../dist-src/core/account/api/v0/getFolderLocation.js","../dist-src/core/constants.js","../dist-src/core/encryption.js","../dist-src/core/account/api/v0/getFolderMeta.js","../dist-src/core/account/api/v0/getHandle.js","../dist-src/core/account/api/v0/isPaid.js","../dist-src/core/account/api/v0/register.js","../dist-src/core/account/api/v0/index.js","../dist-src/core/account/file-version.js","../dist-src/core/account/file-entry.js","../dist-src/core/account/folder-entry.js","../dist-src/core/account/folder-meta.js","../dist-src/utils/netQueue.js","../dist-src/core/account/api/v1/setFolderMeta.js","../dist-src/core/account/api/v1/meta/removeFile.js","../dist-src/core/account/api/v1/meta/removeVersion.js","../dist-src/core/account/api/v1/meta/addFile.js","../dist-src/core/account/api/v1/meta/addFolder.js","../dist-src/core/account/api/v1/meta/removeFolder.js","../dist-src/core/account/api/v1/createMetaQueue.js","../dist-src/core/account/api/v1/getFolderMeta.js","../dist-src/core/account/api/v1/buildFullTree.js","../dist-src/core/account/api/v1/createFolder.js","../dist-src/core/account/api/v1/createFolderMeta.js","../dist-src/core/requests/deleteFile.js","../dist-src/core/account/api/v1/deleteVersion.js","../dist-src/core/account/api/v1/deleteFile.js","../dist-src/core/account/api/v1/deleteFolder.js","../dist-src/core/account/api/v1/deleteFolderMeta.js","../dist-src/core/account/api/v1/isExpired.js","../dist-src/core/account/api/v1/login.js","../dist-src/core/account/api/v1/moveFile.js","../dist-src/core/account/api/v1/moveFolder.js","../dist-src/core/account/api/v1/renameFile.js","../dist-src/core/account/api/v1/renameFolder.js","../dist-src/core/requests/renewAccount.js","../dist-src/core/account/api/v1/renewAccount.js","../dist-src/core/requests/upgradeAccount.js","../dist-src/core/account/api/v1/upgradeAccount.js","../dist-src/core/account/api/v1/uploadFile.js","../dist-src/core/account/api/v1/index.js","../dist-src/core/web/webAccountMiddleware.js","../dist-src/core/web/webNetworkMiddleware.js","../dist-src/account.js"],"sourcesContent":["import { Mutex } from \"async-mutex\";\nexport const allSettled = async (arr) => {\n    const resolved = [];\n    const rejected = [];\n    const mutex = new Mutex();\n    arr.forEach(async (p) => {\n        const release = await mutex.acquire();\n        try {\n            resolved.push(await p);\n            rejected.push(null);\n        }\n        catch (err) {\n            resolved.push(null);\n            rejected.push(err);\n        }\n        finally {\n            release();\n        }\n    });\n    return resolved.reduce((acc, res, i) => { acc.push([res, rejected[i]]); return acc; }, []);\n};\n","export const bytesToHex = (b) => {\n    return b.reduce((acc, n) => { acc.push((\"00\" + n.toString(16)).slice(-2)); return acc; }, []).join(\"\");\n};\nexport const hexToBytes = (h) => {\n    return new Uint8Array(h.match(/.{1,2}/g).map(b => parseInt(b, 16)));\n};\n","export const blockSize = 64 * 1024;\nexport const blockOverhead = 32;\nexport const blockSizeOnFS = blockSize + blockOverhead;\nexport const numberOfBlocks = (size) => {\n    return Math.floor((size - 1) / blockSize) + 1;\n};\nexport const numberOfBlocksOnFS = (sizeOnFS) => {\n    return Math.floor((sizeOnFS - 1) / blockSizeOnFS) + 1;\n};\nexport const sizeOnFS = (size) => {\n    return size + blockOverhead * numberOfBlocks(size);\n};\n","export const serializeEncrypted = async (crypto, bytes, key) => {\n    const v = await crypto.decrypt(key, bytes);\n    const s = new TextDecoder(\"utf-8\").decode(v);\n    return JSON.parse(s);\n};\n","import { blockSizeOnFS, sizeOnFS, blockSize } from \"./blocks\";\nexport const blocksPerPart = 80;\nexport const partSize = blocksPerPart * blockSize;\nexport const partSizeOnFS = blocksPerPart * blockSizeOnFS;\nexport const numberOfPartsOnFS = (size) => {\n    return Math.floor((sizeOnFS(size) - 1) / partSizeOnFS) + 1;\n};\n","export const extractPromise = () => {\n    let rs, rj;\n    const promise = new Promise((resole, reject) => {\n        rs = resole;\n        rj = reject;\n    });\n    return [promise, rs, rj];\n};\n","import { Mutex } from \"async-mutex\";\nimport { extractPromise } from \"./extractPromise\";\nexport class OQ {\n    constructor(concurrency = 1, tolerance = concurrency) {\n        this._e = new EventTarget();\n        // n is the serving finished index\n        this._n = -1;\n        // o is the checkout finished index\n        this._o = -1;\n        // u is the unfinished work count\n        this._u = 0;\n        // c is the current concurrency\n        this._c = 0;\n        this._isClosed = false;\n        this._queue = [];\n        this._m = new Mutex();\n        this._cl = concurrency;\n        this._ct = tolerance;\n        const [closed, resolveClosed] = extractPromise();\n        this._closed = closed;\n        this._resolveClosed = resolveClosed;\n        // console.log(this._m)\n    }\n    get concurrency() {\n        return this._c;\n    }\n    async waitForClose() {\n        return await this._closed;\n    }\n    async waitForLine(size) {\n        const [promise, resolve] = extractPromise();\n        this._e.addEventListener(\"now-serving\", () => {\n            if (this._u - 1 <= size) {\n                resolve();\n            }\n        });\n        if (this._u - 1 <= size) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForWork(n) {\n        // console.log(\"waiting for service:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"now-serving\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._n) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForWorkFinish(n) {\n        // console.log(\"waiting for service:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"work-finished\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._n) {\n            resolve();\n        }\n        return promise;\n    }\n    async waitForCommit(n) {\n        // console.log(\"waiting for finish:\", n, this._o)\n        const [promise, resolve] = extractPromise();\n        const name = \"checkout\";\n        const l = (c) => {\n            if (n == c.loaded) {\n                resolve();\n                this._e.removeEventListener(name, l);\n            }\n        };\n        this._e.addEventListener(name, l);\n        if (n <= this._o) {\n            resolve();\n        }\n        return promise;\n    }\n    async add(n, wfn, cfn) {\n        if (this._isClosed) {\n            return;\n        }\n        const [workPromise, resolveReadyForWork] = extractPromise();\n        let release = await this._m.acquire();\n        const i = this._queue.findIndex(([n2]) => n < n2);\n        this._queue.splice(i == -1 ? this._queue.length : i, 0, [n, resolveReadyForWork]);\n        if (this._c < this._cl && this._queue[0][0] < this._o + 1 + this._ct) {\n            this._queue[0][1]();\n            this._queue.shift();\n        }\n        this._u++;\n        release();\n        await workPromise;\n        if (this._isClosed) {\n            return;\n        }\n        this._u--;\n        this._c++;\n        this._e.dispatchEvent(new ProgressEvent(\"now-serving\", { loaded: n }));\n        const w = wfn(n);\n        Promise.resolve(w).then(async () => {\n            this._n++;\n            this._c--;\n            this._e.dispatchEvent(new ProgressEvent(\"work-finished\", { loaded: n }));\n            const release = await this._m.acquire();\n            if (this._c < this._cl && this._queue[0]) {\n                this._queue[0][1]();\n            }\n            this._queue.shift();\n            release();\n        });\n        // wait for previous checkout\n        await this.waitForCommit(n - 1);\n        if (this._isClosed) {\n            return;\n        }\n        // console.log(\"checkout: \" + n)\n        const v = await cfn(await Promise.resolve(w), n);\n        release = await this._m.acquire();\n        this._o++;\n        this._e.dispatchEvent(new ProgressEvent(\"checkout\", { loaded: this._o }));\n        release();\n        return v;\n    }\n    close() {\n        this._isClosed = true;\n        this._resolveClosed();\n    }\n}\n","import { TransformStream } from \"web-streams-polyfill/ponyfill\";\nexport class Uint8ArrayChunkStream {\n    constructor(size, writableStrategy, readableStrategy, hooks) {\n        this._l = 0;\n        this._hooks = hooks;\n        this._size = size;\n        this._buffer = new Uint8Array(size);\n        const t = this;\n        this._transformer = new TransformStream({\n            flush(controller) {\n                var _a, _b;\n                const b = t._buffer.slice(0, t._l);\n                (_a = t === null || t === void 0 ? void 0 : t._hooks) === null || _a === void 0 ? void 0 : _a.flush(b);\n                if (t._l != 0) {\n                    (_b = t === null || t === void 0 ? void 0 : t._hooks) === null || _b === void 0 ? void 0 : _b.enqueue(b);\n                    controller.enqueue(b);\n                }\n                delete t._buffer;\n                delete t._size;\n                t._l = 0;\n            },\n            transform: t._transform.bind(t),\n        }, writableStrategy, readableStrategy);\n        this.readable = this._transformer.readable;\n        this.writable = this._transformer.writable;\n    }\n    _transform(chunk, controller) {\n        var _a, _b;\n        (_a = this === null || this === void 0 ? void 0 : this._hooks) === null || _a === void 0 ? void 0 : _a.transform(chunk);\n        let written = 0;\n        const numberOfChunks = Math.floor((this._l + chunk.length) / this._size);\n        for (let bufIndex = 0; bufIndex < numberOfChunks; bufIndex++) {\n            const sl = this._l;\n            const l = this._size - this._l;\n            for (let n = 0; n < this._size - sl; n++) {\n                this._buffer[this._l] = chunk[written + n];\n                this._l++;\n            }\n            written += l;\n            (_b = this === null || this === void 0 ? void 0 : this._hooks) === null || _b === void 0 ? void 0 : _b.enqueue(this._buffer);\n            controller.enqueue(this._buffer);\n            this._buffer = new Uint8Array(this._size);\n            this._l = 0;\n        }\n        for (let i = written; i < chunk.length; i++) {\n            this._buffer[this._l] = chunk[i];\n            this._l++;\n        }\n    }\n}\n","import { ReadableStream as ReadableStreamPolyfill } from \"web-streams-polyfill\";\nexport const polyfillReadableStream = (rs, strategy) => {\n    const reader = rs.getReader();\n    return new ReadableStreamPolyfill({\n        async pull(controller) {\n            const r = await reader.read();\n            if (r.value) {\n                // console.log(r.value)\n                controller.enqueue(r.value);\n            }\n            if (r.done) {\n                controller.close();\n            }\n        }\n    }, strategy);\n};\n","import { allSettled } from \"./utils/allSettled\";\nimport { bytesToHex } from \"./utils/hex\";\nimport { sizeOnFS, numberOfBlocks, blockSizeOnFS, numberOfBlocksOnFS } from \"./utils/blocks\";\nimport { serializeEncrypted } from \"./utils/serializeEncrypted\";\nimport { numberOfPartsOnFS, partSizeOnFS, blocksPerPart } from \"./utils/parts\";\nimport { ReadableStream, WritableStream, TransformStream } from \"web-streams-polyfill/ponyfill\";\nimport { OQ } from \"./utils/oqueue\";\nimport { Uint8ArrayChunkStream } from \"./utils/chunkStream\";\nimport { polyfillReadableStream } from \"./utils/polyfillStream\";\nimport { extractPromise } from \"./utils/extractPromise\";\nexport class Download extends EventTarget {\n    constructor({ config, handle }) {\n        super();\n        this._cancelled = false;\n        this._errored = false;\n        this._started = false;\n        this._done = false;\n        this._paused = false;\n        this._unpaused = Promise.resolve();\n        this._progress = { network: 0, decrypt: 0 };\n        this.config = config;\n        this._location = handle.slice(0, 32);\n        this._key = handle.slice(32);\n        const d = this;\n        const [finished, resolve, reject] = extractPromise();\n        this._finished = finished;\n        this._resolve = (val) => {\n            d._done = true;\n            resolve(val);\n        };\n        this._reject = (err) => {\n            d._errored = true;\n            reject(err);\n        };\n    }\n    get cancelled() { return this._cancelled; }\n    get errored() { return this._errored; }\n    get started() { return this._started; }\n    get done() { return this._done; }\n    get size() { return this._size; }\n    get sizeOnFS() { return this._sizeOnFS; }\n    get name() { var _a; return (_a = this._metadata) === null || _a === void 0 ? void 0 : _a.name; }\n    pause() {\n        const [unpaused, unpause] = extractPromise();\n        this._unpaused = unpaused;\n        this._unpause = unpause;\n    }\n    unpause() {\n        this._unpause();\n    }\n    async downloadUrl() {\n        if (this._downloadUrl) {\n            return this._downloadUrl;\n        }\n        const d = this;\n        const downloadUrlRes = await d.config.network.POST(d.config.storageNode + \"/api/v1/download\", undefined, JSON.stringify({ fileID: bytesToHex(d._location) }), async (b) => JSON.parse(new TextDecoder(\"utf8\").decode(await new Response(b).arrayBuffer())).fileDownloadUrl).catch(d._reject);\n        if (!downloadUrlRes) {\n            return;\n        }\n        const downloadUrl = downloadUrlRes.data;\n        this._downloadUrl = downloadUrl;\n        return downloadUrl;\n    }\n    async metadata() {\n        if (this._metadata) {\n            return this._metadata;\n        }\n        const d = this;\n        if (!this._downloadUrl) {\n            await this.downloadUrl();\n        }\n        const metadataRes = await d.config.network.GET(this._downloadUrl + \"/metadata\", undefined, undefined, async (b) => await serializeEncrypted(d.config.crypto, new Uint8Array(await new Response(b).arrayBuffer()), d._key)).catch(d._reject);\n        if (!metadataRes) {\n            return;\n        }\n        // TODO: migrate to new metadata system\n        const metadata = metadataRes.data;\n        d._metadata = metadata;\n        return metadata;\n    }\n    async start() {\n        if (this._cancelled || this._errored) {\n            return;\n        }\n        if (this._started) {\n            return this._output;\n        }\n        this._started = true;\n        // ping both servers before starting\n        const arr = await allSettled([\n            this.config.network.GET(this.config.storageNode + \"\", undefined, undefined, async (d) => new TextDecoder(\"utf8\").decode(await new Response(d).arrayBuffer())),\n        ]).catch(this._reject);\n        if (!arr) {\n            return;\n        }\n        for (const v of arr) {\n            const [res, rej] = v;\n            if (res) {\n                // if (res.data != \"pong\") {\n                // \tthis.#reject(new Error(`Server ${res.url} did not respond to ping`))\n                // \treturn\n                // }\n            }\n            if (rej) {\n                this._reject(rej);\n                return;\n            }\n        }\n        const d = this;\n        // Download started metadata\n        // ...\n        await d.downloadUrl().catch(d._reject);\n        await d.metadata().catch(d._reject);\n        const downloadUrl = this._downloadUrl;\n        const metadata = this._metadata;\n        d._size = metadata.size;\n        d._sizeOnFS = sizeOnFS(metadata.size);\n        d._numberOfBlocks = numberOfBlocks(d._size);\n        d._numberOfParts = numberOfPartsOnFS(d._sizeOnFS);\n        d.dispatchEvent(new ProgressEvent(\"start\", { loaded: numberOfBlocksOnFS(this._sizeOnFS) }));\n        const netQueue = new OQ(3);\n        const decryptQueue = new OQ(blocksPerPart);\n        d._netQueue = netQueue;\n        d._decryptQueue = decryptQueue;\n        let partIndex = 0;\n        d._output = new ReadableStream({\n            async pull(controller) {\n                if (d._cancelled || d._errored) {\n                    return;\n                }\n                if (partIndex >= d._numberOfParts) {\n                    return;\n                }\n                netQueue.add(partIndex++, async (partIndex) => {\n                    if (d._cancelled || d._errored) {\n                        return;\n                    }\n                    await d._unpaused;\n                    d.dispatchEvent(new ProgressEvent(\"part-loaded\", { loaded: partIndex }));\n                    const res = await d.config.network.GET(downloadUrl + \"/file\", { range: `bytes=${partIndex * partSizeOnFS}-${Math.min(d._sizeOnFS, (partIndex + 1) * partSizeOnFS) - 1}` }, undefined, async (rs) => polyfillReadableStream(rs)).catch(d._reject);\n                    if (!res) {\n                        return;\n                    }\n                    let l = 0;\n                    res.data\n                        .pipeThrough(new TransformStream({\n                        // log progress\n                        transform(chunk, controller) {\n                            for (let i = Math.floor(l / blockSizeOnFS); i < Math.floor((l + chunk.length) / blockSizeOnFS); i++) {\n                                d.dispatchEvent(new ProgressEvent(\"block-loaded\", { loaded: partIndex * blocksPerPart + i }));\n                            }\n                            l += chunk.length;\n                            controller.enqueue(chunk);\n                        },\n                    }))\n                        .pipeThrough(new Uint8ArrayChunkStream(partSizeOnFS))\n                        .pipeTo(new WritableStream({\n                        async write(part) {\n                            for (let i = 0; i < numberOfBlocksOnFS(part.length); i++) {\n                                decryptQueue.add(partIndex * blocksPerPart + i, async (blockIndex) => {\n                                    if (d._cancelled || d._errored) {\n                                        return;\n                                    }\n                                    let bi = blockIndex % blocksPerPart;\n                                    await d._unpaused;\n                                    const block = part.slice(bi * blockSizeOnFS, (bi + 1) * blockSizeOnFS);\n                                    const decrypted = await d.config.crypto.decrypt(d._key, block).catch(d._reject);\n                                    if (!decrypted) {\n                                        return;\n                                    }\n                                    return decrypted;\n                                }, async (decrypted, blockIndex) => {\n                                    if (!decrypted) {\n                                        return;\n                                    }\n                                    controller.enqueue(decrypted);\n                                    d.dispatchEvent(new ProgressEvent(\"download-progress\", { loaded: blockIndex, total: d._numberOfBlocks }));\n                                    d.dispatchEvent(new ProgressEvent(\"block-finished\", { loaded: blockIndex }));\n                                    d.dispatchEvent(new ProgressEvent(\"decrypt-progress\", { loaded: blockIndex, total: numberOfBlocks(d._size) - 1 }));\n                                });\n                            }\n                        }\n                    }));\n                    await decryptQueue.waitForCommit(Math.min((partIndex + 1) * blocksPerPart, d._numberOfBlocks) - 1);\n                    d.dispatchEvent(new ProgressEvent(\"part-finished\", { loaded: partIndex }));\n                }, () => {\n                });\n            },\n            async start(controller) {\n                netQueue.add(d._numberOfParts, () => { }, async () => {\n                    netQueue.close();\n                });\n                decryptQueue.add(numberOfBlocks(d._size), () => { }, async () => {\n                    decryptQueue.close();\n                });\n                Promise.all([\n                    netQueue.waitForClose(),\n                    decryptQueue.waitForClose(),\n                ]).then(() => {\n                    d._resolve();\n                    controller.close();\n                });\n            },\n            cancel() {\n                d._cancelled = true;\n            }\n        });\n        return d._output;\n    }\n    async finish() {\n        return this._finished;\n    }\n    async cancel() {\n        this._cancelled = true;\n        if (this._output) {\n            this._output.cancel();\n        }\n    }\n}\n","import { keccak256 } from \"js-sha3\";\nimport { bytesToHex } from \"./hex\";\nexport const getPayload = async ({ crypto, payload: rawPayload, key, payloadKey = \"requestBody\" }) => {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = new Uint8Array(keccak256.arrayBuffer(payload));\n    const signature = await crypto.sign(key, hash);\n    const pubKey = await crypto.getPublicKey(key);\n    const data = {\n        [payloadKey]: payload,\n        \"signature\": bytesToHex(signature),\n        \"publicKey\": bytesToHex(pubKey),\n        \"hash\": bytesToHex(hash)\n    };\n    return data;\n};\nexport const getPayloadFD = async ({ crypto, payload: rawPayload, extraPayload, key, payloadKey = \"requestBody\" }) => {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = new Uint8Array(keccak256.arrayBuffer(payload));\n    const signature = await crypto.sign(key, hash);\n    const pubKey = await crypto.getPublicKey(key);\n    const data = new FormData();\n    data.append(payloadKey, payload);\n    data.append(\"signature\", bytesToHex(signature));\n    data.append(\"publicKey\", bytesToHex(pubKey));\n    data.append(\"hash\", bytesToHex(hash));\n    if (extraPayload) {\n        Object.keys(extraPayload).forEach(key => {\n            data.append(key, new Blob([extraPayload[key].buffer]), key);\n        });\n    }\n    return data;\n};\n","import { extractPromise } from \"./extractPromise\";\nexport class Retry {\n    constructor(fn, { firstTimer, nextTimer, maxRetries, handler }) {\n        this._handler = () => false;\n        this._timer = 5000;\n        this._nextTimer = (last) => 2 * last;\n        this._retries = 0;\n        this._maxRetries = 2;\n        this._fn = fn;\n        this._handler = handler || this._handler;\n        this._timer = firstTimer || this._timer;\n        this._nextTimer = nextTimer || this._nextTimer;\n        this._maxRetries = maxRetries || this._maxRetries;\n    }\n    start() {\n        return this._retry();\n    }\n    async _retry() {\n        try {\n            return await this._fn();\n        }\n        catch (err) {\n            console.info(err);\n            const closed = await this._handler(err);\n            if (closed || this._retries++ > this._maxRetries) {\n                throw err;\n            }\n            else {\n                console.log(\"retry\");\n                const [promise, resolve] = extractPromise();\n                setTimeout(resolve, await this._nextTimer(this._timer));\n                await promise;\n                console.log(\"ready\");\n                return this._retry();\n            }\n        }\n    }\n}\n","import { OQ } from \"./utils/oqueue\";\nimport { allSettled } from \"./utils/allSettled\";\nimport { sizeOnFS, numberOfBlocksOnFS, numberOfBlocks, blockSize, blockSizeOnFS } from \"./utils/blocks\";\nimport { numberOfPartsOnFS, partSize } from \"./utils/parts\";\nimport { getPayloadFD, getPayload } from \"./utils/payload\";\nimport { bytesToHex } from \"./utils/hex\";\nimport { Uint8ArrayChunkStream } from \"./utils/chunkStream\";\nimport { WritableStream, TransformStream } from \"web-streams-polyfill/ponyfill\";\nimport { extractPromise } from \"./utils/extractPromise\";\nimport { Retry } from \"./utils/retry\";\nexport class Upload extends EventTarget {\n    constructor({ config, size, name, type }) {\n        super();\n        this._cancelled = false;\n        this._errored = false;\n        this._started = false;\n        this._done = false;\n        this._unpaused = Promise.resolve();\n        this._progress = { network: 0, decrypt: 0 };\n        this._metadata = {\n            name: undefined,\n            p: undefined,\n            size: undefined,\n            type: undefined\n        };\n        this._buffer = [];\n        this._dataOffset = 0;\n        this._encryped = [];\n        this._partOffset = 0;\n        this.config = config;\n        this._size = size;\n        this._sizeOnFS = sizeOnFS(this._size);\n        this._numberOfBlocks = numberOfBlocks(this._size);\n        this._numberOfParts = numberOfPartsOnFS(this._sizeOnFS);\n        this._metadata.name = name;\n        this._metadata.size = size;\n        this._metadata.type = type;\n        const u = this;\n        const [finished, resolve, reject] = extractPromise();\n        this._finished = finished;\n        this._resolve = (val) => {\n            u._done = true;\n            resolve(val);\n        };\n        this._reject = (err) => {\n            u._errored = true;\n            u.pause();\n            reject(err);\n        };\n    }\n    get cancelled() { return this._cancelled; }\n    get errored() { return this._errored; }\n    get started() { return this._started; }\n    get done() { return this._done; }\n    get size() { return this._size; }\n    get sizeOnFS() { return this._sizeOnFS; }\n    pause() {\n        const [unpaused, unpause] = extractPromise();\n        this._unpaused = unpaused;\n        this._unpause = unpause;\n    }\n    unpause() {\n        this._unpause();\n    }\n    async generateHandle() {\n        if (!this._key) {\n            // generate key\n            this._key = new Uint8Array(await crypto.subtle.exportKey(\"raw\", await crypto.subtle.generateKey({ name: \"AES-GCM\", length: 256 }, true, [\"encrypt\", \"decrypt\"])));\n        }\n        if (!this._location) {\n            this._location = crypto.getRandomValues(new Uint8Array(32));\n        }\n    }\n    async start() {\n        if (this._cancelled || this._errored) {\n            return;\n        }\n        if (this._started) {\n            return this._output;\n        }\n        this._started = true;\n        // ping both servers before starting\n        const arr = await allSettled([\n            this.config.network.GET(this.config.storageNode + \"\", undefined, undefined, async (d) => new TextDecoder(\"utf8\").decode(await new Response(d).arrayBuffer())),\n        ]).catch(this._reject);\n        if (!arr) {\n            return;\n        }\n        for (const v of arr) {\n            const [res, rej] = v;\n            if (res) {\n                // if (res.data != \"pong\") {\n                // \tthis.#reject(new Error(`Server ${res.url} did not respond to ping`))\n                // \treturn\n                // }\n            }\n            if (rej) {\n                this._reject(rej);\n                return;\n            }\n        }\n        await this.generateHandle();\n        const u = this;\n        // upload started metadata\n        // ...\n        const encryptedMeta = await u.config.crypto.encrypt(u._key, new TextEncoder().encode(JSON.stringify(u._metadata)));\n        const fd = await getPayloadFD({\n            crypto: u.config.crypto,\n            payload: {\n                fileHandle: bytesToHex(u._location),\n                fileSizeInByte: u._sizeOnFS,\n                endIndex: numberOfPartsOnFS(u._sizeOnFS),\n            },\n            extraPayload: {\n                metadata: encryptedMeta,\n            },\n        });\n        await u.config.network.POST(u.config.storageNode + \"/api/v1/init-upload\", {}, fd).catch(u._reject);\n        u.dispatchEvent(new ProgressEvent(\"start\", { loaded: numberOfBlocksOnFS(u._sizeOnFS) }));\n        const encryptQueue = new OQ(1, Number.MAX_SAFE_INTEGER);\n        const netQueue = new OQ(3);\n        u._encryptQueue = encryptQueue;\n        u._netQueue = netQueue;\n        let blockIndex = 0;\n        let partIndex = 0;\n        const partCollector = new Uint8ArrayChunkStream(partSize, new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }), new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }));\n        u._output = new TransformStream({\n            transform(chunk, controller) {\n                controller.enqueue(chunk);\n            }\n        }, new ByteLengthQueuingStrategy({ highWaterMark: 3 * partSize + 1 }));\n        u._output.readable\n            .pipeThrough(partCollector)\n            .pipeTo(new WritableStream({\n            async write(part) {\n                // console.log(\"write part\")\n                u.dispatchEvent(new ProgressEvent(\"part-loaded\", { loaded: partIndex }));\n                const p = new Uint8Array(sizeOnFS(part.length));\n                netQueue.add(partIndex++, async (partIndex) => {\n                    if (u._cancelled || u._errored) {\n                        return;\n                    }\n                    for (let i = 0; i < numberOfBlocks(part.length); i++) {\n                        const block = part.slice(i * blockSize, (i + 1) * blockSize);\n                        encryptQueue.add(blockIndex++, async (blockIndex) => {\n                            if (u._cancelled || u._errored) {\n                                return;\n                            }\n                            u.dispatchEvent(new ProgressEvent(\"block-loaded\", { loaded: blockIndex }));\n                            return await u.config.crypto.encrypt(u._key, block);\n                        }, async (encrypted, blockIndex) => {\n                            // console.log(\"write encrypted\")\n                            if (!encrypted) {\n                                return;\n                            }\n                            let byteIndex = 0;\n                            for (let byte of encrypted) {\n                                p[i * blockSizeOnFS + byteIndex] = byte;\n                                byteIndex++;\n                            }\n                            u.dispatchEvent(new ProgressEvent(\"upload-progress\", { loaded: blockIndex, total: u._numberOfBlocks }));\n                            u.dispatchEvent(new ProgressEvent(\"block-finished\", { loaded: blockIndex }));\n                        });\n                    }\n                    await encryptQueue.waitForCommit(blockIndex - 1);\n                    const res = await new Retry(async () => {\n                        const fd = await getPayloadFD({\n                            crypto: u.config.crypto,\n                            payload: {\n                                fileHandle: bytesToHex(u._location),\n                                partIndex: partIndex + 1,\n                                endIndex: u._numberOfParts,\n                            },\n                            extraPayload: {\n                                chunkData: p,\n                            },\n                        });\n                        return await u.config.network.POST(u.config.storageNode + \"/api/v1/upload\", {}, fd);\n                    }, {\n                        firstTimer: 500,\n                        handler: (err) => {\n                            console.warn(err);\n                            return false;\n                        }\n                    }).start().catch(u._reject);\n                    if (!res) {\n                        return;\n                    }\n                    u.dispatchEvent(new ProgressEvent(\"part-finished\", { loaded: partIndex }));\n                    // console.log(res)\n                    // console.log(\"finished\", blockIndex)\n                    return p;\n                }, async (part, partIndex) => {\n                    if (!part) {\n                        return;\n                    }\n                });\n            },\n            async close() {\n                await encryptQueue.waitForClose();\n            },\n        }));\n        (async () => {\n            encryptQueue.add(numberOfBlocks(u._size), () => { }, async () => {\n                encryptQueue.close();\n            });\n            netQueue.add(u._numberOfParts, () => { }, async () => {\n                const data = await getPayload({\n                    crypto: u.config.crypto,\n                    payload: {\n                        fileHandle: bytesToHex(u._location),\n                    },\n                });\n                const res = await u.config.network.POST(u.config.storageNode + \"/api/v1/upload-status\", {}, JSON.stringify(data)).catch(u._reject);\n                // console.log(res)\n                netQueue.close();\n            });\n            await encryptQueue.waitForClose();\n            await netQueue.waitForClose();\n            u._resolve();\n        })();\n        return u._output;\n    }\n    async finish() {\n        return this._finished;\n    }\n    async cancel() {\n        this._cancelled = true;\n        // if (this._output) {\n        // \tthis._output.cancel()\n        // }\n    }\n}\n","export const readAllIntoUint8Array = async (s, size) => {\n    const alloc = new Uint8Array(size);\n    const reader = s.getReader();\n    let written = 0;\n    while (true) {\n        let { value, done } = await reader.read();\n        if (value) {\n            for (let i = 0; i < value.length; i++) {\n                alloc[written + i] = value[i];\n            }\n            written += value.length;\n        }\n        if (done) {\n            break;\n        }\n    }\n    return alloc;\n};\n","import { EventEmitter } from \"events\";\nimport { Download } from \"../../../../download\";\nimport { hexToBytes } from \"../../../../utils/hex\";\nimport { extractPromise } from \"../../../../utils/extractPromise\";\nimport { readAllIntoUint8Array } from \"../../../../utils/readAll\";\nconst downloadFile = (masterHandle, handle) => {\n    const ee = new EventEmitter();\n    const d = new Download({\n        config: {\n            crypto: masterHandle.crypto,\n            network: masterHandle.net,\n            storageNode: masterHandle.downloadOpts.endpoint,\n            metadataNode: masterHandle.downloadOpts.endpoint,\n        },\n        handle: hexToBytes(handle),\n    });\n    d.addEventListener(\"download-progress\", (progress) => {\n        ee.emit(\"download-progress\", { progress: progress.loaded / progress.total });\n    });\n    d._finished.catch((err) => {\n        ee.emit(\"error\", err);\n    });\n    let started = false;\n    let [buf, resolveBuf] = extractPromise();\n    const start = async () => {\n        if (started) {\n            return;\n        }\n        await d.metadata();\n        started = true;\n        const stream = await d.start();\n        console.log(stream);\n        const b = Buffer.from(await readAllIntoUint8Array(stream, d._metadata.size));\n        resolveBuf(b);\n        ee.emit(\"finish\");\n    };\n    const metadata = async () => {\n        return await d.metadata();\n    };\n    const toBuffer = async () => {\n        start();\n        return await buf;\n    };\n    const toFile = async () => {\n        start();\n        const file = new File([await buf], d._metadata.name, { type: d._metadata.type });\n        return file;\n    };\n    const stream = async () => {\n        if (started) {\n            return;\n        }\n        started = true;\n        return d.start();\n    };\n    ee.metadata = metadata;\n    ee.toBuffer = toBuffer;\n    ee.toFile = toFile;\n    ee.stream = stream;\n    return ee;\n};\nexport { downloadFile };\n","import { soliditySha3 } from \"web3-utils\";\nexport const hash = (...val) => {\n    return soliditySha3(...val).replace(/^0x/, \"\");\n};\n","const hashToPath = (h, { prefix = false } = {}) => {\n    if (h.length % 4) {\n        throw new Error(\"hash length must be multiple of two bytes\");\n    }\n    return (prefix ? \"m/\" : \"\") + h.match(/.{1,4}/g).map(p => parseInt(p, 16)).join(\"'/\") + \"'\";\n};\nexport { hashToPath };\n","import { hash } from \"../../../../core/hashing\";\nimport { hashToPath } from \"../../../../utils/hashToPath\";\nconst generateSubHDKey = (masterHandle, pathString) => {\n    const path = hashToPath(hash(pathString), { prefix: true });\n    return masterHandle.derive(path);\n};\nexport { generateSubHDKey };\n","import Axios from \"axios\";\n/**\n * get a list of available plans\n *\n * @param endpoint\n *\n * @internal\n */\nexport async function getPlans(endpoint) {\n    return Axios.get(endpoint + \"/plans\");\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request the creation of an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKey\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function createAccount(endpoint, hdNode, metadataKey, duration = 12, limit = 128) {\n    const payload = {\n        metadataKey: metadataKey,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/accounts\", signedPayload);\n}\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * request creating a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function createMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/create\", signedPayload);\n}\n/**\n * request deleting a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function deleteMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/delete\", signedPayload);\n}\n/**\n * request changing a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n * @param metadata - the metadata to put\n *\n * @internal\n */\nexport async function setMetadata(endpoint, hdNode, metadataKey, metadata) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadata, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/set\", signedPayload);\n}\n/**\n * request get of a metadata entry\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to access\n * @param metadataKey - the key associated with the metadata\n *\n * @internal\n */\nexport async function getMetadata(endpoint, hdNode, metadataKey) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const payload = { timestamp, metadataKey };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/metadata/get\", signedPayload);\n}\n","import FormDataNode from \"form-data\";\nimport * as EthUtil from \"ethereumjs-util\";\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\n/**\n * get a signed payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param hdNode = the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayload(rawPayload, hdNode, key = \"requestBody\") {\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    const signedPayload = {\n        signature,\n        publicKey: pubKey,\n        hash: hash.toString(\"hex\")\n    };\n    signedPayload[key] = payload;\n    return signedPayload;\n}\n/**\n * get a signed formdata payload from an hdkey\n *\n * @param rawPayload - a payload object to be processed and signed\n * @param extraPayload - additional (unsigned) payload information\n * @param hdNode - the account to sign with\n * @param key\n *\n * @internal\n */\nexport function getPayloadFD(rawPayload, extraPayload, hdNode, key = \"requestBody\") {\n    // rawPayload.timestamp = Date.now();\n    const payload = JSON.stringify(rawPayload);\n    const hash = EthUtil.keccak256(payload);\n    const signature = hdNode.sign(hash).toString(\"hex\");\n    const pubKey = hdNode.publicKey.toString(\"hex\");\n    // node, buffers\n    if (POLYFILL_FORMDATA) {\n        const data = new FormDataNode();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        // data.append(\"hash\", hash);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                const pl = Buffer.from(extraPayload[key]);\n                data.append(key, pl, {\n                    filename: key,\n                    contentType: \"application/octet-stream\",\n                    knownLength: pl.length\n                });\n            });\n        }\n        return data;\n    }\n    else {\n        const data = new FormData();\n        data.append(key, payload);\n        data.append(\"signature\", signature);\n        data.append(\"publicKey\", pubKey);\n        if (extraPayload) {\n            Object.keys(extraPayload).forEach(key => {\n                data.append(key, new Blob([extraPayload[key].buffer]), key);\n            });\n        }\n        return data;\n    }\n}\nexport { getPlans } from \"./requests/getPlans\";\nexport { checkPaymentStatus } from \"./requests/checkPaymentStatus\";\nexport { createAccount } from \"./requests/createAccount\";\nexport { getMetadata, setMetadata, createMetadata, deleteMetadata } from \"./requests/metadata\";\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check whether a payment has gone through for an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to check\n *\n * @internal\n */\nexport async function checkPaymentStatus(endpoint, hdNode) {\n    const payload = {\n        timestamp: Math.floor(Date.now() / 1000)\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/account-data\", signedPayload);\n}\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst getAccountInfo = async (masterHandle) => ((await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data.account);\nexport { getAccountInfo };\n","// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nconst posixSep = new RegExp(posix.sep + \"+\", \"g\");\nconst posixSepEnd = new RegExp(\"(.)\" + posix.sep + \"+$\");\n// NOTE: win32 isn't included in the polyfill\nconst win32Sep = new RegExp(\"\\\\+\", \"g\");\nconst trimTrailingSep = (path) => {\n    return path.replace(posixSepEnd, \"$1\");\n};\nconst cleanPath = (path) => {\n    return trimTrailingSep(path.replace(win32Sep, posix.sep).replace(posixSep, posix.sep));\n};\nexport { cleanPath };\n","import { generateSubHDKey } from \"./generateSubHDKey\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderHDKey = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return generateSubHDKey(masterHandle, \"folder: \" + dir);\n};\nexport { getFolderHDKey };\n","import { hash } from \"../../../../core/hashing\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderLocation = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    return hash(masterHandle.getFolderHDKey(dir).publicKey.toString(\"hex\"));\n};\nexport { getFolderLocation };\n","export const FILENAME_MAX_LENGTH = 256;\nexport const CURRENT_VERSION = 1;\nexport const IV_BYTE_LENGTH = 16;\nexport const TAG_BYTE_LENGTH = 16;\nexport const TAG_BIT_LENGTH = TAG_BYTE_LENGTH * 8;\nexport const DEFAULT_BLOCK_SIZE = 64 * 1024;\nexport const BLOCK_OVERHEAD = TAG_BYTE_LENGTH + IV_BYTE_LENGTH;\nexport const DEFAULT_PART_SIZE = 128 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD);\n","import { cipher as ForgeCipher, md as ForgeMd, util as ForgeUtil, random as ForgeRandom } from \"node-forge\";\nimport { IV_BYTE_LENGTH, TAG_BYTE_LENGTH, TAG_BIT_LENGTH, BLOCK_OVERHEAD } from \"./constants\";\nconst Forge = { cipher: ForgeCipher, md: ForgeMd, util: ForgeUtil, random: ForgeRandom };\nconst ByteBuffer = Forge.util.ByteBuffer;\n// Encryption\nexport function encrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    const iv = Forge.random.getBytesSync(IV_BYTE_LENGTH);\n    const cipher = Forge.cipher.createCipher(\"AES-GCM\", keyBuf);\n    cipher.start({\n        iv,\n        tagLength: TAG_BIT_LENGTH\n    });\n    cipher.update(byteBuffer);\n    cipher.finish();\n    byteBuffer.clear();\n    byteBuffer.putBuffer(cipher.output);\n    byteBuffer.putBuffer(cipher.mode.tag);\n    byteBuffer.putBytes(iv);\n    return byteBuffer;\n}\nexport function encryptString(key, string, encoding = \"utf8\") {\n    const buf = Forge.util.createBuffer(string, encoding);\n    return encrypt(key, buf);\n}\nexport function encryptBytes(key, bytes) {\n    return encrypt(key, Forge.util.createBuffer(bytes));\n}\n// Decryption\nexport function decrypt(key, byteBuffer) {\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\n    keyBuf.read = 0;\n    byteBuffer.read = byteBuffer.length() - BLOCK_OVERHEAD;\n    const tag = byteBuffer.getBytes(TAG_BYTE_LENGTH);\n    const iv = byteBuffer.getBytes(IV_BYTE_LENGTH);\n    const decipher = Forge.cipher.createDecipher(\"AES-GCM\", keyBuf);\n    byteBuffer.read = 0;\n    byteBuffer.truncate(BLOCK_OVERHEAD);\n    decipher.start({\n        iv,\n        // the type definitions are wrong in @types/node-forge\n        tag: tag,\n        tagLength: TAG_BIT_LENGTH\n    });\n    decipher.update(byteBuffer);\n    if (decipher.finish()) {\n        return decipher.output;\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptBytes(key, bytes) {\n    const buf = new ByteBuffer(bytes);\n    const output = decrypt(key, buf);\n    if (output) {\n        return Forge.util.binary.raw.decode(output.getBytes());\n    }\n    else {\n        return false;\n    }\n}\nexport function decryptString(key, byteBuffer, encoding = \"utf8\") {\n    const output = decrypt(key, byteBuffer);\n    if (output) {\n        return Buffer.from(output.toString()).toString(encoding);\n    }\n    else {\n        throw new Error(\"unable to decrypt\");\n    }\n}\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        // TODO\n        // I have no idea why but the decrypted is correct hex without converting\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"hex\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return meta;\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","const getHandle = (masterHandle) => {\n    return masterHandle.privateKey.toString(\"hex\") + masterHandle.chainCode.toString(\"hex\");\n};\nexport { getHandle };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isPaid = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"paid\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isPaid };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nimport { createAccount } from \"../../../../core/requests/createAccount\";\nconst register = async (masterHandle, duration, limit) => {\n    if (await masterHandle.isPaid()) {\n        return {\n            data: { invoice: { cost: 0, ethAddress: \"0x0\" } },\n            waitForPayment: async () => ({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data })\n        };\n    }\n    const createAccountResponse = await createAccount(masterHandle.uploadOpts.endpoint, masterHandle, masterHandle.getFolderLocation(\"/\"), duration, limit);\n    return {\n        data: createAccountResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                if (await masterHandle.isPaid() && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { register };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getFolderMeta } from \"../v0/getFolderMeta\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isPaid, register };\n/**\n * internal API v0\n *\n * @internal\n */\nconst v0 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getFolderMeta,\n    getHandle,\n    isPaid,\n    register\n};\nexport default v0;\n","/**\n * metadata to describe a version of a file as it relates to a filesystem\n *\n * @public\n */\nclass FileVersion {\n    /**\n     * create metadata for a file version\n     *\n     * @param handle - the file handle\n     * @param size - the size of the file in bytes\n     * @param created - the date this version was uploaded\n     * @param modified - the date the filesystem marked as last modified\n     */\n    constructor({ handle, size, created = Date.now(), modified = Date.now() }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileVersion([\n            this.handle,\n            this.size,\n            this.created,\n            this.modified\n        ]);\n        this.handle = handle;\n        this.size = size;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileVersion extends Array {\n    constructor([handle, size, created, modified]) {\n        super(4);\n        this.unminify = () => new FileVersion({\n            handle: this[0],\n            size: this[1],\n            created: this[2],\n            modified: this[3]\n        });\n        this[0] = handle;\n        this[1] = size;\n        this[2] = created;\n        this[3] = modified;\n    }\n}\nexport { FileVersion, MinifiedFileVersion };\n","import { FileVersion, MinifiedFileVersion } from \"./file-version\";\n/**\n * metadata to describe a file as it relates to the UI\n *\n * @public\n */\nclass FileEntryMeta {\n    /**\n     * create metadata for a file entry in the UI\n     *\n     * @param name - the name of the file as shown in the UI\n     * @param created - the date in `ms` that this file was initially uploaded\n     * @param created - the date in `ms` that the newest version of this file was uploaded\n     * @param versions - versions of the uploaded file (the most recent of which should be the current version of the file)\n     */\n    constructor({ name, created = Date.now(), modified = Date.now(), versions = [] }) {\n        /** @internal */\n        this.minify = () => new MinifiedFileEntryMeta([\n            this.name,\n            this.created,\n            this.modified,\n            this.versions.map(version => new FileVersion(version).minify())\n        ]);\n        this.name = name;\n        this.created = created;\n        this.modified = modified;\n        this.versions = versions;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFileEntryMeta extends Array {\n    constructor([name, created, modified, versions]) {\n        super(4);\n        this.unminify = () => new FileEntryMeta({\n            name: this[0],\n            created: this[1],\n            modified: this[2],\n            versions: this[3].map(version => new MinifiedFileVersion(version).unminify())\n        });\n        this[0] = name;\n        this[1] = created;\n        this[2] = modified;\n        this[3] = versions;\n    }\n}\nexport { FileEntryMeta, MinifiedFileEntryMeta };\n","/**\n * metadata to describe where a folder can be found (for root metadata of an account)\n *\n * @public\n */\nclass FolderEntryMeta {\n    /**\n     * create metadata entry for a folder\n     *\n     * @param name - a name of the folder shown in the UI\n     * @param location - the public key for the metadata file\n     *   it is how the file will be queried for (using the same system as for the account metadata)\n     */\n    constructor({ name, location }) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderEntryMeta([\n            this.name,\n            this.location\n        ]);\n        this.name = name;\n        this.location = location;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderEntryMeta extends Array {\n    constructor([name, location]) {\n        super(2);\n        this.unminify = () => new FolderEntryMeta({\n            name: this[0],\n            location: this[1]\n        });\n        this[0] = name;\n        this[1] = location;\n    }\n}\nexport { FolderEntryMeta, MinifiedFolderEntryMeta };\n","import { FileEntryMeta, MinifiedFileEntryMeta } from \"./file-entry\";\nimport { FolderEntryMeta, MinifiedFolderEntryMeta } from \"./folder-entry\";\n/**\n * metadata to describe a folder for the UI\n *\n * @public\n */\nclass FolderMeta {\n    /**\n     * create metadata for a folder\n     *\n     * @param name - a nickname shown on the folder when accessed without adding to account metadata\n     * @param files - the files included only in the most shallow part of the folder\n     * @param created - when the folder was created (if not created now) in `ms`\n     * @param created - when the folder was changed (if not modified now) in `ms`\n     */\n    constructor({ name = \"Folder\", files = [], folders = [], created = Date.now(), modified = Date.now() } = {}) {\n        /** @internal */\n        this.minify = () => new MinifiedFolderMeta([\n            this.name,\n            this.files.map(file => new FileEntryMeta(file).minify()),\n            this.folders.map(folder => new FolderEntryMeta(folder).minify()),\n            this.created,\n            this.modified\n        ]);\n        this.name = name;\n        this.files = files;\n        this.folders = folders;\n        this.created = created;\n        this.modified = modified;\n    }\n}\n/**\n * @internal\n */\nclass MinifiedFolderMeta extends Array {\n    constructor([name, files, folders, created, modified]) {\n        super(5);\n        this.unminify = () => new FolderMeta({\n            name: this[0],\n            files: this[1].map(file => new MinifiedFileEntryMeta(file).unminify()),\n            folders: this[2].map(folder => new MinifiedFolderEntryMeta(folder).unminify()),\n            created: this[3],\n            modified: this[4]\n        });\n        this[0] = name;\n        this[1] = files;\n        this[2] = folders;\n        this[3] = created;\n        this[4] = modified;\n    }\n}\nexport { FolderMeta, MinifiedFolderMeta };\n","import { EventEmitter } from \"events\";\nimport debounce from \"debounce\";\nclass NetQueue extends EventEmitter {\n    constructor({ fetch, update, data = {}, timeout = 1000 }) {\n        super();\n        this.updating = false;\n        this.queue = [];\n        this.types = {};\n        this.data = {};\n        this._timeout = 1000;\n        this.push = ({ type, payload }) => {\n            this.queue.push({ type, payload });\n            this._process();\n        };\n        this.addType = ({ type, handler }) => {\n            this.types[type] = handler;\n        };\n        this._process = debounce(async () => {\n            if (this.updating)\n                return;\n            this.updating = true;\n            const queueCopy = Object.assign([], this.queue);\n            this.result = await Promise.resolve(this._fetch());\n            for (let { type, payload } of queueCopy) {\n                if (this.types[type])\n                    this.result = await Promise.resolve(this.types[type](this.result, payload));\n                else\n                    throw new Error(\"unknown type: \" + type);\n                this.queue.shift();\n            }\n            await Promise.resolve(this._update(this.result));\n            this.updating = false;\n            this.emit(\"update\", this.result);\n            if (this.queue.length)\n                this._process();\n        }, this._timeout);\n        this._fetch = fetch;\n        this._update = update;\n        this.data = data;\n        this._timeout = timeout;\n    }\n}\nexport { NetQueue };\n","import { hash } from \"../../../hashing\";\nimport { encryptString } from \"../../../encryption\";\nimport { setMetadata } from \"../../../requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst setFolderMeta = async (masterHandle, dir, folderMeta) => {\n    dir = cleanPath(dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), key = hash(folderKey.privateKey.toString(\"hex\")), metaString = JSON.stringify(folderMeta.minify()), encryptedMeta = Buffer.from(encryptString(key, metaString, \"utf8\").toHex(), \"hex\").toString(\"base64\");\n    // TODO: verify folder can only be changed by the creating account\n    await setMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir), encryptedMeta);\n};\nexport { setFolderMeta };\n","const removeFile = async (metaQueue, meta, file) => {\n    // precondition for if file is no longer in the metadata\n    if (!meta.files.find(f => file === f || file.name === f.name))\n        return meta;\n    meta.files = meta.files.filter(f => file !== f && file.name !== f.name);\n    return meta;\n};\nexport { removeFile };\n","const removeVersion = async (metaQueue, meta, version) => {\n    const file = meta.files.find(f => f.versions.includes(version) || !!f.versions.find(v => version.handle === v.handle));\n    // precondition for if version no longer exists in meta\n    if (!file)\n        return meta;\n    file.versions = file.versions.filter(v => version !== v && version.handle !== v.handle);\n    if (file.versions.length === 0)\n        metaQueue.push({\n            type: \"remove-file\",\n            payload: file\n        });\n    return meta;\n};\nexport { removeVersion };\n","const addFile = (metaQueue, meta, file) => {\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    if (existingFile) {\n        existingFile.modified = file.modified;\n        existingFile.versions = [...existingFile.versions, ...file.versions];\n    }\n    else {\n        meta.files.push(file);\n    }\n    return meta;\n};\nexport { addFile };\n","const addFolder = (metaQueue, meta, folder) => {\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    if (!existingFolder)\n        meta.folders.push(folder);\n    return meta;\n};\nexport { addFolder };\n","const removeFolder = async (metaQueue, meta, folder) => {\n    // precondition for if folder is no longer in the metadata\n    if (!meta.folders.find(f => folder === f || folder.name === f.name))\n        return meta;\n    meta.folders = meta.folders.filter(f => folder !== f && folder.name !== f.name);\n    return meta;\n};\nexport { removeFolder };\n","import { NetQueue } from \"../../../../utils/netQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { removeFile } from \"./meta/removeFile\";\nimport { removeVersion } from \"./meta/removeVersion\";\nimport { addFile } from \"./meta/addFile\";\nimport { addFolder } from \"./meta/addFolder\";\nimport { removeFolder } from \"./meta/removeFolder\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createMetaQueue = (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    if (masterHandle.metaQueue[dir])\n        return;\n    const metaQueue = new NetQueue({\n        fetch: async () => {\n            return getFolderMeta(masterHandle, dir);\n        },\n        update: async (meta) => {\n            await setFolderMeta(masterHandle, dir, meta);\n        }\n    });\n    const types = [\n        { type: \"add-folder\", action: addFolder },\n        { type: \"add-file\", action: addFile },\n        { type: \"remove-folder\", action: removeFolder },\n        { type: \"remove-file\", action: removeFile },\n        { type: \"remove-version\", action: removeVersion }\n    ];\n    for (let type of types) {\n        metaQueue.addType({\n            type: type.type,\n            handler: async (meta, payload) => {\n                return await type.action(metaQueue, meta, payload);\n            }\n        });\n    }\n    masterHandle.metaQueue[dir] = metaQueue;\n};\nexport { createMetaQueue };\n","import { util as ForgeUtil } from \"node-forge\";\nimport { hash } from \"../../../../core/hashing\";\nimport { getMetadata } from \"../../../../core/requests/metadata\";\nimport { decrypt } from \"../../../../core/encryption\";\nimport { MinifiedFolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst getFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    createMetaQueue(masterHandle, dir);\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \n    // TODO: verify folder can only be read by the creating account\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // folderKey,\n    location);\n    try {\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"base64\"))).toString();\n        try {\n            const meta = JSON.parse(metaString);\n            return new MinifiedFolderMeta(meta).unminify();\n        }\n        catch (err) {\n            console.error(err);\n            console.info(\"META STRING:\", metaString);\n            throw new Error(\"metadata corrupted\");\n        }\n    }\n    catch (err) {\n        console.error(err);\n        throw new Error(\"error decrypting meta\");\n    }\n};\nexport { getFolderMeta };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst buildFullTree = async (masterHandle, dir = \"/\") => {\n    dir = cleanPath(dir);\n    const tree = {};\n    tree[dir] = await getFolderMeta(masterHandle, dir);\n    await Promise.all(tree[dir].folders.map(async (folder) => {\n        Object.assign(tree, await buildFullTree(masterHandle, posix.join(dir, folder.name)));\n    }));\n    return tree;\n};\nexport { buildFullTree };\n","import { FolderEntryMeta } from \"../../../../core/account/folder-entry\";\nimport { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\n// TODO: don't use polyfill\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderFn = async (masterHandle, dir, name) => {\n    const fullDir = posix.join(dir, name);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    // recurively create containing folders first\n    if (!await masterHandle.getFolderMeta(dir).catch(console.warn))\n        await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n    if (await masterHandle.getFolderMeta(fullDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    // initialize as empty folder\n    await masterHandle.createFolderMeta(fullDir).catch(console.warn);\n    await masterHandle.setFolderMeta(fullDir, new FolderMeta({ name }));\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: masterHandle.getFolderLocation(fullDir)\n        })\n    });\n};\nconst createFolder = async (masterHandle, dir, name) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, name);\n    if (masterHandle.metaFolderCreating[fullDir]) {\n        // TODO: this is hacky\n        await new Promise(resolve => {\n            const interval = setInterval(() => {\n                if (!masterHandle.metaFolderCreating[fullDir]) {\n                    resolve();\n                    clearInterval(interval);\n                }\n            }, 250);\n        });\n        return;\n    }\n    masterHandle.metaFolderCreating[fullDir] = true;\n    await createFolderFn(masterHandle, dir, name);\n    masterHandle.metaFolderCreating[fullDir] = false;\n};\nexport { createFolder };\n","import { createMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst createFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    try {\n        // TODO: verify folder can only be changed by the creating account\n        await createMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n        // masterHandle.getFolderHDKey(dir),\n        masterHandle.getFolderLocation(dir));\n    }\n    catch (err) {\n        console.error(`Can't create folder metadata for folder ${dir}`);\n        throw err;\n    }\n};\nexport { createFolderMeta };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n// Metadata as hexstring as of right now\nexport async function deleteFile(endpoint, hdNode, fileID) {\n    const payload = { fileID };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/delete\", signedPayload);\n}\n","import { deleteFile as requestDeleteFile } from \"../../../../core/requests/deleteFile\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteVersion = async (masterHandle, dir, version) => {\n    dir = cleanPath(dir);\n    await requestDeleteFile(masterHandle.uploadOpts.endpoint, masterHandle, \n    // only send the location, not the private key\n    version.handle.slice(0, 64)).catch(err => {\n        console.warn(\"version does not exist\");\n        console.warn(err);\n    });\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-version\",\n        payload: version\n    });\n};\nexport { deleteVersion };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFile = async (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir);\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // precondition for if file is no longer in the metadata\n    if (!existingFile)\n        return;\n    for (let version of existingFile.versions) {\n        await deleteVersion(masterHandle, dir, version);\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n};\nexport { deleteFile };\n","import { createMetaQueue } from \"./createMetaQueue\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolder = async (masterHandle, dir, folder) => {\n    dir = cleanPath(dir);\n    const fullDir = posix.join(dir, folder.name);\n    if (folder.name.indexOf(\"/\") > 0 || folder.name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const meta = await masterHandle.getFolderMeta(fullDir).catch(console.warn);\n    if (meta) {\n        await Promise.all([\n            (async () => {\n                try {\n                    for (let folder of meta.folders) {\n                        await masterHandle.deleteFolder(fullDir, folder);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete sub folders\");\n                    throw err;\n                }\n            })(),\n            (async () => {\n                try {\n                    for (let file of meta.files) {\n                        await masterHandle.deleteFile(fullDir, file);\n                    }\n                }\n                catch (err) {\n                    console.error(\"Failed to delete file\");\n                    throw err;\n                }\n            })()\n        ]);\n    }\n    try {\n        await masterHandle.deleteFolderMeta(fullDir);\n    }\n    catch (err) {\n        console.error(\"Failed to delete meta entry\");\n        throw err;\n    }\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: folder\n    });\n};\nexport { deleteFolder };\n","import { deleteMetadata } from \"../../../../core/requests/metadata\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst deleteFolderMeta = async (masterHandle, dir) => {\n    dir = cleanPath(dir);\n    // TODO: verify folder can only be changed by the creating account\n    await deleteMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \n    // masterHandle.getFolderHDKey(dir),\n    masterHandle.getFolderLocation(dir));\n};\nexport { deleteFolderMeta };\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\nconst isExpired = async (masterHandle) => {\n    try {\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\n        return accountInfoResponse.data.paymentStatus == \"expired\";\n    }\n    catch {\n        return false;\n    }\n};\nexport { isExpired };\n","import { FolderMeta } from \"../../../../core/account/folder-meta\";\nimport { getFolderMeta, isPaid } from \"../v0/index\";\nconst login = async (masterHandle) => {\n    // only attempt changes if account is paid\n    if (!await isPaid(masterHandle)) {\n        return;\n    }\n    // try newer meta\n    try {\n        await masterHandle.getFolderMeta(\"/\");\n    }\n    catch (err) {\n        // try older meta\n        try {\n            const meta = await getFolderMeta(masterHandle, \"/\");\n            await masterHandle.deleteFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            console.info(\"--- META ---\", meta);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta(meta));\n        }\n        catch (err) {\n            // no meta exists\n            // set meta to an empty meta\n            console.warn(err);\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta());\n        }\n    }\n};\nexport { login };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFile = async (masterHandle, dir, { file, to }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-file\",\n        payload: existingFile\n    });\n};\nexport { moveFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst moveFolder = async (masterHandle, dir, { folder, to }) => {\n    dir = cleanPath(dir);\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(to, folder.name);\n    const folderMeta = await getFolderMeta(masterHandle, oldDir).catch(console.warn), outerMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!outerMeta)\n        throw new Error(\"Outer folder does not exist\");\n    if (!toMeta)\n        throw new Error(\"Can't move to folder that doesn't exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = outerMeta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"File no longer exists\");\n    await createFolderMeta(masterHandle, newDir).catch(console.warn);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    createMetaQueue(masterHandle, to);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[to].push({\n        type: \"add-folder\",\n        payload: existingFolder\n    });\n};\nexport { moveFolder };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFile = async (masterHandle, dir, { file, name }) => {\n    dir = cleanPath(dir);\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!meta)\n        throw new Error(\"Folder does not exist\");\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\n    // file is no longer in the metadata\n    if (!existingFile)\n        throw new Error(\"File no longer exists\");\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-file\",\n        payload: existingFile\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-file\",\n        payload: new FileEntryMeta({\n            ...existingFile,\n            name\n        })\n    });\n};\nexport { renameFile };\n","import { getFolderMeta } from \"./getFolderMeta\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { getFolderLocation } from \"./index\";\nimport { FolderEntryMeta } from \"../../folder-entry\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nconst renameFolder = async (masterHandle, dir, { folder, name }) => {\n    dir = cleanPath(dir);\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\n        throw new Error(\"Invalid folder name\");\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(dir, name);\n    const folderMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\n    if (!folderMeta)\n        throw new Error(\"Folder does not exist\");\n    if (!meta)\n        throw new Error(\"Outer folder does not exist\");\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\n        throw new Error(\"Folder already exists\");\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\n    // folder is no longer in the metadata\n    if (!existingFolder)\n        throw new Error(\"Folder no longer exists\");\n    await createFolder(masterHandle, dir, name);\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\n    await deleteFolderMeta(masterHandle, oldDir);\n    createMetaQueue(masterHandle, dir);\n    masterHandle.metaQueue[dir].push({\n        type: \"remove-folder\",\n        payload: existingFolder\n    });\n    masterHandle.metaQueue[dir].push({\n        type: \"add-folder\",\n        payload: new FolderEntryMeta({\n            name,\n            location: getFolderLocation(masterHandle, newDir)\n        })\n    });\n};\nexport { renameFolder };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to renew\n * @param fileHandles - all file handles from the account to renew\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew\", signedPayload);\n}\n/**\n * request an invoice for renewing an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function renewAccountInvoice(endpoint, hdNode, duration = 12) {\n    const payload = {\n        durationInMonths: duration\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/renew/invoice\", signedPayload);\n}\n","import { renewAccountStatus, renewAccountInvoice } from \"../../../requests/renewAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst renewAccount = async (masterHandle, duration) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const renewAccountInvoiceResponse = await renewAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration);\n    console.log(renewAccountInvoiceResponse);\n    const renewAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration\n    ];\n    return {\n        data: renewAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const renewAccountStatusResponse = await renewAccountStatus(...renewAccountStatusOpts);\n                console.log(renewAccountStatusResponse);\n                if (renewAccountStatusResponse.data.status\n                    && renewAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: renewAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { renewAccount };\n","import Axios from \"axios\";\nimport { getPayload } from \"../request\";\n/**\n * check the status of upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param metadataKeys - all metadata keys from the account to upgrade\n * @param fileHandles - all file handles from the account to upgrade\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountStatus(endpoint, hdNode, metadataKeys, fileHandles, duration = 12, limit = 128) {\n    const payload = {\n        metadataKeys,\n        fileHandles,\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade\", signedPayload);\n}\n/**\n * request an invoice for upgrading an account\n *\n * @param endpoint - the base url to send the request to\n * @param hdNode - the account to create\n * @param duration - account duration in months\n * @param limit - storage limit in GB\n *\n * @internal\n */\nexport async function upgradeAccountInvoice(endpoint, hdNode, duration = 12, limit = 128) {\n    const payload = {\n        durationInMonths: duration,\n        storageLimit: limit\n    };\n    const signedPayload = getPayload(payload, hdNode);\n    return Axios.post(endpoint + \"/api/v1/upgrade/invoice\", signedPayload);\n}\n","import { upgradeAccountStatus, upgradeAccountInvoice } from \"../../../requests/upgradeAccount\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nconst upgradeAccount = async (masterHandle, duration, limit) => {\n    const tree = await buildFullTree(masterHandle, \"/\");\n    const metadataKeys = Object.keys(tree).map(dir => getFolderLocation(masterHandle, dir));\n    const fileHandles = Object.values(tree).map(folder => folder.files.map(file => file.versions.map(version => version.handle.slice(0, 64)))).flat(2);\n    console.log(metadataKeys, fileHandles);\n    const upgradeAccountInvoiceResponse = await upgradeAccountInvoice(masterHandle.uploadOpts.endpoint, masterHandle, duration, limit);\n    console.log(upgradeAccountInvoiceResponse);\n    const upgradeAccountStatusOpts = [\n        masterHandle.uploadOpts.endpoint,\n        masterHandle,\n        metadataKeys,\n        fileHandles,\n        duration,\n        limit\n    ];\n    return {\n        data: upgradeAccountInvoiceResponse.data,\n        waitForPayment: () => new Promise(resolve => {\n            const interval = setInterval(async () => {\n                // don't perform run if it takes more than 5 seconds for response\n                const time = Date.now();\n                const upgradeAccountStatusResponse = await upgradeAccountStatus(...upgradeAccountStatusOpts);\n                console.log(upgradeAccountStatusResponse);\n                if (upgradeAccountStatusResponse.data.status\n                    && upgradeAccountStatusResponse.data.status !== \"Incomplete\"\n                    && time + 5 * 1000 > Date.now()) {\n                    clearInterval(interval);\n                    await masterHandle.login();\n                    resolve({ data: upgradeAccountStatusResponse.data });\n                }\n            }, 10 * 1000);\n        })\n    };\n};\nexport { upgradeAccount };\n","import { EventEmitter } from \"events\";\nimport { Upload } from \"../../../../upload\";\nimport { FileEntryMeta } from \"../../file-entry\";\nimport { FileVersion } from \"../../file-version\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { createFolder } from \"./createFolder\";\nimport { posix } from \"path-browserify\";\nimport { cleanPath } from \"../../../../utils/cleanPath\";\nimport { bytesToHex } from \"../../../../utils/hex\";\nimport { polyfillReadableStream } from \"../../../../utils/polyfillStream\";\nconst uploadFile = async (masterHandle, dir, file) => {\n    dir = cleanPath(dir);\n    const upload = new Upload({\n        config: {\n            crypto: masterHandle.crypto,\n            network: masterHandle.net,\n            storageNode: masterHandle.uploadOpts.endpoint,\n            metadataNode: masterHandle.uploadOpts.endpoint,\n        },\n        name: file.name,\n        size: file.size,\n        type: file.type,\n    }), ee = new EventEmitter();\n    await upload.generateHandle();\n    const handle = bytesToHex(new Uint8Array([...upload._location, ...upload._key]));\n    ee.handle = handle;\n    upload.addEventListener(\"upload-progress\", (progress) => {\n        ee.emit(\"upload-progress\", { progress: progress.loaded / progress.total });\n    });\n    upload.addEventListener(\"error\", err => {\n        ee.emit(\"error\", err);\n    });\n    upload.finish().then(async () => {\n        if (!await getFolderMeta(masterHandle, dir).catch(console.warn))\n            await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\n        createMetaQueue(masterHandle, dir);\n        masterHandle.metaQueue[dir].push({\n            type: \"add-file\",\n            payload: new FileEntryMeta({\n                name: file.name,\n                modified: file.lastModified,\n                versions: [\n                    new FileVersion({\n                        handle,\n                        size: file.size,\n                        modified: file.lastModified\n                    })\n                ]\n            })\n        });\n        masterHandle.metaQueue[dir].once(\"update\", meta => {\n            ee.emit(\"finish\", { handle });\n        });\n    });\n    const stream = await upload.start();\n    polyfillReadableStream(file.stream()).pipeThrough(stream);\n    return ee;\n};\nexport { uploadFile };\n","import { downloadFile } from \"../v0/downloadFile\";\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\nimport { getHandle } from \"../v0/getHandle\";\nimport { isPaid } from \"../v0/isPaid\";\nimport { register } from \"../v0/register\";\nimport { buildFullTree } from \"./buildFullTree\";\nimport { createFolder } from \"./createFolder\";\nimport { createFolderMeta } from \"./createFolderMeta\";\nimport { createMetaQueue } from \"./createMetaQueue\";\nimport { deleteFile } from \"./deleteFile\";\nimport { deleteFolder } from \"./deleteFolder\";\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\nimport { deleteVersion } from \"./deleteVersion\";\nimport { getFolderMeta } from \"./getFolderMeta\";\nimport { isExpired } from \"./isExpired\";\nimport { login } from \"./login\";\nimport { moveFile } from \"./moveFile\";\nimport { moveFolder } from \"./moveFolder\";\nimport { renameFile } from \"./renameFile\";\nimport { renameFolder } from \"./renameFolder\";\nimport { renewAccount } from \"./renewAccount\";\nimport { setFolderMeta } from \"./setFolderMeta\";\nimport { upgradeAccount } from \"./upgradeAccount\";\nimport { uploadFile } from \"./uploadFile\";\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getHandle, isPaid, register, buildFullTree, createFolder, createFolderMeta, createMetaQueue, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, getFolderMeta, isExpired, login, moveFile, moveFolder, renameFile, renameFolder, renewAccount, setFolderMeta, upgradeAccount, uploadFile };\n/**\n * internal API v1\n *\n * @internal\n */\nconst v1 = {\n    downloadFile,\n    generateSubHDKey,\n    getAccountInfo,\n    getFolderHDKey,\n    getFolderLocation,\n    getHandle,\n    isPaid,\n    register,\n    buildFullTree,\n    createFolder,\n    createFolderMeta,\n    createMetaQueue,\n    deleteFile,\n    deleteFolder,\n    deleteFolderMeta,\n    deleteVersion,\n    getFolderMeta,\n    isExpired,\n    login,\n    moveFile,\n    moveFolder,\n    renameFile,\n    renameFolder,\n    renewAccount,\n    setFolderMeta,\n    upgradeAccount,\n    uploadFile\n};\nexport default v1;\n","import HDKey from \"hdkey\";\nexport class WebAccountMiddleware {\n    constructor({ symmetricKey, asymmetricKey } = {}) {\n        this.asymmetricKey = asymmetricKey;\n        this.symmetricKey = symmetricKey;\n    }\n    async getPublicKey(k = this.asymmetricKey) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        return hd.publicKey;\n    }\n    async derive(k = this.asymmetricKey, p) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        const derived = hd.derive(p);\n        const k2 = Buffer.concat([derived.privateKey, derived.chainCode]);\n        hd.wipePrivateData();\n        return k2;\n    }\n    async sign(k = this.asymmetricKey, d) {\n        const hd = new HDKey();\n        hd.privateKey = new Buffer(k.slice(0, 32));\n        hd.chainCode = new Buffer(k.slice(32));\n        const sig = hd.sign(new Buffer(d));\n        hd.wipePrivateData();\n        return sig;\n    }\n    async encrypt(k = this.symmetricKey, d) {\n        const key = await crypto.subtle.importKey(\"raw\", k, \"AES-GCM\", false, [\"encrypt\"]);\n        const iv = crypto.getRandomValues(new Uint8Array(16));\n        const encrypted = new Uint8Array(await crypto.subtle.encrypt({ name: \"AES-GCM\", iv, tagLength: 128 }, key, d));\n        return new Uint8Array([...encrypted, ...iv]);\n    }\n    async decrypt(k = this.symmetricKey, ct) {\n        const key = await crypto.subtle.importKey(\"raw\", k, \"AES-GCM\", false, [\"decrypt\"]);\n        return new Uint8Array(await crypto.subtle.decrypt({ name: \"AES-GCM\", iv: ct.slice(-16) }, key, ct.slice(0, -16)));\n    }\n}\n","const fetchAdapter = async (method, address, headers, body, mapReturn = async (b) => await new Response(b).arrayBuffer()) => {\n    const res = await fetch(address, { method, body, headers });\n    return {\n        headers: res.headers,\n        data: await mapReturn(res.body),\n        ok: res.ok,\n        redirected: res.redirected,\n        status: res.status,\n        statusText: res.statusText,\n        url: address,\n    };\n};\nexport class WebNetworkMiddleware {\n    async GET(address, headers, body, mapReturn) {\n        return await fetchAdapter(\"GET\", address, headers, body, mapReturn);\n    }\n    async POST(address, headers, body, mapReturn) {\n        return await fetchAdapter(\"POST\", address, headers, body, mapReturn);\n    }\n}\n","import { generateMnemonic, mnemonicToSeedSync, validateMnemonic, } from \"bip39\";\nimport HDKey, { fromMasterSeed } from \"hdkey\";\nimport * as namehash from \"eth-ens-namehash\";\nimport { hashToPath } from \"./utils/hashToPath\";\nimport { buildFullTree, createFolder, createFolderMeta, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isExpired, isPaid, login, moveFile, moveFolder, register, renameFile, renameFolder, renewAccount, setFolderMeta, uploadFile, upgradeAccount } from \"./core/account/api/v1/index\";\nimport { WebAccountMiddleware } from \"./core/web/webAccountMiddleware\";\nimport { WebNetworkMiddleware } from \"./core/web/webNetworkMiddleware\";\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for representing the account mnemonic\n *\n * @public\n */\nclass Account {\n    /**\n     * creates an account from a mnemonic if provided, otherwise from entropy\n     *\n     * @param mnemonic - the mnemonic to use for the account\n     */\n    constructor(mnemonic = generateMnemonic()) {\n        if (!validateMnemonic(mnemonic)) {\n            throw new Error(\"mnemonic provided was not valid\");\n        }\n        this._mnemonic = mnemonic;\n    }\n    get mnemonic() {\n        return this._mnemonic.trim().split(/\\s+/g);\n    }\n    get seed() {\n        return mnemonicToSeedSync(this._mnemonic);\n    }\n}\n/**\n * <b><i>this should never be shared or left in storage</i></b><br />\n *\n * a class for creating a master handle from an account mnemonic\n *\n * @remarks\n *\n * a master handle is responsible for:\n *  <br /> - logging in to an account\n *  <br /> - signing changes for the account\n *  <br /> - deterministic entropy for generating features of an account (such as folder keys)\n *\n * @public\n */\nclass MasterHandle extends HDKey {\n    /**\n     * creates a master handle from an account\n     *\n     * @param _ - the account to generate the handle from\n     * @param _.account - an {@link Account}\n     * @param _.handle - an account handle as a string\n     */\n    constructor({ account, handle, }, { uploadOpts = {}, downloadOpts = {} } = {}) {\n        super();\n        this.metaQueue = {};\n        this.metaFolderCreating = {};\n        /**\n         * creates a sub key seed for validating\n         *\n         * @param path - the string to use as a sub path\n         */\n        this.generateSubHDKey = (pathString) => generateSubHDKey(this, pathString);\n        this.uploadFile = (dir, file) => uploadFile(this, dir, file);\n        this.downloadFile = (handle) => downloadFile(this, handle);\n        /**\n         * deletes every version of a file and removes it from the metadata\n         *\n         * @param dir - the containing folder\n         * @param file - file entry to delete (loosely matched name)\n         */\n        this.deleteFile = (dir, file) => deleteFile(this, dir, file);\n        /**\n         * deletes a single version of a file (ie. delete by handle)\n         *\n         * @param dir - the containing folder\n         * @param version - version to delete (loosely matched by handle)\n         */\n        this.deleteVersion = (dir, version) => deleteVersion(this, dir, version);\n        /**\n         * creates a dir key seed for validating and folder navigation\n         *\n         * @param dir - the folder\n         */\n        this.getFolderHDKey = (dir) => getFolderHDKey(this, dir);\n        /**\n         * get the location (ie. metadata id) of a folder\n         *\n         * @remarks this is a deterministic location derived from the account's hdkey to allow for random folder access\n         *\n         * @param dir - the folder to locate\n         */\n        this.getFolderLocation = (dir) => getFolderLocation(this, dir);\n        /**\n         * request the creation of a folder metadata\n         *\n         * @param dir - the folder to create\n         */\n        this.createFolderMeta = async (dir) => createFolderMeta(this, dir);\n        /**\n         * create folder {name} inside of {dir}\n         *\n         * @param dir - the containing folder\n         * @param name - the name of the new folder\n         */\n        this.createFolder = async (dir, name) => createFolder(this, dir, name);\n        this.deleteFolderMeta = async (dir) => deleteFolderMeta(this, dir);\n        this.deleteFolder = async (dir, folder) => deleteFolder(this, dir, folder);\n        this.moveFile = async (dir, { file, to }) => moveFile(this, dir, { file, to });\n        this.moveFolder = async (dir, { folder, to }) => moveFolder(this, dir, { folder, to });\n        this.renameFile = async (dir, { file, name }) => renameFile(this, dir, { file, name });\n        this.renameFolder = async (dir, { folder, name }) => renameFolder(this, dir, { folder, name });\n        this.setFolderMeta = async (dir, folderMeta) => setFolderMeta(this, dir, folderMeta);\n        this.getFolderMeta = async (dir) => getFolderMeta(this, dir);\n        /**\n         * recursively build full file tree starting from directory {dir}\n         *\n         * @param dir - the starting directory\n         */\n        this.buildFullTree = async (dir) => buildFullTree(this, dir);\n        this.getAccountInfo = async () => getAccountInfo(this);\n        this.isExpired = async () => isExpired(this);\n        this.isPaid = async () => isPaid(this);\n        this.login = async () => login(this);\n        this.register = async (duration, limit) => register(this, duration, limit);\n        this.upgrade = async (duration, limit) => upgradeAccount(this, duration, limit);\n        this.renew = async (duration) => renewAccount(this, duration);\n        this.uploadOpts = uploadOpts;\n        this.downloadOpts = downloadOpts;\n        if (account && account.constructor == Account) {\n            const path = \"m/43'/60'/1775'/0'/\" + hashToPath(namehash.hash(\"opacity.io\").replace(/^0x/, \"\"));\n            // ethereum/EIPs#1775\n            Object.assign(this, fromMasterSeed(account.seed).derive(path));\n        }\n        else if (handle && handle.constructor == String) {\n            this.privateKey = Buffer.from(handle.slice(0, 64), \"hex\");\n            this.chainCode = Buffer.from(handle.slice(64), \"hex\");\n        }\n        else {\n            throw new Error(\"master handle was not of expected type\");\n        }\n        this.crypto = new WebAccountMiddleware({ asymmetricKey: new Uint8Array([...this.privateKey, ...this.chainCode]) });\n        this.net = new WebNetworkMiddleware();\n    }\n    /**\n     * get the account handle\n     */\n    get handle() {\n        return getHandle(this);\n    }\n}\nexport { Account, MasterHandle, HDKey };\n"],"names":["allSettled","arr","resolved","rejected","mutex","Mutex","forEach","p","release","acquire","push","err","reduce","acc","res","i","bytesToHex","b","n","toString","slice","join","hexToBytes","h","Uint8Array","match","map","parseInt","blockSize","blockOverhead","blockSizeOnFS","numberOfBlocks","size","Math","floor","numberOfBlocksOnFS","sizeOnFS","serializeEncrypted","crypto","bytes","key","v","decrypt","s","TextDecoder","decode","JSON","parse","blocksPerPart","partSize","partSizeOnFS","numberOfPartsOnFS","extractPromise","rs","rj","promise","Promise","resole","reject","OQ","constructor","concurrency","tolerance","_e","EventTarget","_n","_o","_u","_c","_isClosed","_queue","_m","_cl","_ct","closed","resolveClosed","_closed","_resolveClosed","waitForClose","waitForLine","resolve","addEventListener","waitForWork","name","l","c","loaded","removeEventListener","waitForWorkFinish","waitForCommit","add","wfn","cfn","workPromise","resolveReadyForWork","findIndex","n2","splice","length","shift","dispatchEvent","ProgressEvent","w","then","close","Uint8ArrayChunkStream","writableStrategy","readableStrategy","hooks","_l","_hooks","_size","_buffer","t","_transformer","TransformStream","flush","controller","_a","_b","enqueue","transform","_transform","bind","readable","writable","chunk","written","numberOfChunks","bufIndex","sl","polyfillReadableStream","strategy","reader","getReader","ReadableStreamPolyfill","pull","r","read","value","done","Download","config","handle","_cancelled","_errored","_started","_done","_paused","_unpaused","_progress","network","_location","_key","d","finished","_finished","_resolve","val","_reject","cancelled","errored","started","_sizeOnFS","_metadata","pause","unpaused","unpause","_unpause","downloadUrl","_downloadUrl","downloadUrlRes","POST","storageNode","undefined","stringify","fileID","Response","arrayBuffer","fileDownloadUrl","catch","data","metadata","metadataRes","GET","start","_output","rej","_numberOfBlocks","_numberOfParts","netQueue","decryptQueue","_netQueue","_decryptQueue","partIndex","ReadableStream","range","min","pipeThrough","pipeTo","WritableStream","write","part","blockIndex","bi","block","decrypted","total","all","cancel","finish","getPayload","payload","rawPayload","payloadKey","hash","keccak256","signature","sign","pubKey","getPublicKey","getPayloadFD","extraPayload","FormData","append","Object","keys","Blob","buffer","Retry","fn","firstTimer","nextTimer","maxRetries","handler","_handler","_timer","_nextTimer","last","_retries","_maxRetries","_fn","_retry","console","info","log","setTimeout","Upload","type","_dataOffset","_encryped","_partOffset","u","generateHandle","subtle","exportKey","generateKey","getRandomValues","encryptedMeta","encrypt","TextEncoder","encode","fd","fileHandle","fileSizeInByte","endIndex","encryptQueue","Number","MAX_SAFE_INTEGER","_encryptQueue","partCollector","ByteLengthQueuingStrategy","highWaterMark","encrypted","byteIndex","byte","chunkData","warn","readAllIntoUint8Array","alloc","downloadFile","masterHandle","ee","EventEmitter","net","downloadOpts","endpoint","metadataNode","progress","emit","buf","resolveBuf","stream","Buffer","from","toBuffer","toFile","file","File","soliditySha3","replace","hashToPath","prefix","Error","generateSubHDKey","pathString","path","derive","getPlans","Axios","get","createAccount","hdNode","metadataKey","duration","limit","durationInMonths","storageLimit","signedPayload","post","createMetadata","timestamp","Date","now","deleteMetadata","setMetadata","getMetadata","POLYFILL_FORMDATA","EthUtil","publicKey","FormDataNode","pl","filename","contentType","knownLength","checkPaymentStatus","getAccountInfo","uploadOpts","account","posixSep","RegExp","posix","sep","posixSepEnd","win32Sep","trimTrailingSep","cleanPath","getFolderHDKey","dir","getFolderLocation","IV_BYTE_LENGTH","TAG_BYTE_LENGTH","TAG_BIT_LENGTH","BLOCK_OVERHEAD","Forge","cipher","ForgeCipher","md","ForgeMd","util","ForgeUtil","random","ForgeRandom","ByteBuffer","byteBuffer","keyBuf","iv","getBytesSync","createCipher","tagLength","update","clear","putBuffer","output","mode","tag","putBytes","encryptString","string","encoding","createBuffer","getBytes","decipher","createDecipher","truncate","getFolderMeta","folderKey","location","privateKey","response","metaString","meta","error","getHandle","chainCode","isPaid","accountInfoResponse","paymentStatus","register","invoice","cost","ethAddress","waitForPayment","createAccountResponse","interval","setInterval","time","clearInterval","login","v0","FileVersion","created","modified","minify","MinifiedFileVersion","Array","unminify","FileEntryMeta","versions","MinifiedFileEntryMeta","version","FolderEntryMeta","MinifiedFolderEntryMeta","FolderMeta","files","folders","MinifiedFolderMeta","folder","NetQueue","fetch","timeout","updating","queue","types","_timeout","_process","addType","debounce","queueCopy","assign","result","_fetch","_update","setFolderMeta","folderMeta","toHex","removeFile","metaQueue","find","f","filter","removeVersion","includes","addFile","existingFile","addFolder","existingFolder","removeFolder","createMetaQueue","action","buildFullTree","tree","createFolderFn","fullDir","indexOf","createFolder","dirname","basename","createFolderMeta","metaFolderCreating","deleteFile","deleteVersion","requestDeleteFile","deleteFolder","deleteFolderMeta","isExpired","moveFile","to","toMeta","moveFolder","oldDir","newDir","outerMeta","renameFile","renameFolder","renewAccountStatus","metadataKeys","fileHandles","renewAccountInvoice","renewAccount","values","flat","renewAccountInvoiceResponse","renewAccountStatusOpts","renewAccountStatusResponse","status","upgradeAccountStatus","upgradeAccountInvoice","upgradeAccount","upgradeAccountInvoiceResponse","upgradeAccountStatusOpts","upgradeAccountStatusResponse","uploadFile","upload","lastModified","once","v1","WebAccountMiddleware","symmetricKey","asymmetricKey","k","hd","HDKey","derived","k2","concat","wipePrivateData","sig","importKey","ct","fetchAdapter","method","address","headers","body","mapReturn","ok","redirected","statusText","url","WebNetworkMiddleware","Account","mnemonic","generateMnemonic","validateMnemonic","_mnemonic","trim","split","seed","mnemonicToSeedSync","MasterHandle","upgrade","renew","namehash","fromMasterSeed","String"],"mappings":"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"}