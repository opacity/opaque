{"version":3,"file":"index.js","sources":["../dist-src/streams/fileSourceStream.js","../dist-src/streams/bufferSourceStream.js","../dist-src/core/constants.js","../dist-src/core/helpers.js","../dist-src/core/encryption.js","../dist-src/core/metadata.js","../dist-src/streams/decryptStream.js","../dist-src/streams/downloadStream.js","../dist-src/download.js","../dist-src/streams/encryptStream.js","../dist-src/core/requests/getPlans.js","../dist-src/core/requests/checkPaymentStatus.js","../dist-src/core/requests/createAccount.js","../dist-src/core/requests/metadata.js","../dist-src/core/request.js","../dist-src/streams/uploadStream.js","../dist-src/upload.js","../dist-src/core/account/api/v0/downloadFile.js","../dist-src/core/hashing.js","../dist-src/utils/hashToPath.js","../dist-src/core/account/api/v0/generateSubHDKey.js","../dist-src/core/account/api/v0/getAccountInfo.js","../dist-src/utils/cleanPath.js","../dist-src/core/account/api/v0/getFolderHDKey.js","../dist-src/core/account/api/v0/getFolderLocation.js","../dist-src/core/account/api/v0/getFolderMeta.js","../dist-src/core/account/api/v0/getHandle.js","../dist-src/core/account/api/v0/isPaid.js","../dist-src/core/account/api/v0/register.js","../dist-src/core/account/api/v0/index.js","../dist-src/core/account/folder-entry.js","../dist-src/core/account/file-version.js","../dist-src/core/account/file-entry.js","../dist-src/core/account/folder-meta.js","../dist-src/utils/netQueue.js","../dist-src/core/account/api/v1/getFolderMeta.js","../dist-src/core/account/api/v1/setFolderMeta.js","../dist-src/core/account/api/v1/meta/removeFile.js","../dist-src/core/account/api/v1/meta/removeVersion.js","../dist-src/core/account/api/v1/meta/addFile.js","../dist-src/core/account/api/v1/meta/addFolder.js","../dist-src/core/account/api/v1/meta/removeFolder.js","../dist-src/core/account/api/v1/createMetaQueue.js","../dist-src/core/account/api/v1/createFolder.js","../dist-src/core/account/api/v1/createFolderMeta.js","../dist-src/core/requests/deleteFile.js","../dist-src/core/account/api/v1/deleteVersion.js","../dist-src/core/account/api/v1/deleteFile.js","../dist-src/core/account/api/v1/deleteFolder.js","../dist-src/core/account/api/v1/deleteFolderMeta.js","../dist-src/core/account/api/v1/login.js","../dist-src/core/account/api/v1/moveFile.js","../dist-src/core/account/api/v1/moveFolder.js","../dist-src/core/account/api/v1/renameFile.js","../dist-src/core/account/api/v1/renameFolder.js","../dist-src/core/account/api/v1/uploadFile.js","../dist-src/core/account/api/v1/index.js","../dist-src/account.js"],"sourcesContent":["import { Readable } from \"readable-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class FileSourceStream extends Readable {\r\n    constructor(blob, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        console.log(\"Starting file source stream\", blob);\r\n        super(opts);\r\n        this.offset = 0;\r\n        this.options = opts;\r\n        this.blob = blob;\r\n        this.reader = new FileReader();\r\n        this._onChunkRead = this._onChunkRead.bind(this);\r\n        if (opts.blockSize <= 0) {\r\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\r\n        }\r\n    }\r\n    _read() {\r\n        if (this.reader.readyState !== FileReader.LOADING) {\r\n            this._readChunkFromBlob();\r\n        }\r\n    }\r\n    _readChunkFromBlob() {\r\n        const blob = this.blob;\r\n        const offset = this.offset;\r\n        const blockSize = this.options.blockSize;\r\n        const limit = Math.min(offset + blockSize, blob.size);\r\n        // End stream when file is read in\r\n        if (offset >= blob.size) {\r\n            return this.push(null);\r\n        }\r\n        const chunk = blob.slice(offset, limit, \"application/octet-stream\");\r\n        this.offset += blockSize;\r\n        this.reader.onload = this._onChunkRead;\r\n        this.reader.readAsArrayBuffer(chunk);\r\n    }\r\n    _onChunkRead(event) {\r\n        const chunk = event.target.result;\r\n        if (this.push(new Uint8Array(chunk))) {\r\n            this._read();\r\n        }\r\n    }\r\n}\r\n","import { Readable } from \"readable-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class BufferSourceStream extends Readable {\r\n    constructor(data, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.offset = 0;\r\n        this.options = opts;\r\n        this.buffer = data.data;\r\n        if (opts.blockSize <= 0) {\r\n            throw new Error(`Invalid blockSize '${opts.blockSize}' in source stream.`);\r\n        }\r\n    }\r\n    _read() {\r\n        let read;\r\n        do {\r\n            read = this.push(this._readChunkFromBuffer());\r\n        } while (read);\r\n    }\r\n    _readChunkFromBuffer() {\r\n        const buf = this.buffer;\r\n        const offset = this.offset;\r\n        const blockSize = this.options.blockSize;\r\n        const limit = Math.min(offset + blockSize, buf.length) - offset;\r\n        // End stream when file is read in\r\n        if (offset >= buf.length) {\r\n            return null;\r\n        }\r\n        const slice = buf.slice(offset, offset + limit);\r\n        this.offset += blockSize;\r\n        return slice;\r\n    }\r\n}\r\n","export const FILENAME_MAX_LENGTH = 256;\r\nexport const CURRENT_VERSION = 1;\r\nexport const IV_BYTE_LENGTH = 16;\r\nexport const TAG_BYTE_LENGTH = 16;\r\nexport const TAG_BIT_LENGTH = TAG_BYTE_LENGTH * 8;\r\nexport const DEFAULT_BLOCK_SIZE = 64 * 1024;\r\nexport const BLOCK_OVERHEAD = TAG_BYTE_LENGTH + IV_BYTE_LENGTH;\r\nexport const DEFAULT_PART_SIZE = 128 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD);\r\n","import { md as ForgeMd, random as ForgeRandom, util as ForgeUtil } from \"node-forge\";\r\nimport isBuffer from \"is-buffer\";\r\nimport FileSourceStream from \"../streams/fileSourceStream\";\r\nimport BufferSourceStream from \"../streams/bufferSourceStream\";\r\nimport mime from \"mime/lite\";\r\nimport { FILENAME_MAX_LENGTH, BLOCK_OVERHEAD, DEFAULT_BLOCK_SIZE, DEFAULT_PART_SIZE } from \"./constants\";\r\nconst Forge = { md: ForgeMd, random: ForgeRandom, util: ForgeUtil };\r\nconst ByteBuffer = Forge.util.ByteBuffer;\r\n// Generate new handle, datamap entry hash and encryption key\r\n// TODO: Decide on format and derivation\r\nexport function generateFileKeys() {\r\n    const hash = Forge.md.sha256\r\n        .create()\r\n        .update(Forge.random.getBytesSync(32))\r\n        .digest().toHex();\r\n    const key = Forge.md.sha256\r\n        .create()\r\n        .update(Forge.random.getBytesSync(32))\r\n        .digest().toHex();\r\n    const handle = hash + key;\r\n    return {\r\n        hash,\r\n        key,\r\n        handle\r\n    };\r\n}\r\n// Return datamap hash and encryption key from handle\r\n// TODO: Decide on format and derivation\r\nexport function keysFromHandle(handle) {\r\n    const bytes = Forge.util.binary.hex.decode(handle);\r\n    const buf = new ByteBuffer(bytes);\r\n    const hash = buf.getBytes(32);\r\n    const key = buf.getBytes(32);\r\n    return {\r\n        hash: Forge.util.bytesToHex(hash),\r\n        key: Forge.util.bytesToHex(key),\r\n        handle\r\n    };\r\n}\r\nexport function sanitizeFilename(filename) {\r\n    if (filename.length > FILENAME_MAX_LENGTH) {\r\n        const l = (FILENAME_MAX_LENGTH / 2) - 2;\r\n        const start = filename.substring(0, l);\r\n        const end = filename.substring(filename.length - l);\r\n        filename = start + \"...\" + end;\r\n    }\r\n    return filename;\r\n}\r\n// Rudimentary format normalization\r\nexport function getFileData(file, nameFallback = \"file\") {\r\n    if (isBuffer(file)) {\r\n        file = file;\r\n        return {\r\n            data: file,\r\n            size: file.length,\r\n            name: nameFallback,\r\n            type: \"application/octet-stream\",\r\n            reader: BufferSourceStream\r\n        };\r\n    }\r\n    else if (file && file.data && isBuffer(file.data)) {\r\n        file = file;\r\n        return {\r\n            data: file.data,\r\n            size: file.data.length,\r\n            name: file.name || nameFallback,\r\n            type: file.type || mime.getType(file.name) || \"\",\r\n            reader: BufferSourceStream\r\n        };\r\n    }\r\n    else {\r\n        // TODO\r\n        file.reader = FileSourceStream;\r\n    }\r\n    return file;\r\n}\r\nexport function getMimeType(metadata) {\r\n    return metadata.type || mime.getType(metadata.name) || \"\";\r\n}\r\n// get true upload size, accounting for encryption overhead\r\nexport function getUploadSize(size, params) {\r\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\r\n    const blockCount = Math.ceil(size / blockSize);\r\n    return size + blockCount * BLOCK_OVERHEAD;\r\n}\r\n// get\r\nexport function getEndIndex(uploadSize, params) {\r\n    const blockSize = params.blockSize || DEFAULT_BLOCK_SIZE;\r\n    const partSize = params.partSize || DEFAULT_PART_SIZE;\r\n    const chunkSize = blockSize + BLOCK_OVERHEAD;\r\n    const chunkCount = Math.ceil(uploadSize / chunkSize);\r\n    const chunksPerPart = Math.ceil(partSize / chunkSize);\r\n    const endIndex = Math.ceil(chunkCount / chunksPerPart);\r\n    return endIndex;\r\n}\r\nexport function getBlockSize(params) {\r\n    if (params && params.blockSize) {\r\n        return params.blockSize;\r\n    }\r\n    else if (params && params.p && params.p.blockSize) {\r\n        return params.p.blockSize;\r\n    }\r\n    else {\r\n        return DEFAULT_BLOCK_SIZE;\r\n    }\r\n}\r\n","import { cipher as ForgeCipher, md as ForgeMd, util as ForgeUtil, random as ForgeRandom } from \"node-forge\";\r\nimport { IV_BYTE_LENGTH, TAG_BYTE_LENGTH, TAG_BIT_LENGTH, BLOCK_OVERHEAD } from \"./constants\";\r\nconst Forge = { cipher: ForgeCipher, md: ForgeMd, util: ForgeUtil, random: ForgeRandom };\r\nconst ByteBuffer = Forge.util.ByteBuffer;\r\n// Encryption\r\nexport function encrypt(key, byteBuffer) {\r\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\r\n    const iv = Forge.random.getBytesSync(IV_BYTE_LENGTH);\r\n    const cipher = Forge.cipher.createCipher(\"AES-GCM\", keyBuf);\r\n    cipher.start({\r\n        iv,\r\n        tagLength: TAG_BIT_LENGTH\r\n    });\r\n    cipher.update(byteBuffer);\r\n    cipher.finish();\r\n    byteBuffer.clear();\r\n    byteBuffer.putBuffer(cipher.output);\r\n    byteBuffer.putBuffer(cipher.mode.tag);\r\n    byteBuffer.putBytes(iv);\r\n    return byteBuffer;\r\n}\r\nexport function encryptString(key, string, encoding = \"utf8\") {\r\n    const buf = Forge.util.createBuffer(string, encoding);\r\n    return encrypt(key, buf);\r\n}\r\nexport function encryptBytes(key, bytes) {\r\n    return encrypt(key, Forge.util.createBuffer(bytes));\r\n}\r\n// Decryption\r\nexport function decrypt(key, byteBuffer) {\r\n    const keyBuf = new ByteBuffer(Buffer.from(key, \"hex\"));\r\n    keyBuf.read = 0;\r\n    byteBuffer.read = byteBuffer.length() - BLOCK_OVERHEAD;\r\n    const tag = byteBuffer.getBytes(TAG_BYTE_LENGTH);\r\n    const iv = byteBuffer.getBytes(IV_BYTE_LENGTH);\r\n    const decipher = Forge.cipher.createDecipher(\"AES-GCM\", keyBuf);\r\n    byteBuffer.read = 0;\r\n    byteBuffer.truncate(BLOCK_OVERHEAD);\r\n    decipher.start({\r\n        iv,\r\n        // the type definitions are wrong in @types/node-forge\r\n        tag: tag,\r\n        tagLength: TAG_BIT_LENGTH\r\n    });\r\n    decipher.update(byteBuffer);\r\n    if (decipher.finish()) {\r\n        return decipher.output;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexport function decryptBytes(key, bytes) {\r\n    const buf = new ByteBuffer(bytes);\r\n    const output = decrypt(key, buf);\r\n    if (output) {\r\n        return Forge.util.binary.raw.decode(output.getBytes());\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nexport function decryptString(key, byteBuffer, encoding = \"utf8\") {\r\n    const output = decrypt(key, byteBuffer);\r\n    if (output) {\r\n        return Buffer.from(output.toString()).toString(encoding);\r\n    }\r\n    else {\r\n        throw new Error(\"unable to decrypt\");\r\n    }\r\n}\r\n","import { sanitizeFilename } from \"./helpers\";\r\nimport { encryptString, decryptString } from \"./encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nconst Forge = { util: ForgeUtil };\r\nconst PROTOCOL_VERSION = 1;\r\nexport function createMetadata(file, opts) {\r\n    const filename = sanitizeFilename(file.name);\r\n    const metadata = {\r\n        name: filename,\r\n        type: file.type,\r\n        size: file.size,\r\n        p: opts\r\n    };\r\n    return metadata;\r\n}\r\nexport function encryptMetadata(metadata, key) {\r\n    const encryptedMeta = encryptString(key, JSON.stringify(metadata), \"utf8\");\r\n    return Forge.util.binary.raw.decode(encryptedMeta.getBytes());\r\n}\r\nexport function decryptMetadata(data, key) {\r\n    const byteStr = Forge.util.binary.raw.encode(data);\r\n    const byteBuffer = new Forge.util.ByteBuffer(byteStr);\r\n    const meta = JSON.parse(decryptString(key, byteBuffer));\r\n    return meta;\r\n}\r\n","import { Transform } from \"readable-stream\";\r\nimport { decryptBytes } from \"../core/encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\r\nimport { getBlockSize } from \"../core/helpers\";\r\nconst Forge = { util: ForgeUtil };\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    binaryMode: false,\r\n    objectMode: true,\r\n    blockSize: DEFAULT_BLOCK_SIZE\r\n});\r\nexport default class DecryptStream extends Transform {\r\n    constructor(key, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.options = opts;\r\n        this.key = key;\r\n        this.iter = 0;\r\n        this.blockSize = getBlockSize(options);\r\n    }\r\n    _transform(chunk, encoding, callback) {\r\n        const blockSize = this.blockSize;\r\n        const chunkSize = blockSize + BLOCK_OVERHEAD;\r\n        const length = chunk.length;\r\n        for (let offset = 0; offset < length; offset += chunkSize) {\r\n            const limit = Math.min(offset + chunkSize, length);\r\n            const buf = chunk.slice(offset, limit);\r\n            const data = decryptBytes(this.key, buf);\r\n            if (data) {\r\n                this.push(data);\r\n            }\r\n            else {\r\n                this.emit(\"error\", \"Error decrypting data block\");\r\n            }\r\n        }\r\n        callback(null);\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { Readable } from \"readable-stream\";\r\nimport { getBlockSize } from \"../core/helpers\";\r\nimport { DEFAULT_BLOCK_SIZE, BLOCK_OVERHEAD } from \"../core/constants\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autostart: true,\r\n    maxParallelDownloads: 1,\r\n    maxRetries: 0,\r\n    partSize: 80 * (DEFAULT_BLOCK_SIZE + BLOCK_OVERHEAD),\r\n    objectMode: false\r\n});\r\nexport default class DownloadStream extends Readable {\r\n    constructor(url, metadata, size, options = {}) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        // Input\r\n        this.options = opts;\r\n        this.url = url;\r\n        this.size = size;\r\n        this.metadata = metadata;\r\n        // Internal\r\n        this.chunks = [];\r\n        this.chunkId = 0;\r\n        this.pushId = 0;\r\n        this.bytesDownloaded = 0;\r\n        this.isDownloadFinished = false;\r\n        this.ongoingDownloads = 0;\r\n        this.pushChunk = false;\r\n        const blockSize = getBlockSize(metadata);\r\n        const blockCount = opts.partSize / (blockSize + BLOCK_OVERHEAD);\r\n        if (blockCount !== Math.floor(blockCount)) {\r\n            this.emit(\"error\", \"options.partSize must be a multiple of blockSize + blockOverhead\");\r\n        }\r\n        if (opts.autostart) {\r\n            this._download();\r\n        }\r\n    }\r\n    _read() {\r\n        this.pushChunk = true;\r\n        const attemptDownload = this.ongoingDownloads < this.options.maxParallelDownloads;\r\n        if (!this.isDownloadFinished && attemptDownload) {\r\n            this._download();\r\n        }\r\n        this._pushChunk();\r\n    }\r\n    async _download(chunkIndex) {\r\n        const size = this.size;\r\n        const partSize = this.options.partSize;\r\n        const index = chunkIndex || this.chunks.length;\r\n        const offset = index * partSize;\r\n        // TODO: Make sure last byte works to prevent edge case\r\n        if (offset >= size) {\r\n            this.isDownloadFinished = true;\r\n            return;\r\n        }\r\n        const limit = Math.min(offset + partSize, size) - offset;\r\n        const range = `bytes=${offset}-${offset + limit - 1}`;\r\n        const chunk = {\r\n            id: this.chunkId++,\r\n            data: null,\r\n            offset,\r\n            limit\r\n        };\r\n        try {\r\n            this.chunks.push(chunk);\r\n            this.ongoingDownloads++;\r\n            const download = await Axios.get(this.url + \"/file\", {\r\n                responseType: \"arraybuffer\",\r\n                headers: {\r\n                    range\r\n                }\r\n            });\r\n            chunk.data = new Uint8Array(download.data);\r\n            this.bytesDownloaded += chunk.data.length;\r\n            this.ongoingDownloads--;\r\n            this.emit(\"progress\", this.bytesDownloaded / this.size);\r\n            this._pushChunk();\r\n        }\r\n        catch (error) {\r\n            this.ongoingDownloads--;\r\n            this.emit(\"error\", error);\r\n        }\r\n        return;\r\n    }\r\n    async _afterDownload() {\r\n    }\r\n    _pushChunk() {\r\n        if (!this.pushChunk) {\r\n            return;\r\n        }\r\n        const chunk = this.chunks[this.pushId];\r\n        if (chunk && chunk.data !== null) {\r\n            this.pushId++;\r\n            this.pushChunk = this.push(chunk.data);\r\n            chunk.data = null;\r\n            this._pushChunk();\r\n        }\r\n        else if (this.ongoingDownloads === 0 && this.isDownloadFinished) {\r\n            this.push(null);\r\n        }\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { EventEmitter } from \"events\";\r\nimport { decryptMetadata } from \"./core/metadata\";\r\nimport { getMimeType, getUploadSize, keysFromHandle } from \"./core/helpers\";\r\nimport DecryptStream from \"./streams/decryptStream\";\r\nimport DownloadStream from \"./streams/downloadStream\";\r\nconst METADATA_PATH = \"/download/metadata/\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autoStart: true\r\n});\r\n/**\r\n * @internal\r\n */\r\nexport default class Download extends EventEmitter {\r\n    constructor(handle, opts = {}) {\r\n        super();\r\n        this.metadata = async () => {\r\n            if (this._metadata) {\r\n                return this._metadata;\r\n            }\r\n            else {\r\n                return await this.downloadMetadata();\r\n            }\r\n        };\r\n        this.toBuffer = async () => {\r\n            const chunks = [];\r\n            let totalLength = 0;\r\n            if (typeof Buffer === \"undefined\") {\r\n                return false;\r\n            }\r\n            await this.startDownload();\r\n            return new Promise(resolve => {\r\n                this.decryptStream.on(\"data\", (data) => {\r\n                    chunks.push(data);\r\n                    totalLength += data.length;\r\n                });\r\n                this.decryptStream.once(\"finish\", () => {\r\n                    resolve(Buffer.concat(chunks, totalLength));\r\n                });\r\n            }).catch(err => {\r\n                throw err;\r\n            });\r\n        };\r\n        this.toFile = async () => {\r\n            const chunks = [];\r\n            let totalLength = 0;\r\n            await this.startDownload();\r\n            return new Promise(resolve => {\r\n                this.decryptStream.on(\"data\", (data) => {\r\n                    chunks.push(data);\r\n                    totalLength += data.length;\r\n                });\r\n                this.decryptStream.once(\"finish\", async () => {\r\n                    const meta = await this.metadata();\r\n                    resolve(new File(chunks, meta.name, {\r\n                        type: getMimeType(meta)\r\n                    }));\r\n                });\r\n            }).catch(err => {\r\n                throw err;\r\n            });\r\n        };\r\n        this.startDownload = async () => {\r\n            try {\r\n                await this.getDownloadURL();\r\n                await this.downloadMetadata();\r\n                await this.downloadFile();\r\n            }\r\n            catch (e) {\r\n                this.propagateError(e);\r\n            }\r\n        };\r\n        this.getDownloadURL = async (overwrite = false) => {\r\n            let req;\r\n            if (!overwrite && this.downloadURLRequest) {\r\n                req = this.downloadURLRequest;\r\n            }\r\n            else {\r\n                req = Axios.post(this.options.endpoint + \"/api/v1/download\", {\r\n                    fileID: this.hash\r\n                });\r\n                this.downloadURLRequest = req;\r\n            }\r\n            const res = await req;\r\n            if (res.status === 200) {\r\n                this.downloadURL = res.data.fileDownloadUrl;\r\n                return this.downloadURL;\r\n            }\r\n        };\r\n        this.downloadMetadata = async (overwrite = false) => {\r\n            let req;\r\n            if (!this.downloadURL) {\r\n                await this.getDownloadURL();\r\n            }\r\n            if (!overwrite && this.metadataRequest) {\r\n                req = this.metadataRequest;\r\n            }\r\n            else {\r\n                const endpoint = this.options.endpoint;\r\n                const path = METADATA_PATH + this.hash;\r\n                req = Axios.get(this.downloadURL + \"/metadata\", {\r\n                    responseType: \"arraybuffer\"\r\n                });\r\n                this.metadataRequest = req;\r\n            }\r\n            const res = await req;\r\n            const metadata = decryptMetadata(new Uint8Array(res.data), this.key);\r\n            this._metadata = metadata;\r\n            this.size = getUploadSize(metadata.size, metadata.p || {});\r\n            return metadata;\r\n        };\r\n        this.downloadFile = async () => {\r\n            if (this.isDownloading) {\r\n                return true;\r\n            }\r\n            this.isDownloading = true;\r\n            this.downloadStream = new DownloadStream(this.downloadURL, await this.metadata, this.size, this.options);\r\n            this.decryptStream = new DecryptStream(this.key);\r\n            this.downloadStream.on(\"progress\", progress => {\r\n                this.emit(\"download-progress\", {\r\n                    target: this,\r\n                    handle: this.handle,\r\n                    progress: progress\r\n                });\r\n            });\r\n            this.downloadStream\r\n                .pipe(this.decryptStream);\r\n            this.downloadStream.on(\"error\", this.propagateError);\r\n            this.decryptStream.on(\"error\", this.propagateError);\r\n        };\r\n        this.finishDownload = (error) => {\r\n            if (error) {\r\n                this.propagateError(error);\r\n            }\r\n            else {\r\n                this.emit(\"finish\");\r\n            }\r\n        };\r\n        this.propagateError = (error) => {\r\n            console.warn(\"Download error: \", error.message || error);\r\n            process.nextTick(() => this.emit(\"error\", error.message || error));\r\n        };\r\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\r\n        const { hash, key } = keysFromHandle(handle);\r\n        this.options = options;\r\n        this.handle = handle;\r\n        this.hash = hash;\r\n        this.key = key;\r\n        this.downloadURLRequest = null;\r\n        this.metadataRequest = null;\r\n        this.isDownloading = false;\r\n        if (options.autoStart) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n}\r\n","import { Transform } from \"readable-stream\";\r\nimport { encryptBytes } from \"../core/encryption\";\r\nimport { util as ForgeUtil } from \"node-forge\";\r\nconst Forge = { util: ForgeUtil };\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    objectMode: false\r\n});\r\nexport default class EncryptStream extends Transform {\r\n    constructor(key, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        this.options = opts;\r\n        this.key = key;\r\n    }\r\n    _transform(data, encoding, callback) {\r\n        const chunk = encryptBytes(this.key, data);\r\n        const buf = Forge.util.binary.raw.decode(chunk.getBytes());\r\n        this.push(buf);\r\n        callback(null);\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\n/**\r\n * get a list of available plans\r\n *\r\n * @param endpoint\r\n *\r\n * @internal\r\n */\r\nexport async function getPlans(endpoint) {\r\n    return Axios.get(endpoint + \"/plans\");\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * check whether a payment has gone through for an account\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to check\r\n *\r\n * @internal\r\n */\r\nexport async function checkPaymentStatus(endpoint, hdNode) {\r\n    const payload = {\r\n        timestamp: Math.floor(Date.now() / 1000)\r\n    };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/account-data\", signedPayload);\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * request the creation of an account\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to create\r\n * @param metadataKey\r\n * @param duration - account duration in months\r\n * @param limit - storage limit in GB\r\n *\r\n * @internal\r\n */\r\nexport async function createAccount(endpoint, hdNode, metadataKey, duration = 12, limit = 128) {\r\n    const payload = {\r\n        metadataKey: metadataKey,\r\n        durationInMonths: duration,\r\n        // TODO: I'm not sure why this is like this, but it doesn't match what was planned\r\n        storageLimit: limit\r\n    };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/accounts\", signedPayload);\r\n}\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n/**\r\n * request creating a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function createMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/create\", signedPayload);\r\n}\r\n/**\r\n * request deleting a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function deleteMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/delete\", signedPayload);\r\n}\r\n/**\r\n * request changing a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n * @param metadata - the metadata to put\r\n *\r\n * @internal\r\n */\r\nexport async function setMetadata(endpoint, hdNode, metadataKey, metadata) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadata, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/set\", signedPayload);\r\n}\r\n/**\r\n * request get of a metadata entry\r\n *\r\n * @param endpoint - the base url to send the request to\r\n * @param hdNode - the account to access\r\n * @param metadataKey - the key associated with the metadata\r\n *\r\n * @internal\r\n */\r\nexport async function getMetadata(endpoint, hdNode, metadataKey) {\r\n    const timestamp = Math.floor(Date.now() / 1000);\r\n    const payload = { timestamp, metadataKey };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/metadata/get\", signedPayload);\r\n}\r\n","import FormDataNode from \"form-data\";\r\nimport * as EthUtil from \"ethereumjs-util\";\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\n/**\r\n * get a signed payload from an hdkey\r\n *\r\n * @param rawPayload - a payload object to be processed and signed\r\n * @param hdNode = the account to sign with\r\n * @param key\r\n *\r\n * @internal\r\n */\r\nexport function getPayload(rawPayload, hdNode, key = \"requestBody\") {\r\n    const payload = JSON.stringify(rawPayload);\r\n    const hash = EthUtil.keccak256(payload);\r\n    const signature = hdNode.sign(hash).toString(\"hex\");\r\n    const pubKey = hdNode.publicKey.toString(\"hex\");\r\n    const signedPayload = {\r\n        signature,\r\n        publicKey: pubKey,\r\n        hash: hash.toString(\"hex\")\r\n    };\r\n    signedPayload[key] = payload;\r\n    return signedPayload;\r\n}\r\n/**\r\n * get a signed formdata payload from an hdkey\r\n *\r\n * @param rawPayload - a payload object to be processed and signed\r\n * @param extraPayload - additional (unsigned) payload information\r\n * @param hdNode - the account to sign with\r\n * @param key\r\n *\r\n * @internal\r\n */\r\nexport function getPayloadFD(rawPayload, extraPayload, hdNode, key = \"requestBody\") {\r\n    // rawPayload.timestamp = Date.now();\r\n    const payload = JSON.stringify(rawPayload);\r\n    const hash = EthUtil.keccak256(payload);\r\n    const signature = hdNode.sign(hash).toString(\"hex\");\r\n    const pubKey = hdNode.publicKey.toString(\"hex\");\r\n    // node, buffers\r\n    if (POLYFILL_FORMDATA) {\r\n        const data = new FormDataNode();\r\n        data.append(key, payload);\r\n        data.append(\"signature\", signature);\r\n        data.append(\"publicKey\", pubKey);\r\n        // data.append(\"hash\", hash);\r\n        if (extraPayload) {\r\n            Object.keys(extraPayload).forEach(key => {\r\n                const pl = Buffer.from(extraPayload[key]);\r\n                data.append(key, pl, {\r\n                    filename: key,\r\n                    contentType: \"application/octet-stream\",\r\n                    knownLength: pl.length\r\n                });\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n    else {\r\n        const data = new FormData();\r\n        data.append(key, payload);\r\n        data.append(\"signature\", signature);\r\n        data.append(\"publicKey\", pubKey);\r\n        if (extraPayload) {\r\n            Object.keys(extraPayload).forEach(key => {\r\n                data.append(key, new Blob([extraPayload[key].buffer]), key);\r\n            });\r\n        }\r\n        return data;\r\n    }\r\n}\r\nexport { getPlans } from \"./requests/getPlans\";\r\nexport { checkPaymentStatus } from \"./requests/checkPaymentStatus\";\r\nexport { createAccount } from \"./requests/createAccount\";\r\nexport { getMetadata, setMetadata, createMetadata, deleteMetadata } from \"./requests/metadata\";\r\n","import Axios from \"axios\";\r\nimport { Writable } from \"readable-stream\";\r\nimport { getPayload, getPayloadFD } from \"../core/request\";\r\nimport { getEndIndex } from \"../core/helpers\";\r\nimport { DEFAULT_PART_SIZE } from \"../core/constants\";\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\nconst PART_MIME = \"application/octet-stream\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    maxParallelUploads: 3,\r\n    maxRetries: 0,\r\n    partSize: DEFAULT_PART_SIZE,\r\n    objectMode: false\r\n});\r\nexport default class UploadStream extends Writable {\r\n    constructor(account, hash, size, endpoint, options) {\r\n        const opts = Object.assign({}, DEFAULT_OPTIONS, options);\r\n        super(opts);\r\n        // Input\r\n        this.account = account;\r\n        this.hash = hash;\r\n        this.endpoint = endpoint;\r\n        this.options = opts;\r\n        this.size = size;\r\n        this.endIndex = getEndIndex(size, opts);\r\n        // Internal\r\n        this.bytesUploaded = 0;\r\n        this.blockBuffer = [];\r\n        this.partBuffer = [];\r\n        this.bufferSize = 0;\r\n        this.ongoingUploads = 0;\r\n        this.retries = 0;\r\n        this.partIndex = 0;\r\n        this.finalCallback = null;\r\n    }\r\n    _write(data, encoding, callback) {\r\n        this.blockBuffer.push(data);\r\n        this.bufferSize += data.length;\r\n        if (this.bufferSize >= this.options.partSize) {\r\n            this._addPart();\r\n            this._attemptUpload();\r\n        }\r\n        callback();\r\n    }\r\n    _final(callback) {\r\n        this.finalCallback = callback;\r\n        if (this.blockBuffer.length > 0) {\r\n            this._addPart();\r\n            this._attemptUpload();\r\n        }\r\n        else if (this.ongoingUploads === 0) {\r\n            this._finishUpload();\r\n        }\r\n    }\r\n    // Flatten inputs into a single ArrayBuffer for sending\r\n    _addPart() {\r\n        const blocks = this.blockBuffer;\r\n        const data = new Uint8Array(this.bufferSize);\r\n        let offset = 0;\r\n        do {\r\n            const block = blocks.shift();\r\n            data.set(block, offset);\r\n            offset += block.length;\r\n        } while (blocks.length > 0);\r\n        this.partBuffer.push({\r\n            partIndex: ++this.partIndex,\r\n            data\r\n        });\r\n        this.blockBuffer = [];\r\n        this.bufferSize = 0;\r\n    }\r\n    _attemptUpload() {\r\n        if (this.ongoingUploads >= this.options.maxParallelUploads) {\r\n            return;\r\n        }\r\n        const part = this.partBuffer.shift();\r\n        this._upload(part);\r\n    }\r\n    _upload(part) {\r\n        this.ongoingUploads++;\r\n        // Cork stream when busy\r\n        if (this.ongoingUploads === this.options.maxParallelUploads) {\r\n            this.cork();\r\n        }\r\n        const data = getPayloadFD({\r\n            fileHandle: this.hash,\r\n            partIndex: part.partIndex,\r\n            endIndex: this.endIndex\r\n        }, {\r\n            chunkData: part.data\r\n        }, this.account);\r\n        const upload = Axios.post(this.endpoint + \"/api/v1/upload\", data, {\r\n            headers: data.getHeaders ? data.getHeaders() : {},\r\n            onUploadProgress: (event) => {\r\n                return;\r\n            }\r\n        })\r\n            .then(result => {\r\n            this._afterUpload(part);\r\n        })\r\n            .catch(error => {\r\n            this._uploadError(error, part);\r\n        });\r\n    }\r\n    _afterUpload(part) {\r\n        this.ongoingUploads--;\r\n        this.bytesUploaded += part.data.length;\r\n        this.emit(\"progress\", this.bytesUploaded / this.size);\r\n        // Upload until done\r\n        if (this.partBuffer.length > 0) {\r\n            return this._attemptUpload();\r\n        }\r\n        if (this.finalCallback) {\r\n            // Finish\r\n            if (this.ongoingUploads === 0) {\r\n                this._finishUpload();\r\n            }\r\n        }\r\n        else {\r\n            // Continue\r\n            process.nextTick(() => this.uncork());\r\n        }\r\n    }\r\n    async _finishUpload() {\r\n        const confirmUpload = this._confirmUpload.bind(this);\r\n        const data = getPayload({\r\n            fileHandle: this.hash\r\n        }, this.account);\r\n        let uploadFinished = false;\r\n        do {\r\n            uploadFinished = await confirmUpload(data);\r\n            if (!uploadFinished) {\r\n                await new Promise(resolve => setTimeout(resolve, 5000));\r\n            }\r\n        } while (!uploadFinished);\r\n        this.finalCallback();\r\n    }\r\n    async _confirmUpload(data) {\r\n        try {\r\n            const req = Axios.post(this.endpoint + \"/api/v1/upload-status\", data);\r\n            const res = await req;\r\n            if (!res.data.missingIndexes || !res.data.missingIndexes.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(err.message || err);\r\n            return false;\r\n        }\r\n    }\r\n    _uploadError(error, part) {\r\n        this.ongoingUploads--;\r\n        console.warn(\"error\", error);\r\n        if (this.retries++ < this.options.maxRetries) {\r\n            console.log(\"retrying\", this.retries, \"of\", this.options.maxRetries);\r\n            this.partBuffer.push(part);\r\n            this._attemptUpload();\r\n            return;\r\n        }\r\n        if (this.finalCallback) {\r\n            this.finalCallback(error);\r\n        }\r\n        else {\r\n            this.emit(\"error\", error);\r\n            this.end();\r\n        }\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { EventEmitter } from \"events\";\r\nimport { createMetadata, encryptMetadata } from \"./core/metadata\";\r\nimport { generateFileKeys, getUploadSize, getFileData, getEndIndex } from \"./core/helpers\";\r\nimport EncryptStream from \"./streams/encryptStream\";\r\nimport UploadStream from \"./streams/uploadStream\";\r\nimport { getPayloadFD } from \"./core/request\";\r\nconst PART_MIN_SIZE = 1024 * 1024 * 5;\r\nconst POLYFILL_FORMDATA = typeof FormData === \"undefined\";\r\nconst DEFAULT_OPTIONS = Object.freeze({\r\n    autoStart: true\r\n});\r\nconst DEFAULT_FILE_PARAMS = {\r\n    blockSize: 64 * 1024,\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport default class Upload extends EventEmitter {\r\n    constructor(file, account, opts = {}) {\r\n        super();\r\n        this.startUpload = async () => {\r\n            try {\r\n                await this.uploadMetadata();\r\n                await this.uploadFile();\r\n            }\r\n            catch (e) {\r\n                this.propagateError(e);\r\n            }\r\n        };\r\n        this.uploadMetadata = async () => {\r\n            const meta = createMetadata(this.data, this.options.params);\r\n            const encryptedMeta = encryptMetadata(meta, this.key);\r\n            const data = getPayloadFD({\r\n                fileHandle: this.hash,\r\n                fileSizeInByte: this.uploadSize,\r\n                endIndex: getEndIndex(this.uploadSize, this.options.params)\r\n            }, {\r\n                metadata: encryptedMeta\r\n            }, this.account);\r\n            const url = this.options.endpoint + \"/api/v1/init-upload\";\r\n            const headers = data.getHeaders ? data.getHeaders() : {};\r\n            const req = Axios.post(url, data, { headers });\r\n            const res = await req;\r\n            this.emit(\"metadata\", meta);\r\n        };\r\n        this.uploadFile = async () => {\r\n            const readStream = new this.data.reader(this.data, this.options.params);\r\n            this.readStream = readStream;\r\n            this.encryptStream = new EncryptStream(this.key, this.options.params);\r\n            this.uploadStream = new UploadStream(this.account, this.hash, this.uploadSize, this.options.endpoint, this.options.params);\r\n            this.uploadStream.on(\"progress\", progress => {\r\n                this.emit(\"upload-progress\", {\r\n                    target: this,\r\n                    handle: this.handle,\r\n                    progress\r\n                });\r\n            });\r\n            this.readStream\r\n                .pipe(this.encryptStream)\r\n                .pipe(this.uploadStream)\r\n                .on(\"finish\", this.finishUpload);\r\n            this.readStream.on(\"error\", this.propagateError);\r\n            this.encryptStream.on(\"error\", this.propagateError);\r\n            this.uploadStream.on(\"error\", this.propagateError);\r\n        };\r\n        this.finishUpload = async () => {\r\n            this.emit(\"finish\", {\r\n                target: this,\r\n                handle: this.handle,\r\n                metadata: this.metadata\r\n            });\r\n        };\r\n        this.propagateError = (error) => {\r\n            process.nextTick(() => this.emit(\"error\", error));\r\n        };\r\n        const options = Object.assign({}, DEFAULT_OPTIONS, opts);\r\n        options.params = Object.assign({}, DEFAULT_FILE_PARAMS, options.params || {});\r\n        const { handle, hash, key } = generateFileKeys();\r\n        const data = getFileData(file, handle);\r\n        const size = getUploadSize(data.size, options.params);\r\n        this.account = account;\r\n        this.options = options;\r\n        this.data = data;\r\n        this.uploadSize = size;\r\n        this.key = key; // Encryption key\r\n        this.hash = hash; // Datamap entry hash\r\n        this.handle = handle; // File handle - hex(hash) + hex(key)\r\n        this.metadata = createMetadata(data, options.params);\r\n        if (options.autoStart) {\r\n            this.startUpload();\r\n        }\r\n    }\r\n}\r\n","import Download from \"../../../../download\";\r\nconst downloadFile = (masterHandle, handle) => {\r\n    return new Download(handle, masterHandle.downloadOpts);\r\n};\r\nexport { downloadFile };\r\n","import { soliditySha3 } from \"web3-utils\";\r\nexport const hash = (...val) => {\r\n    return soliditySha3(...val).replace(/^0x/, \"\");\r\n};\r\n","const hashToPath = (h, { prefix = false } = {}) => {\r\n    if (h.length % 4) {\r\n        throw new Error(\"hash length must be multiple of two bytes\");\r\n    }\r\n    return (prefix ? \"m/\" : \"\") + h.match(/.{1,4}/g).map(p => parseInt(p, 16)).join(\"'/\") + \"'\";\r\n};\r\nexport { hashToPath };\r\n","import { hash } from \"../../../../core/hashing\";\r\nimport { hashToPath } from \"../../../../utils/hashToPath\";\r\nconst generateSubHDKey = (masterHandle, pathString) => {\r\n    const path = hashToPath(hash(pathString), { prefix: true });\r\n    return masterHandle.derive(path);\r\n};\r\nexport { generateSubHDKey };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nconst getAccountInfo = async (masterHandle) => ((await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data.account);\r\nexport { getAccountInfo };\r\n","// TODO: don't use polyfill\r\nimport { posix } from \"path-browserify\";\r\nconst posixSep = new RegExp(posix.sep + \"+\", \"g\");\r\nconst posixSepEnd = new RegExp(\"(.)\" + posix.sep + \"+$\");\r\n// NOTE: win32 isn't included in the polyfill\r\nconst win32Sep = new RegExp(\"\\\\+\", \"g\");\r\nconst trimTrailingSep = (path) => {\r\n    return path.replace(posixSepEnd, \"$1\");\r\n};\r\nconst cleanPath = (path) => {\r\n    return trimTrailingSep(path.replace(win32Sep, posix.sep).replace(posixSep, posix.sep));\r\n};\r\nexport { cleanPath };\r\n","import { generateSubHDKey } from \"./generateSubHDKey\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderHDKey = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    return generateSubHDKey(masterHandle, \"folder: \" + dir);\r\n};\r\nexport { getFolderHDKey };\r\n","import { hash } from \"../../../../core/hashing\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderLocation = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    return hash(masterHandle.getFolderHDKey(dir).publicKey.toString(\"hex\"));\r\n};\r\nexport { getFolderLocation };\r\n","import { util as ForgeUtil } from \"node-forge\";\r\nimport { hash } from \"../../../../core/hashing\";\r\nimport { getMetadata } from \"../../../../core/requests/metadata\";\r\nimport { decrypt } from \"../../../../core/encryption\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \r\n    // TODO: verify folder can only be read by the creating account\r\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // folderKey,\r\n    location);\r\n    try {\r\n        // TODO\r\n        // I have no idea why but the decrypted is correct hex without converting\r\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"hex\"))).toString();\r\n        try {\r\n            const meta = JSON.parse(metaString);\r\n            return meta;\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            console.info(\"META STRING:\", metaString);\r\n            throw new Error(\"metadata corrupted\");\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        throw new Error(\"error decrypting meta\");\r\n    }\r\n};\r\nexport { getFolderMeta };\r\n","const getHandle = (masterHandle) => {\r\n    return masterHandle.privateKey.toString(\"hex\") + masterHandle.chainCode.toString(\"hex\");\r\n};\r\nexport { getHandle };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nconst isPaid = async (masterHandle) => {\r\n    try {\r\n        const accountInfoResponse = await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle);\r\n        return accountInfoResponse.data.paymentStatus == \"paid\";\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n};\r\nexport { isPaid };\r\n","import { checkPaymentStatus } from \"../../../../core/requests/checkPaymentStatus\";\r\nimport { createAccount } from \"../../../../core/requests/createAccount\";\r\nconst register = async (masterHandle, duration, limit) => {\r\n    if (await masterHandle.isPaid()) {\r\n        return {\r\n            data: { invoice: { cost: 0, ethAddress: \"0x0\" } },\r\n            waitForPayment: async () => ({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data })\r\n        };\r\n    }\r\n    const createAccountResponse = await createAccount(masterHandle.uploadOpts.endpoint, masterHandle, masterHandle.getFolderLocation(\"/\"), duration, limit);\r\n    return {\r\n        data: createAccountResponse.data,\r\n        waitForPayment: () => new Promise(resolve => {\r\n            const interval = setInterval(async () => {\r\n                // don't perform run if it takes more than 5 seconds for response\r\n                const time = Date.now();\r\n                if (await masterHandle.isPaid() && time + 5 * 1000 > Date.now()) {\r\n                    clearInterval(interval);\r\n                    await masterHandle.login();\r\n                    resolve({ data: (await checkPaymentStatus(masterHandle.uploadOpts.endpoint, masterHandle)).data });\r\n                }\r\n            }, 10 * 1000);\r\n        })\r\n    };\r\n};\r\nexport { register };\r\n","import { downloadFile } from \"../v0/downloadFile\";\r\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\r\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\r\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\r\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\r\nimport { getFolderMeta } from \"../v0/getFolderMeta\";\r\nimport { getHandle } from \"../v0/getHandle\";\r\nimport { isPaid } from \"../v0/isPaid\";\r\nimport { register } from \"../v0/register\";\r\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getFolderMeta, getHandle, isPaid, register };\r\n/**\r\n * internal API v0\r\n *\r\n * @internal\r\n */\r\nconst v0 = {\r\n    downloadFile,\r\n    generateSubHDKey,\r\n    getAccountInfo,\r\n    getFolderHDKey,\r\n    getFolderLocation,\r\n    getFolderMeta,\r\n    getHandle,\r\n    isPaid,\r\n    register\r\n};\r\nexport default v0;\r\n","/**\r\n * metadata to describe where a folder can be found (for root metadata of an account)\r\n *\r\n * @public\r\n */\r\nclass FolderEntryMeta {\r\n    /**\r\n     * create metadata entry for a folder\r\n     *\r\n     * @param name - a name of the folder shown in the UI\r\n     * @param location - the public key for the metadata file\r\n     *   it is how the file will be queried for (using the same system as for the account metadata)\r\n     */\r\n    constructor({ name, location }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFolderEntryMeta([\r\n            this.name,\r\n            this.location\r\n        ]);\r\n        this.name = name;\r\n        this.location = location;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFolderEntryMeta extends Array {\r\n    constructor([name, location]) {\r\n        super(2);\r\n        this.unminify = () => new FolderEntryMeta({\r\n            name: this[0],\r\n            location: this[1]\r\n        });\r\n        this[0] = name;\r\n        this[1] = location;\r\n    }\r\n}\r\nexport { FolderEntryMeta, MinifiedFolderEntryMeta };\r\n","/**\r\n * metadata to describe a version of a file as it relates to a filesystem\r\n *\r\n * @public\r\n */\r\nclass FileVersion {\r\n    /**\r\n     * create metadata for a file version\r\n     *\r\n     * @param handle - the file handle\r\n     * @param size - the size of the file in bytes\r\n     * @param created - the date this version was uploaded\r\n     * @param modified - the date the filesystem marked as last modified\r\n     */\r\n    constructor({ handle, size, created = Date.now(), modified = Date.now() }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFileVersion([\r\n            this.handle,\r\n            this.size,\r\n            this.created,\r\n            this.modified\r\n        ]);\r\n        this.handle = handle;\r\n        this.size = size;\r\n        this.created = created;\r\n        this.modified = modified;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFileVersion extends Array {\r\n    constructor([handle, size, created, modified]) {\r\n        super(4);\r\n        this.unminify = () => new FileVersion({\r\n            handle: this[0],\r\n            size: this[1],\r\n            created: this[2],\r\n            modified: this[3]\r\n        });\r\n        this[0] = handle;\r\n        this[1] = size;\r\n        this[2] = created;\r\n        this[3] = modified;\r\n    }\r\n}\r\nexport { FileVersion, MinifiedFileVersion };\r\n","import { FileVersion, MinifiedFileVersion } from \"./file-version\";\r\n/**\r\n * metadata to describe a file as it relates to the UI\r\n *\r\n * @public\r\n */\r\nclass FileEntryMeta {\r\n    /**\r\n     * create metadata for a file entry in the UI\r\n     *\r\n     * @param name - the name of the file as shown in the UI\r\n     * @param created - the date in `ms` that this file was initially uploaded\r\n     * @param created - the date in `ms` that the newest version of this file was uploaded\r\n     * @param versions - versions of the uploaded file (the most recent of which should be the current version of the file)\r\n     */\r\n    constructor({ name, created = Date.now(), modified = Date.now(), versions = [] }) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFileEntryMeta([\r\n            this.name,\r\n            this.created,\r\n            this.modified,\r\n            this.versions.map(version => new FileVersion(version).minify())\r\n        ]);\r\n        this.name = name;\r\n        this.created = created;\r\n        this.modified = modified;\r\n        this.versions = versions;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFileEntryMeta extends Array {\r\n    constructor([name, created, modified, versions]) {\r\n        super(4);\r\n        this.unminify = () => new FileEntryMeta({\r\n            name: this[0],\r\n            created: this[1],\r\n            modified: this[2],\r\n            versions: this[3].map(version => new MinifiedFileVersion(version).unminify())\r\n        });\r\n        this[0] = name;\r\n        this[1] = created;\r\n        this[2] = modified;\r\n        this[3] = versions;\r\n    }\r\n}\r\nexport { FileEntryMeta, MinifiedFileEntryMeta };\r\n","import { FileEntryMeta, MinifiedFileEntryMeta } from \"./file-entry\";\r\nimport { FolderEntryMeta, MinifiedFolderEntryMeta } from \"./folder-entry\";\r\n/**\r\n * metadata to describe a folder for the UI\r\n *\r\n * @public\r\n */\r\nclass FolderMeta {\r\n    /**\r\n     * create metadata for a folder\r\n     *\r\n     * @param name - a nickname shown on the folder when accessed without adding to account metadata\r\n     * @param files - the files included only in the most shallow part of the folder\r\n     * @param created - when the folder was created (if not created now) in `ms`\r\n     * @param created - when the folder was changed (if not modified now) in `ms`\r\n     */\r\n    constructor({ name = \"Folder\", files = [], folders = [], created = Date.now(), modified = Date.now() } = {}) {\r\n        /** @internal */\r\n        this.minify = () => new MinifiedFolderMeta([\r\n            this.name,\r\n            this.files.map(file => new FileEntryMeta(file).minify()),\r\n            this.folders.map(folder => new FolderEntryMeta(folder).minify()),\r\n            this.created,\r\n            this.modified\r\n        ]);\r\n        this.name = name;\r\n        this.files = files;\r\n        this.folders = folders;\r\n        this.created = created;\r\n        this.modified = modified;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass MinifiedFolderMeta extends Array {\r\n    constructor([name, files, folders, created, modified]) {\r\n        super(5);\r\n        this.unminify = () => new FolderMeta({\r\n            name: this[0],\r\n            files: this[1].map(file => new MinifiedFileEntryMeta(file).unminify()),\r\n            folders: this[2].map(folder => new MinifiedFolderEntryMeta(folder).unminify()),\r\n            created: this[3],\r\n            modified: this[4]\r\n        });\r\n        this[0] = name;\r\n        this[1] = files;\r\n        this[2] = folders;\r\n        this[3] = created;\r\n        this[4] = modified;\r\n    }\r\n}\r\nexport { FolderMeta, MinifiedFolderMeta };\r\n","import { EventEmitter } from \"events\";\r\nimport debounce from \"debounce\";\r\nclass NetQueue extends EventEmitter {\r\n    constructor({ fetch, update, data = {}, timeout = 1000 }) {\r\n        super();\r\n        this.updating = false;\r\n        this.queue = [];\r\n        this.types = {};\r\n        this.data = {};\r\n        this.push = ({ type, payload }) => {\r\n            this.queue.push({ type, payload });\r\n            this._process();\r\n        };\r\n        this.addType = ({ type, handler }) => {\r\n            this.types[type] = handler;\r\n        };\r\n        this._process = debounce(async () => {\r\n            if (this.updating)\r\n                return;\r\n            this.updating = true;\r\n            const queueCopy = Object.assign([], this.queue);\r\n            this.result = await Promise.resolve(this._fetch());\r\n            for (let { type, payload } of queueCopy) {\r\n                if (this.types[type])\r\n                    this.result = await Promise.resolve(this.types[type](this.result, payload));\r\n                else\r\n                    throw new Error(\"unknown type: \" + type);\r\n                this.queue.shift();\r\n            }\r\n            await Promise.resolve(this._update(this.result));\r\n            this.updating = false;\r\n            this.emit(\"update\", this.result);\r\n            if (this.queue.length)\r\n                this._process();\r\n        }, this._timeout);\r\n        this._fetch = fetch;\r\n        this._update = update;\r\n        this.data = data;\r\n        this._timeout = timeout;\r\n    }\r\n}\r\nexport { NetQueue };\r\n","import { util as ForgeUtil } from \"node-forge\";\r\nimport { hash } from \"../../../../core/hashing\";\r\nimport { getMetadata } from \"../../../../core/requests/metadata\";\r\nimport { decrypt } from \"../../../../core/encryption\";\r\nimport { MinifiedFolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst getFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    createMetaQueue(masterHandle, dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), location = masterHandle.getFolderLocation(dir), key = hash(folderKey.privateKey.toString(\"hex\")), \r\n    // TODO: verify folder can only be read by the creating account\r\n    response = await getMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // folderKey,\r\n    location);\r\n    try {\r\n        const metaString = decrypt(key, new ForgeUtil.ByteBuffer(Buffer.from(response.data.metadata, \"base64\"))).toString();\r\n        try {\r\n            const meta = JSON.parse(metaString);\r\n            return new MinifiedFolderMeta(meta).unminify();\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            console.info(\"META STRING:\", metaString);\r\n            throw new Error(\"metadata corrupted\");\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n        throw new Error(\"error decrypting meta\");\r\n    }\r\n};\r\nexport { getFolderMeta };\r\n","import { hash } from \"../../../hashing\";\r\nimport { encryptString } from \"../../../encryption\";\r\nimport { setMetadata } from \"../../../requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst setFolderMeta = async (masterHandle, dir, folderMeta) => {\r\n    dir = cleanPath(dir);\r\n    const folderKey = masterHandle.getFolderHDKey(dir), key = hash(folderKey.privateKey.toString(\"hex\")), metaString = JSON.stringify(folderMeta.minify()), encryptedMeta = Buffer.from(encryptString(key, metaString, \"utf8\").toHex(), \"hex\").toString(\"base64\");\r\n    // TODO: verify folder can only be changed by the creating account\r\n    await setMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // masterHandle.getFolderHDKey(dir),\r\n    masterHandle.getFolderLocation(dir), encryptedMeta);\r\n};\r\nexport { setFolderMeta };\r\n","const removeFile = async (metaQueue, meta, file) => {\r\n    // precondition for if file is no longer in the metadata\r\n    if (!meta.files.find(f => file === f || file.name === f.name))\r\n        return meta;\r\n    meta.files = meta.files.filter(f => file !== f && file.name !== f.name);\r\n    return meta;\r\n};\r\nexport { removeFile };\r\n","const removeVersion = async (metaQueue, meta, version) => {\r\n    const file = meta.files.find(f => f.versions.includes(version) || !!f.versions.find(v => version.handle === v.handle));\r\n    // precondition for if version no longer exists in meta\r\n    if (!file)\r\n        return meta;\r\n    file.versions = file.versions.filter(v => version !== v && version.handle !== v.handle);\r\n    if (file.versions.length === 0)\r\n        metaQueue.push({\r\n            type: \"remove-file\",\r\n            payload: file\r\n        });\r\n    return meta;\r\n};\r\nexport { removeVersion };\r\n","const addFile = (metaQueue, meta, file) => {\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    if (existingFile) {\r\n        existingFile.modified = file.modified;\r\n        existingFile.versions = [...existingFile.versions, ...file.versions];\r\n    }\r\n    else {\r\n        meta.files.push(file);\r\n    }\r\n    return meta;\r\n};\r\nexport { addFile };\r\n","const addFolder = (metaQueue, meta, folder) => {\r\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\r\n    if (!existingFolder)\r\n        meta.folders.push(folder);\r\n    return meta;\r\n};\r\nexport { addFolder };\r\n","const removeFolder = async (metaQueue, meta, folder) => {\r\n    // precondition for if folder is no longer in the metadata\r\n    if (!meta.folders.find(f => folder === f || folder.name === f.name))\r\n        return meta;\r\n    meta.folders = meta.folders.filter(f => folder !== f && folder.name !== f.name);\r\n    return meta;\r\n};\r\nexport { removeFolder };\r\n","import { NetQueue } from \"../../../../utils/netQueue\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { removeFile } from \"./meta/removeFile\";\r\nimport { removeVersion } from \"./meta/removeVersion\";\r\nimport { addFile } from \"./meta/addFile\";\r\nimport { addFolder } from \"./meta/addFolder\";\r\nimport { removeFolder } from \"./meta/removeFolder\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createMetaQueue = (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    if (masterHandle.metaQueue[dir])\r\n        return;\r\n    const metaQueue = new NetQueue({\r\n        fetch: async () => {\r\n            return getFolderMeta(masterHandle, dir);\r\n        },\r\n        update: async (meta) => {\r\n            await setFolderMeta(masterHandle, dir, meta);\r\n        }\r\n    });\r\n    const types = [\r\n        { type: \"add-folder\", action: addFolder },\r\n        { type: \"add-file\", action: addFile },\r\n        { type: \"remove-folder\", action: removeFolder },\r\n        { type: \"remove-file\", action: removeFile },\r\n        { type: \"remove-version\", action: removeVersion }\r\n    ];\r\n    for (let type of types) {\r\n        metaQueue.addType({\r\n            type: type.type,\r\n            handler: async (meta, payload) => {\r\n                return await type.action(metaQueue, meta, payload);\r\n            }\r\n        });\r\n    }\r\n    masterHandle.metaQueue[dir] = metaQueue;\r\n};\r\nexport { createMetaQueue };\r\n","import { FolderEntryMeta } from \"../../../../core/account/folder-entry\";\r\nimport { FolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\n// TODO: don't use polyfill\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createFolderFn = async (masterHandle, dir, name) => {\r\n    const fullDir = posix.join(dir, name);\r\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    // recurively create containing folders first\r\n    if (!await masterHandle.getFolderMeta(dir).catch(console.warn))\r\n        await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\r\n    if (await masterHandle.getFolderMeta(fullDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    // initialize as empty folder\r\n    await masterHandle.createFolderMeta(fullDir).catch(console.warn);\r\n    await masterHandle.setFolderMeta(fullDir, new FolderMeta({ name }));\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-folder\",\r\n        payload: new FolderEntryMeta({\r\n            name,\r\n            location: masterHandle.getFolderLocation(fullDir)\r\n        })\r\n    });\r\n};\r\nconst createFolder = async (masterHandle, dir, name) => {\r\n    dir = cleanPath(dir);\r\n    const fullDir = posix.join(dir, name);\r\n    if (masterHandle.metaFolderCreating[fullDir]) {\r\n        // TODO: this is hacky\r\n        await new Promise(resolve => {\r\n            const interval = setInterval(() => {\r\n                if (!masterHandle.metaFolderCreating[fullDir]) {\r\n                    resolve();\r\n                    clearInterval(interval);\r\n                }\r\n            }, 250);\r\n        });\r\n        return;\r\n    }\r\n    masterHandle.metaFolderCreating[fullDir] = true;\r\n    await createFolderFn(masterHandle, dir, name);\r\n    masterHandle.metaFolderCreating[fullDir] = false;\r\n};\r\nexport { createFolder };\r\n","import { createMetadata } from \"../../../../core/requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst createFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    try {\r\n        // TODO: verify folder can only be changed by the creating account\r\n        await createMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n        // masterHandle.getFolderHDKey(dir),\r\n        masterHandle.getFolderLocation(dir));\r\n    }\r\n    catch (err) {\r\n        console.error(`Can't create folder metadata for folder ${dir}`);\r\n        throw err;\r\n    }\r\n};\r\nexport { createFolderMeta };\r\n","import Axios from \"axios\";\r\nimport { getPayload } from \"../request\";\r\n// Metadata as hexstring as of right now\r\nexport async function deleteFile(endpoint, hdNode, fileID) {\r\n    const payload = { fileID };\r\n    const signedPayload = getPayload(payload, hdNode);\r\n    return Axios.post(endpoint + \"/api/v1/delete\", signedPayload);\r\n}\r\n","import { deleteFile as requestDeleteFile } from \"../../../../core/requests/deleteFile\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteVersion = async (masterHandle, dir, version) => {\r\n    dir = cleanPath(dir);\r\n    await requestDeleteFile(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // only send the location, not the private key\r\n    version.handle.slice(0, 64)).catch(err => {\r\n        console.warn(\"version does not exist\");\r\n        console.warn(err);\r\n    });\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-version\",\r\n        payload: version\r\n    });\r\n};\r\nexport { deleteVersion };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { deleteVersion } from \"./deleteVersion\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFile = async (masterHandle, dir, file) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir);\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // precondition for if file is no longer in the metadata\r\n    if (!existingFile)\r\n        return;\r\n    for (let version of existingFile.versions) {\r\n        await deleteVersion(masterHandle, dir, version);\r\n    }\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n};\r\nexport { deleteFile };\r\n","import { createMetaQueue } from \"./createMetaQueue\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFolder = async (masterHandle, dir, folder) => {\r\n    dir = cleanPath(dir);\r\n    const fullDir = posix.join(dir, folder.name);\r\n    if (folder.name.indexOf(\"/\") > 0 || folder.name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    const meta = await masterHandle.getFolderMeta(fullDir).catch(console.warn);\r\n    if (meta) {\r\n        await Promise.all([\r\n            (async () => {\r\n                try {\r\n                    for (let folder of meta.folders) {\r\n                        await masterHandle.deleteFolder(fullDir, folder);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error(\"Failed to delete sub folders\");\r\n                    throw err;\r\n                }\r\n            })(),\r\n            (async () => {\r\n                try {\r\n                    for (let file of meta.files) {\r\n                        await masterHandle.deleteFile(fullDir, file);\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.error(\"Failed to delete file\");\r\n                    throw err;\r\n                }\r\n            })()\r\n        ]);\r\n    }\r\n    try {\r\n        await masterHandle.deleteFolderMeta(fullDir);\r\n    }\r\n    catch (err) {\r\n        console.error(\"Failed to delete meta entry\");\r\n        throw err;\r\n    }\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: folder\r\n    });\r\n};\r\nexport { deleteFolder };\r\n","import { deleteMetadata } from \"../../../../core/requests/metadata\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst deleteFolderMeta = async (masterHandle, dir) => {\r\n    dir = cleanPath(dir);\r\n    // TODO: verify folder can only be changed by the creating account\r\n    await deleteMetadata(masterHandle.uploadOpts.endpoint, masterHandle, \r\n    // masterHandle.getFolderHDKey(dir),\r\n    masterHandle.getFolderLocation(dir));\r\n};\r\nexport { deleteFolderMeta };\r\n","import { FolderMeta } from \"../../../../core/account/folder-meta\";\r\nimport { getFolderMeta } from \"../v0/index\";\r\nconst login = async (masterHandle) => {\r\n    // try newer meta\r\n    try {\r\n        await masterHandle.getFolderMeta(\"/\");\r\n    }\r\n    catch (err) {\r\n        // try older meta\r\n        try {\r\n            const meta = await getFolderMeta(masterHandle, \"/\");\r\n            await masterHandle.deleteFolderMeta(\"/\").catch(console.warn);\r\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\r\n            console.info(\"--- META ---\", meta);\r\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta(meta));\r\n        }\r\n        catch (err) {\r\n            // no meta exists\r\n            // set meta to an empty meta\r\n            console.warn(err);\r\n            await masterHandle.createFolderMeta(\"/\").catch(console.warn);\r\n            await masterHandle.setFolderMeta(\"/\", new FolderMeta());\r\n        }\r\n    }\r\n};\r\nexport { login };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst moveFile = async (masterHandle, dir, { file, to }) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\r\n    if (!meta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!toMeta)\r\n        throw new Error(\"Can't move to folder that doesn't exist\");\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // file is no longer in the metadata\r\n    if (!existingFile)\r\n        throw new Error(\"File no longer exists\");\r\n    createMetaQueue(masterHandle, dir);\r\n    createMetaQueue(masterHandle, to);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n    masterHandle.metaQueue[to].push({\r\n        type: \"add-file\",\r\n        payload: existingFile\r\n    });\r\n};\r\nexport { moveFile };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { createFolderMeta } from \"./createFolderMeta\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst moveFolder = async (masterHandle, dir, { folder, to }) => {\r\n    dir = cleanPath(dir);\r\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(to, folder.name);\r\n    const folderMeta = await getFolderMeta(masterHandle, oldDir).catch(console.warn), outerMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), toMeta = await getFolderMeta(masterHandle, to).catch(console.warn);\r\n    if (!folderMeta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!outerMeta)\r\n        throw new Error(\"Outer folder does not exist\");\r\n    if (!toMeta)\r\n        throw new Error(\"Can't move to folder that doesn't exist\");\r\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    const existingFolder = outerMeta.folders.find(f => folder === f || folder.name === f.name);\r\n    // folder is no longer in the metadata\r\n    if (!existingFolder)\r\n        throw new Error(\"File no longer exists\");\r\n    await createFolderMeta(masterHandle, newDir).catch(console.warn);\r\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\r\n    await deleteFolderMeta(masterHandle, oldDir);\r\n    createMetaQueue(masterHandle, dir);\r\n    createMetaQueue(masterHandle, to);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: existingFolder\r\n    });\r\n    masterHandle.metaQueue[to].push({\r\n        type: \"add-folder\",\r\n        payload: existingFolder\r\n    });\r\n};\r\nexport { moveFolder };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { FileEntryMeta } from \"../../file-entry\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst renameFile = async (masterHandle, dir, { file, name }) => {\r\n    dir = cleanPath(dir);\r\n    const meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\r\n    if (!meta)\r\n        throw new Error(\"Folder does not exist\");\r\n    const existingFile = meta.files.find(f => file === f || file.name === f.name);\r\n    // file is no longer in the metadata\r\n    if (!existingFile)\r\n        throw new Error(\"File no longer exists\");\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-file\",\r\n        payload: existingFile\r\n    });\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-file\",\r\n        payload: new FileEntryMeta({\r\n            ...existingFile,\r\n            name\r\n        })\r\n    });\r\n};\r\nexport { renameFile };\r\n","import { getFolderMeta } from \"./getFolderMeta\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { getFolderLocation } from \"./index\";\r\nimport { FolderEntryMeta } from \"../../folder-entry\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst renameFolder = async (masterHandle, dir, { folder, name }) => {\r\n    dir = cleanPath(dir);\r\n    if (name.indexOf(\"/\") > 0 || name.length > 2 ** 8)\r\n        throw new Error(\"Invalid folder name\");\r\n    const oldDir = posix.join(dir, folder.name), newDir = posix.join(dir, name);\r\n    const folderMeta = await getFolderMeta(masterHandle, dir).catch(console.warn), meta = await getFolderMeta(masterHandle, dir).catch(console.warn);\r\n    if (!folderMeta)\r\n        throw new Error(\"Folder does not exist\");\r\n    if (!meta)\r\n        throw new Error(\"Outer folder does not exist\");\r\n    if (await getFolderMeta(masterHandle, newDir).catch(console.warn))\r\n        throw new Error(\"Folder already exists\");\r\n    const existingFolder = meta.folders.find(f => folder === f || folder.name === f.name);\r\n    // folder is no longer in the metadata\r\n    if (!existingFolder)\r\n        throw new Error(\"Folder no longer exists\");\r\n    await createFolder(masterHandle, dir, name);\r\n    await setFolderMeta(masterHandle, newDir, await getFolderMeta(masterHandle, oldDir));\r\n    await deleteFolderMeta(masterHandle, oldDir);\r\n    createMetaQueue(masterHandle, dir);\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"remove-folder\",\r\n        payload: existingFolder\r\n    });\r\n    masterHandle.metaQueue[dir].push({\r\n        type: \"add-folder\",\r\n        payload: new FolderEntryMeta({\r\n            name,\r\n            location: getFolderLocation(masterHandle, newDir)\r\n        })\r\n    });\r\n};\r\nexport { renameFolder };\r\n","import { EventEmitter } from \"events\";\r\nimport Upload from \"../../../../upload\";\r\nimport { FileEntryMeta } from \"../../file-entry\";\r\nimport { FileVersion } from \"../../file-version\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { posix } from \"path-browserify\";\r\nimport { cleanPath } from \"../../../../utils/cleanPath\";\r\nconst uploadFile = (masterHandle, dir, file) => {\r\n    dir = cleanPath(dir);\r\n    const upload = new Upload(file, masterHandle, masterHandle.uploadOpts), ee = new EventEmitter();\r\n    Object.assign(ee, { handle: upload.handle });\r\n    upload.on(\"upload-progress\", progress => {\r\n        ee.emit(\"upload-progress\", progress);\r\n    });\r\n    upload.on(\"error\", err => {\r\n        ee.emit(\"error\", err);\r\n    });\r\n    upload.on(\"finish\", async (finishedUpload) => {\r\n        if (!await getFolderMeta(masterHandle, dir).catch(console.warn))\r\n            await createFolder(masterHandle, posix.dirname(dir), posix.basename(dir));\r\n        createMetaQueue(masterHandle, dir);\r\n        masterHandle.metaQueue[dir].push({\r\n            type: \"add-file\",\r\n            payload: new FileEntryMeta({\r\n                name: file.name,\r\n                modified: file.lastModified,\r\n                versions: [\r\n                    new FileVersion({\r\n                        handle: finishedUpload.handle,\r\n                        size: file.size,\r\n                        modified: file.lastModified\r\n                    })\r\n                ]\r\n            })\r\n        });\r\n        masterHandle.metaQueue[dir].once(\"update\", meta => {\r\n            ee.emit(\"finish\", finishedUpload);\r\n        });\r\n    });\r\n    return ee;\r\n};\r\nexport { uploadFile };\r\n","import { downloadFile } from \"../v0/downloadFile\";\r\nimport { generateSubHDKey } from \"../v0/generateSubHDKey\";\r\nimport { getAccountInfo } from \"../v0/getAccountInfo\";\r\nimport { getFolderHDKey } from \"../v0/getFolderHDKey\";\r\nimport { getFolderLocation } from \"../v0/getFolderLocation\";\r\nimport { getHandle } from \"../v0/getHandle\";\r\nimport { isPaid } from \"../v0/isPaid\";\r\nimport { register } from \"../v0/register\";\r\nimport { createFolder } from \"./createFolder\";\r\nimport { createFolderMeta } from \"./createFolderMeta\";\r\nimport { createMetaQueue } from \"./createMetaQueue\";\r\nimport { deleteFile } from \"./deleteFile\";\r\nimport { deleteFolder } from \"./deleteFolder\";\r\nimport { deleteFolderMeta } from \"./deleteFolderMeta\";\r\nimport { deleteVersion } from \"./deleteVersion\";\r\nimport { getFolderMeta } from \"./getFolderMeta\";\r\nimport { login } from \"./login\";\r\nimport { moveFile } from \"./moveFile\";\r\nimport { moveFolder } from \"./moveFolder\";\r\nimport { renameFile } from \"./renameFile\";\r\nimport { renameFolder } from \"./renameFolder\";\r\nimport { setFolderMeta } from \"./setFolderMeta\";\r\nimport { uploadFile } from \"./uploadFile\";\r\nexport { downloadFile, generateSubHDKey, getAccountInfo, getFolderHDKey, getFolderLocation, getHandle, isPaid, register, createFolder, createFolderMeta, createMetaQueue, deleteFile, deleteFolder, deleteFolderMeta, deleteVersion, getFolderMeta, login, moveFile, moveFolder, renameFile, renameFolder, setFolderMeta, uploadFile };\r\n/**\r\n * internal API v1\r\n *\r\n * @internal\r\n */\r\nconst v1 = {\r\n    downloadFile,\r\n    generateSubHDKey,\r\n    getAccountInfo,\r\n    getFolderHDKey,\r\n    getFolderLocation,\r\n    getHandle,\r\n    isPaid,\r\n    register,\r\n    createFolder,\r\n    createFolderMeta,\r\n    createMetaQueue,\r\n    deleteFile,\r\n    deleteFolder,\r\n    deleteFolderMeta,\r\n    deleteVersion,\r\n    getFolderMeta,\r\n    login,\r\n    moveFile,\r\n    moveFolder,\r\n    renameFile,\r\n    renameFolder,\r\n    setFolderMeta,\r\n    uploadFile\r\n};\r\nexport default v1;\r\n","import { generateMnemonic, mnemonicToSeedSync, validateMnemonic, } from \"bip39\";\r\nimport HDKey, { fromMasterSeed } from \"hdkey\";\r\nimport * as namehash from \"eth-ens-namehash\";\r\nimport { hashToPath } from \"./utils/hashToPath\";\r\nimport { getFolderHDKey, uploadFile, deleteFile, deleteVersion, downloadFile, getFolderLocation, createFolderMeta, createFolder, deleteFolderMeta, deleteFolder, setFolderMeta, getFolderMeta, getAccountInfo, isPaid, login, register, generateSubHDKey, getHandle, moveFile, moveFolder, renameFile, renameFolder } from \"./core/account/api/v1/index\";\r\n/**\r\n * <b><i>this should never be shared or left in storage</i></b><br />\r\n *\r\n * a class for representing the account mnemonic\r\n *\r\n * @public\r\n */\r\nclass Account {\r\n    /**\r\n     * creates an account from a mnemonic if provided, otherwise from entropy\r\n     *\r\n     * @param mnemonic - the mnemonic to use for the account\r\n     */\r\n    constructor(mnemonic = generateMnemonic()) {\r\n        if (!validateMnemonic(mnemonic)) {\r\n            throw new Error(\"mnemonic provided was not valid\");\r\n        }\r\n        this._mnemonic = mnemonic;\r\n    }\r\n    get mnemonic() {\r\n        return this._mnemonic.trim().split(/\\s+/g);\r\n    }\r\n    get seed() {\r\n        return mnemonicToSeedSync(this._mnemonic);\r\n    }\r\n}\r\n/**\r\n * <b><i>this should never be shared or left in storage</i></b><br />\r\n *\r\n * a class for creating a master handle from an account mnemonic\r\n *\r\n * @remarks\r\n *\r\n * a master handle is responsible for:\r\n *  <br /> - logging in to an account\r\n *  <br /> - signing changes for the account\r\n *  <br /> - deterministic entropy for generating features of an account (such as folder keys)\r\n *\r\n * @public\r\n */\r\nclass MasterHandle extends HDKey {\r\n    /**\r\n     * creates a master handle from an account\r\n     *\r\n     * @param _ - the account to generate the handle from\r\n     * @param _.account - an {@link Account}\r\n     * @param _.handle - an account handle as a string\r\n     */\r\n    constructor({ account, handle, }, { uploadOpts = {}, downloadOpts = {} } = {}) {\r\n        super();\r\n        this.metaQueue = {};\r\n        this.metaFolderCreating = {};\r\n        /**\r\n         * creates a sub key seed for validating\r\n         *\r\n         * @param path - the string to use as a sub path\r\n         */\r\n        this.generateSubHDKey = (pathString) => generateSubHDKey(this, pathString);\r\n        this.uploadFile = (dir, file) => uploadFile(this, dir, file);\r\n        this.downloadFile = (handle) => downloadFile(this, handle);\r\n        /**\r\n         * deletes every version of a file and removes it from the metadata\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param file - file entry to delete (loosely matched name)\r\n         */\r\n        this.deleteFile = (dir, file) => deleteFile(this, dir, file);\r\n        /**\r\n         * deletes a single version of a file (ie. delete by handle)\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param version - version to delete (loosely matched by handle)\r\n         */\r\n        this.deleteVersion = (dir, version) => deleteVersion(this, dir, version);\r\n        /**\r\n         * creates a dir key seed for validating and folder navigation\r\n         *\r\n         * @param dir - the folder\r\n         */\r\n        this.getFolderHDKey = (dir) => getFolderHDKey(this, dir);\r\n        /**\r\n         * get the location (ie. metadata id) of a folder\r\n         *\r\n         * @remarks this is a deterministic location derived from the account's hdkey to allow for random folder access\r\n         *\r\n         * @param dir - the folder to locate\r\n         */\r\n        this.getFolderLocation = (dir) => getFolderLocation(this, dir);\r\n        /**\r\n         * request the creation of a folder metadata\r\n         *\r\n         * @param dir - the folder to create\r\n         */\r\n        this.createFolderMeta = async (dir) => createFolderMeta(this, dir);\r\n        /**\r\n         * create folder {name} inside of {dir}\r\n         *\r\n         * @param dir - the containing folder\r\n         * @param name - the name of the new folder\r\n         */\r\n        this.createFolder = async (dir, name) => createFolder(this, dir, name);\r\n        this.deleteFolderMeta = async (dir) => deleteFolderMeta(this, dir);\r\n        this.deleteFolder = async (dir, folder) => deleteFolder(this, dir, folder);\r\n        this.moveFile = async (dir, { file, to }) => moveFile(this, dir, { file, to });\r\n        this.moveFolder = async (dir, { folder, to }) => moveFolder(this, dir, { folder, to });\r\n        this.renameFile = async (dir, { file, name }) => renameFile(this, dir, { file, name });\r\n        this.renameFolder = async (dir, { folder, name }) => renameFolder(this, dir, { folder, name });\r\n        this.setFolderMeta = async (dir, folderMeta) => setFolderMeta(this, dir, folderMeta);\r\n        this.getFolderMeta = async (dir) => getFolderMeta(this, dir);\r\n        this.getAccountInfo = async () => getAccountInfo(this);\r\n        this.isPaid = async () => isPaid(this);\r\n        this.login = async () => login(this);\r\n        this.register = async (duration, limit) => register(this, duration, limit);\r\n        this.uploadOpts = uploadOpts;\r\n        this.downloadOpts = downloadOpts;\r\n        if (account && account.constructor == Account) {\r\n            const path = \"m/43'/60'/1775'/0'/\" + hashToPath(namehash.hash(\"opacity.io\").replace(/^0x/, \"\"));\r\n            // ethereum/EIPs#1775\r\n            Object.assign(this, fromMasterSeed(account.seed).derive(path));\r\n        }\r\n        else if (handle && handle.constructor == String) {\r\n            this.privateKey = Buffer.from(handle.slice(0, 64), \"hex\");\r\n            this.chainCode = Buffer.from(handle.slice(64), \"hex\");\r\n        }\r\n        else {\r\n            throw new Error(\"master handle was not of expected type\");\r\n        }\r\n    }\r\n    /**\r\n     * get the account handle\r\n     */\r\n    get handle() {\r\n        return getHandle(this);\r\n    }\r\n}\r\nexport { Account, MasterHandle, HDKey };\r\n"],"names":["DEFAULT_OPTIONS","Object","freeze","objectMode","FileSourceStream","Readable","constructor","blob","options","opts","assign","console","log","offset","reader","FileReader","_onChunkRead","bind","blockSize","Error","_read","readyState","LOADING","_readChunkFromBlob","limit","Math","min","size","push","chunk","slice","onload","readAsArrayBuffer","event","target","result","Uint8Array","BufferSourceStream","data","buffer","read","_readChunkFromBuffer","buf","length","FILENAME_MAX_LENGTH","IV_BYTE_LENGTH","TAG_BYTE_LENGTH","TAG_BIT_LENGTH","DEFAULT_BLOCK_SIZE","BLOCK_OVERHEAD","DEFAULT_PART_SIZE","Forge","md","ForgeMd","random","ForgeRandom","util","ForgeUtil","ByteBuffer","generateFileKeys","hash","sha256","create","update","getBytesSync","digest","toHex","key","handle","keysFromHandle","bytes","binary","hex","decode","getBytes","bytesToHex","sanitizeFilename","filename","l","start","substring","end","getFileData","file","nameFallback","isBuffer","name","type","mime","getType","getMimeType","metadata","getUploadSize","params","blockCount","ceil","getEndIndex","uploadSize","partSize","chunkSize","chunkCount","chunksPerPart","endIndex","getBlockSize","p","cipher","ForgeCipher","encrypt","byteBuffer","keyBuf","Buffer","from","iv","createCipher","tagLength","finish","clear","putBuffer","output","mode","tag","putBytes","encryptString","string","encoding","createBuffer","encryptBytes","decrypt","decipher","createDecipher","truncate","decryptBytes","raw","decryptString","toString","createMetadata","encryptMetadata","encryptedMeta","JSON","stringify","decryptMetadata","byteStr","encode","meta","parse","binaryMode","DecryptStream","Transform","iter","_transform","callback","emit","autostart","maxParallelDownloads","maxRetries","DownloadStream","url","chunks","chunkId","pushId","bytesDownloaded","isDownloadFinished","ongoingDownloads","pushChunk","floor","_download","attemptDownload","_pushChunk","chunkIndex","index","range","id","download","Axios","get","responseType","headers","error","_afterDownload","METADATA_PATH","autoStart","Download","EventEmitter","_metadata","downloadMetadata","toBuffer","totalLength","startDownload","Promise","resolve","decryptStream","on","once","concat","catch","err","toFile","File","getDownloadURL","downloadFile","e","propagateError","overwrite","req","downloadURLRequest","post","endpoint","fileID","res","status","downloadURL","fileDownloadUrl","metadataRequest","path","isDownloading","downloadStream","progress","pipe","finishDownload","warn","message","process","nextTick","EncryptStream","getPlans","checkPaymentStatus","hdNode","payload","timestamp","Date","now","signedPayload","getPayload","createAccount","metadataKey","duration","durationInMonths","storageLimit","deleteMetadata","setMetadata","getMetadata","POLYFILL_FORMDATA","FormData","rawPayload","EthUtil","signature","sign","pubKey","publicKey","getPayloadFD","extraPayload","FormDataNode","append","keys","forEach","pl","contentType","knownLength","Blob","maxParallelUploads","UploadStream","Writable","account","bytesUploaded","blockBuffer","partBuffer","bufferSize","ongoingUploads","retries","partIndex","finalCallback","_write","_addPart","_attemptUpload","_final","_finishUpload","blocks","block","shift","set","part","_upload","cork","fileHandle","chunkData","upload","getHeaders","onUploadProgress","then","_afterUpload","_uploadError","uncork","confirmUpload","_confirmUpload","uploadFinished","setTimeout","missingIndexes","DEFAULT_FILE_PARAMS","Upload","startUpload","uploadMetadata","uploadFile","fileSizeInByte","readStream","encryptStream","uploadStream","finishUpload","masterHandle","downloadOpts","val","soliditySha3","replace","hashToPath","h","prefix","match","map","parseInt","join","generateSubHDKey","pathString","derive","getAccountInfo","uploadOpts","posixSep","RegExp","posix","sep","posixSepEnd","win32Sep","trimTrailingSep","cleanPath","getFolderHDKey","dir","getFolderLocation","getFolderMeta","folderKey","location","privateKey","response","metaString","info","getHandle","chainCode","isPaid","accountInfoResponse","paymentStatus","register","invoice","cost","ethAddress","waitForPayment","createAccountResponse","interval","setInterval","time","clearInterval","login","v0","FolderEntryMeta","minify","MinifiedFolderEntryMeta","Array","unminify","FileVersion","created","modified","MinifiedFileVersion","FileEntryMeta","versions","MinifiedFileEntryMeta","version","FolderMeta","files","folders","MinifiedFolderMeta","folder","NetQueue","fetch","timeout","updating","queue","types","_process","addType","handler","debounce","queueCopy","_fetch","_update","_timeout","createMetaQueue","setFolderMeta","folderMeta","removeFile","metaQueue","find","f","filter","removeVersion","includes","v","addFile","existingFile","addFolder","existingFolder","removeFolder","action","createFolderFn","fullDir","indexOf","createFolder","dirname","basename","createFolderMeta","metaFolderCreating","deleteFile","deleteVersion","requestDeleteFile","deleteFolder","all","deleteFolderMeta","moveFile","to","toMeta","moveFolder","oldDir","newDir","outerMeta","renameFile","renameFolder","ee","finishedUpload","lastModified","v1","Account","mnemonic","generateMnemonic","validateMnemonic","_mnemonic","trim","split","seed","mnemonicToSeedSync","MasterHandle","HDKey","namehash","fromMasterSeed","String"],"mappings":"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"}